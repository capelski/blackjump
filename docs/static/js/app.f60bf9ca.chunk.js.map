{"version":3,"sources":["assets/hit.mp3","assets/miss.mp3","assets/card-slide.mp3","src/types/card.ts","src/types/casino-rules.ts","src/types/decisions.ts","src/types/hand.ts","src/types/navigation.ts","src/types/onboarding.ts","src/types/phases.ts","src/types/training-pair.ts","src/async-storage.ts","src/constants.ts","src/utils.ts","src/logic/dealer-symbols.ts","src/logic/casino-rules.ts","src/logic/hand-decision-set.ts","src/logic/training-hand.ts","src/logic/card.ts","src/logic/hand-code.ts","src/logic/hand.ts","src/logic/training-pair.ts","src/logic/training-status.ts","src/components/nav-bar-items/config-button.tsx","src/components/nav-bar-items/earnings-indicator.tsx","src/components/nav-bar-items/precision-indicator.tsx","src/components/nav-bar-items/progress-indicator.tsx","src/logic/onboarding.ts","src/components/onboarding-section.tsx","src/components/nav-bar.tsx","src/components/button.tsx","src/components/onboarding-bar.tsx","src/logic/player.ts","src/logic/app-state.ts","src/logic/basic-strategy.ts","src/logic/game-config.ts","src/components/casino-rules/doubling-picker.tsx","src/components/switcher.tsx","src/components/casino-rules/rule-switcher.tsx","src/components/casino-rules/splits-number-picker.tsx","src/views/basic-strategy-table.tsx","src/logic/sound-queue.ts","src/components/card-component.tsx","src/components/hand-component.tsx","src/views/blackjack-peek.tsx","src/components/divider.tsx","src/components/help-icon.tsx","src/views/config-menu.tsx","src/views/earnings-chart.tsx","src/components/hand-decisions-table.tsx","src/views/hand-decisions.tsx","src/views/hit-split-aces.tsx","src/views/missed-pairs.tsx","src/views/onboarding.tsx","src/components/actions.tsx","src/components/decision-evaluation.tsx","src/views/table.tsx","src/views/training-completed.tsx","src/views/training-pairs.tsx","src/views/untrained-pairs-priority.tsx","src/blackjump.tsx","App.tsx"],"names":["module","exports","CardSuit","SimpleCardSymbol","SpecialCardSymbol","CasinoRulesKeys","Doubling","SplitsNumber","BaseDecisions","DynamicDecisions","PlayerDecisions","HandCode","HandOutcome","RouteNames","OnBoardingSections","OnBoardingStepEvent","Phases","TrainingPairStatus","initialRouteName","table","updatePlayerEarnings","playerEarnings","AsyncStorage","setItem","JSON","stringify","catch","updatePlayerEarningsHistorical","playerEarningsHistorical","updateTrainingProgress","TrainingProgress","colors","hit","stand","double_hit","double_stand","split_hit","split_stand","split_surrender_hit","surrender_hit","surrender_split_hit","surrender_stand","double","split","surrender","cartesianProduct","firstArray","secondArray","elementBuilder","reduce","product","x","concat","map","y","getObjectKeys","object","Object","keys","getRandomItem","items","Math","round","random","length","playSound","sound","stopAsync","then","playAsync","allDealerSymbols","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Ace","getUntrainedDealerSymbols","trainingHandStatus","filter","dealerSymbol","passed","getDefaultCasinoRules","blackjackPeek","dealerHitsSoft17","doubling","nineToElevenSoft","doublingAfterSplit","hitSplitAces","splitsNumber","three","alwaysHit","alwaysStand","handDecisionSetGetters","Split2s","casinoRules","none","Split3s","Split4s","Split5s","tenToEleven","Split6s","Split7s","Split8s","Split9s","Split10s","SplitAs","Soft13","anyPair","Soft14","Soft15","Soft16","Soft17","Soft18","Soft19","Soft20","Hard5","Hard6","Hard7","Hard8","Hard9","nineToEleven","Hard10","Hard11","Hard12","Hard13","Hard14","Hard15","Hard16","Hard17","Hard18","Hard19","Hard20","getSelectedTrainingHands","trainingHands","selectedHands","values","hand","code","getTrainingHands","decisionSet","dependencies","name","getUntrainedTrainingHands","trainingProgress","trainingHand","cardsValue","Jack","Queen","King","createCard","symbol","suit","isHoleCard","isRandom","undefined","getRandomSuit","suits","clubs","diamonds","hearts","spades","symbols","deck","getCardEffectiveValue","card","getCardValues","getCardsValues","cards","options","numbers","numbersDictionary","dictionary","next","removeDuplicates","peeking","reducedValues","currentValues","getRandomCard","randomCard","simpleSymbolToSymbol","simpleSymbol","tenPointsSymbols","symbolToSimpleSymbol","indexOf","valueToSymbol","number","String","isSoftHandCode","handCode","includes","isSplitHandCode","areHandsSplitAces","hands","canSplit","handsNumber","createDealerHand","dealerSuit","dealerCards","push","createHand","bet","dealCard","getCardForUntrainedHand","playerHand","nextCard","isPlayerHandSoft","playerHandValues","valuesToUntrainedHands","valueToReachThisHand","isHandUntrainedForDealerSymbol","untrained","softDifference","parseInt","hardDifference","value","getHandEffectiveValue","effectiveValue","some","v","reverse","find","getHandValidValues","handCodeToHand","handSymbols","getSplitHandSymbols","handValues","s","complementarySymbol","floor","getSoftHandSymbols","minValue","max","maxValue","min","firstValue","secondValue","getHardHandSymbols","handToHandCode","c","join","hasHoleCard","isBlackjack","isBust","isFinished","isAcesPairHand","isAcesPair","revealDealerHoleCard","allTrainingPairsNumber","getSpecificTrainingPair","dealer","player","getDefaultTrainingStatus","attemptedTrainingPairs","isCompleted","isProgressBlocked","missedTrainingPairs","passedTrainingPairs","reducedTrainingProgress","reducedDealerSymbols","getIsProgressBlocked","trainingStatus","selectedHandsOnly","getProgressPercentage","isTrainingCompleted","reduceTrainingPairProgress","trainingPairStatus","reducedTrainingStatus","missed","retrieveTrainingStatus","gameConfig","reduceTrainingHandProgress","ConfigButton","props","TouchableOpacity","onPress","isEnabled","routeName","navigation","navigate","configMenu","goBack","style","alignItems","flexGrow","justifyContent","width","Fragment","height","viewBox","fill","d","progress","View","position","right","bottom","Text","color","fontWeight","EarningsIndicator","earningsColor","earnings","earningsChart","flexDirection","fontSize","marginTop","transform","PrecisionIndicator","precision","missedPairs","marginLeft","ProgressIndicator","trainingPairs","onBoardingSteps","activeSection","tableActions","event","startRound","hideNextButton","load","text","tablePlayerHands","hidePreviousButton","tableDealerHand","playerAction","tableFeedback","progressIndicator","precisionIndicator","earningsIndicator","configMenuButton","basicStrategyTable","appSettings","resetTraining","OnBoardingSection","isOnboardingActive","onBoardingStep","isHighlighted","children","backgroundColor","opacity","top","left","animateIndicator","Animated","sequence","timing","toValue","duration","useNativeDriver","start","NavBar","earningsPosition","useMemo","Value","precisionPosition","progressPosition","progressPercentage","useEffect","cash","translateX","Button","marginBottom","textColor","textSize","OnboardingBar","currentStep","previousStepHandler","padding","nextStepHandler","exitOnboarding","getCurrentHand","handIndex","resolvePlayerEarnings","dealerHand","handOutcome","playerHandValue","dealerHandValue","bust","blackjack","dealerWins","playerWins","outcome","resolveHand","mustDealerDraw","handEffectiveValue","evaluateDynamicDecision","dynamicDecision","dynamicConditions","canDouble","canSurrender","DoublingPicker","paddingTop","flex","selectedValue","onValueChange","newValue","nextDoubling","nextCasinoRules","Item","label","Switcher","disabled","Switch","marginRight","trackColor","true","false","RuleSwitcher","ruleName","SplitsNumberPicker","nextSplitsNumber","one","two","actionsAbbreviationMap","handCodesAbbreviationMap","cellWidth","TextCell","marginVertical","paddingVertical","textAlign","BasicStrategyTable","useState","setCasinoRules","ScrollView","Linking","fontStyle","paddingHorizontal","cardSymbol","action","pushSound","soundQueue","sounds","isActive","playNextSound","nextSound","pop","setTimeout","CardComponent","cardSlideSound","setCardSlideSound","animateCard","skipAnimation","parallel","animationsDuration","isSoundEnabled","Audio","Sound","createAsync","cardSlideSoundMp3","volume","result","setValue","cardColor","borderRadius","translateY","untrainedPairsPriority","HandComponent","displayValues","isCurrentHand","flexWrap","maxWidth","index","BlackjackPeek","margin","Divider","HelpIcon","ConfigMenu","isDealerAnimationEnabled","setIsDealerAnimationEnabled","setIsProgressBlocked","setIsSoundEnabled","setSelectedHands","setSelectedHandsOnly","setTrainingHands","setUntrainedPairsPriority","isSomeHandSelected","_selectedHandsOnly","_selectedHands","isProgressBlockedHandler","nextSelectedHandsOnly","nextSelectedHands","nextTrainingHands","casinoRuleChangeHandler","isSaveButtonEnabled","key","contentContainerStyle","paddingBottom","borderLeftColor","borderLeftWidth","setGameConfig","phase","finished","onboarding","body","Platform","OS","window","confirm","resetTrainingStatus","Alert","alert","getChartDimensions","data","absoluteMax","ceil","reduced","abs","Number","MIN_VALUE","primeFactors","factors","divisor","getPrimeFactors","boundaries","scale","Dimensions","get","screenHorizontalMargin","getCurrentPage","nextIndex","slice","EarningsChart","dimensions","earningsHistorical","page","setPage","formattedData","boundaryDots","boundaryDotsWidth","chartWidth","source","getFormattedData","marginHorizontal","overflow","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","linejoinType","propsForLabels","datasets","labels","segments","withVerticalLines","HandDecisionsTable","handDecisionSet","simpleCardSymbol","HandDecisions","route","params","previousValue","ranges","dependency","HitSplitAces","textProperties","boldTextProperties","MissedPairs","missedTrainingPair","handName","trainingPair","startTrainingRound","Onboarding","startOnboardingHandler","skipOnboardingHandler","Actions","isPlayerTurn","isDoublingAvailable","isSurrenderAvailable","activeOptionalButtons","optionalButtonsWidth","untrainedTrainingHands","randomTrainingHand","untrainedDealerSymbols","randomDealerSymbol","getUntrainedTrainingPair","isHitEnabled","handlers","isSplitEnabled","isDoubleEnabled","isSurrenderEnabled","DecisionEvaluationComponent","decisionEvaluation","isHit","showDecisionsHandler","Table","minHeight","handDecisions","lastActionHand","TrainingCompleted","TrainingPairs","unfoldedHand","setUnfoldedHand","UntrainedPairsPriority","hardNine","navigationListener","Stack","createStackNavigator","BlackJump","currentRoute","setCurrentRoute","setDealerHand","setDecisionEvaluation","decisionEvaluationTimeout","setDecisionEvaluationTimeout","setOnBoardingStep","setPeeking","setPhase","setPlayer","setSounds","setTrainingStatus","navigationRef","useRef","currentGameConfig","Promise","all","getItem","storedGameConfig","parse","hitSoundMp3","missSoundMp3","results","miss","errors","console","log","_gameConfig","hasCompletedOnboarding","_sounds","current","nextTrainingStatus","addListener","state","routes","currentHand","isHandWithTwoCards","isSingleHand","contains9To11","handValue","is10To11","is9To11","currentDealerSymbol","updateOnBoardingStep","direction","nextStep","clearTimeout","nextTimeout","nextDealerHand","nextCash","nextEarningsHistorical","handleDealerTurn","saveGameConfig","nextGameConfig","updateGameConfig","nextPlayer","initialHand","initializeHands","visibleCard","canBeDealerBlackjack","cardValues","isDealerBlackjack","finishCurrentHand","isLastHand","nextHand","startNextHand","evaluatePlayerDecision","playerDecision","nextDecisionEvaluation","optimalDecision","evaluateDecision","currentHandCode","currentHandTrainingStatus","nextAttemptedTrainingPairs","nextMissedTrainingPairs","getNextMissedTrainingPairs","nextPassedTrainingHands","getNextTrainingStatus","trainingCompleted","doubleHandler","doubleCurrentHand","hitHandler","hitCurrentHand","standHandler","standCurrentHand","splitHandler","firstHand","secondHand","splice","splitCurrentHand","surrenderHandler","surrenderCurrentHand","NavigationContainer","ref","StatusBar","hidden","Navigator","screenOptions","headerShown","cardStyle","Screen","component","App"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,wECS/BC,EAWAC,EAaAC,ECvBAC,EAUAC,EAQAC,EC1BAC,EAoBAC,EAaAC,EC1BAC,EAqCAC,ECtCAC,E,mJJCAX,K,eAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAWAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,E,SAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,SAAAA,E,UAAAA,M,cAaAC,K,SAAAA,E,UAAAA,E,UAAAA,M,cCvBAC,K,+BAAAA,E,uCAAAA,E,oBAAAA,E,0CAAAA,E,8BAAAA,E,6BAAAA,E,uBAAAA,M,cAUAC,O,eAAAA,I,6BAAAA,I,+BAAAA,I,uCAAAA,I,sBAAAA,M,cAQAC,O,eAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,cC1BAC,K,UAAAA,E,eAAAA,M,cAoBAC,K,0BAAAA,E,8BAAAA,E,wBAAAA,E,4BAAAA,E,wCAAAA,E,gCAAAA,E,wCAAAA,E,qCAAAA,M,cAaAC,K,gBAAAA,E,cAAAA,E,uBAAAA,M,cC1BAC,K,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,cAqCAC,K,sBAAAA,E,YAAAA,E,yBAAAA,E,yBAAAA,E,aAAAA,M,cCtCAC,K,wCAAAA,E,8BAAAA,E,wBAAAA,E,8BAAAA,E,8BAAAA,E,4BAAAA,E,0BAAAA,E,wBAAAA,E,cAAAA,E,sCAAAA,E,8BAAAA,E,iDAAAA,M,KAeL,ICrBKC,EAyBAC,EC3BAC,ECaAC,EHUCC,EAAmBL,EAAWM,O,SCrB/BL,K,0BAAAA,E,wCAAAA,E,0BAAAA,E,oCAAAA,E,sCAAAA,E,0BAAAA,E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","file":"static/js/app.f60bf9ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hit.dc863917.mp3\";","module.exports = __webpack_public_path__ + \"static/media/miss.497d59f1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-slide.d80ce25b.mp3\";","import { Dictionary } from './dictionary';\r\n\r\nexport interface Card {\r\n    isHoleCard?: boolean;\r\n    isRandom: boolean;\r\n    suit: CardSuit;\r\n    symbol: CardSymbol;\r\n}\r\n\r\nexport enum CardSuit {\r\n    clubs = '\\u2663',\r\n    diamonds = '\\u2666',\r\n    hearts = '\\u2665',\r\n    spades = '\\u2660'\r\n}\r\n\r\nexport type CardSymbol = SimpleCardSymbol | SpecialCardSymbol;\r\n\r\nexport type CardValues = Dictionary<number[], CardSymbol>;\r\n\r\nexport enum SimpleCardSymbol {\r\n    Ace = 'A',\r\n    Two = '2',\r\n    Three = '3',\r\n    Four = '4',\r\n    Five = '5',\r\n    Six = '6',\r\n    Seven = '7',\r\n    Eight = '8',\r\n    Nine = '9',\r\n    Ten = '10'\r\n}\r\n\r\nexport enum SpecialCardSymbol {\r\n    Jack = 'J',\r\n    Queen = 'Q',\r\n    King = 'K'\r\n}\r\n\r\nexport type TenPointsCardSymbol = SimpleCardSymbol.Ten | SpecialCardSymbol;\r\n","export interface CasinoRules {\r\n    [CasinoRulesKeys.blackjackPeek]: boolean;\r\n    [CasinoRulesKeys.dealerHitsSoft17]: boolean;\r\n    [CasinoRulesKeys.doubling]: Doubling;\r\n    [CasinoRulesKeys.doublingAfterSplit]: boolean;\r\n    [CasinoRulesKeys.hitSplitAces]: boolean;\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber;\r\n    [CasinoRulesKeys.surrender]: boolean;\r\n}\r\n\r\nexport enum CasinoRulesKeys {\r\n    blackjackPeek = 'Blackjack Peek',\r\n    dealerHitsSoft17 = 'Dealer hits soft 17',\r\n    doubling = 'Doubling',\r\n    doublingAfterSplit = 'Doubling after split',\r\n    hitSplitAces = 'Hit split aces',\r\n    splitsNumber = 'Splits number',\r\n    surrender = 'Surrender'\r\n}\r\n\r\nexport enum Doubling {\r\n    none = 0,\r\n    tenToEleven = 1,\r\n    nineToEleven = 2,\r\n    nineToElevenSoft = 3,\r\n    anyPair = 4\r\n}\r\n\r\nexport enum SplitsNumber {\r\n    none = 0,\r\n    one = 1,\r\n    two = 2,\r\n    three = 3\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\n\r\nexport enum BaseDecisions {\r\n    hit = 'Hit',\r\n    stand = 'Stand'\r\n}\r\n\r\nexport interface DecisionEvaluation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    dynamicDecision: DynamicDecision;\r\n    handName: string;\r\n    isHit: boolean;\r\n}\r\n\r\nexport interface DynamicConditions {\r\n    canDouble: boolean;\r\n    canSplit: boolean;\r\n    canSurrender: boolean;\r\n}\r\n\r\nexport type DynamicDecision = BaseDecisions | DynamicDecisions;\r\n\r\nexport enum DynamicDecisions {\r\n    double_hit = 'Double / Hit',\r\n    double_stand = 'Double / Stand',\r\n    split_hit = 'Split / Hit',\r\n    split_stand = 'Split / Stand',\r\n    split_surrender_hit = 'Split / Surrender',\r\n    surrender_hit = 'Surrender / Hit',\r\n    surrender_split_hit = 'Surrender / Split',\r\n    surrender_stand = 'Surrender / Stand'\r\n}\r\n\r\nexport type PlayerDecision = BaseDecisions | PlayerDecisions;\r\n\r\nexport enum PlayerDecisions {\r\n    double = 'Double',\r\n    split = 'Split',\r\n    surrender = 'Surrender'\r\n}\r\n","import { Card } from './card';\r\n\r\nexport interface Hand {\r\n    bet: number;\r\n    cards: Card[];\r\n    outcome?: string;\r\n    values: number[];\r\n}\r\n\r\nexport enum HandCode {\r\n    Split2s = '2,2',\r\n    Split3s = '3,3',\r\n    Split4s = '4,4',\r\n    Split5s = '5,5',\r\n    Split6s = '6,6',\r\n    Split7s = '7,7',\r\n    Split8s = '8,8',\r\n    Split9s = '9,9',\r\n    Split10s = '10,10',\r\n    SplitAs = 'A,A',\r\n    Soft13 = '3/13',\r\n    Soft14 = '4/14',\r\n    Soft15 = '5/15',\r\n    Soft16 = '6/16',\r\n    Soft17 = '7/17',\r\n    Soft18 = '8/18',\r\n    Soft19 = '9/19',\r\n    Soft20 = '10/20',\r\n    Hard5 = '5',\r\n    Hard6 = '6',\r\n    Hard7 = '7',\r\n    Hard8 = '8',\r\n    Hard9 = '9',\r\n    Hard10 = '10',\r\n    Hard11 = '11',\r\n    Hard12 = '12',\r\n    Hard13 = '13',\r\n    Hard14 = '14',\r\n    Hard15 = '15',\r\n    Hard16 = '16',\r\n    Hard17 = '17',\r\n    Hard18 = '18',\r\n    Hard19 = '19',\r\n    Hard20 = '20'\r\n}\r\n\r\nexport enum HandOutcome {\r\n    blackjack = 'Blackjack',\r\n    bust = 'Bust',\r\n    dealerWins = 'Dealer wins',\r\n    playerWins = 'Player wins',\r\n    push = 'Push'\r\n}\r\n","import { Route } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { TrainingHand } from './training-hand';\r\n\r\nexport type AppNavigation = StackNavigationProp<RouteParams>;\r\n\r\nexport type AppRoute<T extends RouteNames> = Route<T, RouteParams[T]>;\r\n\r\nexport enum RouteNames {\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    blackjackPeek = 'blackjackPeek',\r\n    configMenu = 'configMenu',\r\n    earningsChart = 'earningsChart',\r\n    handDecisions = 'handDecisions',\r\n    hitSplitAces = 'hitSplitAces',\r\n    missedPairs = 'missedPairs',\r\n    onboarding = 'onboarding',\r\n    table = 'table',\r\n    trainingCompleted = 'trainingCompleted',\r\n    trainingPairs = 'trainingPairs',\r\n    untrainedPairsPriority = 'untrainedPairsPriority'\r\n}\r\n\r\nexport const initialRouteName = RouteNames.table;\r\n\r\nexport type RouteParams = {\r\n    [RouteNames.basicStrategyTable]: undefined;\r\n    [RouteNames.blackjackPeek]: undefined;\r\n    [RouteNames.configMenu]: undefined;\r\n    [RouteNames.earningsChart]: undefined;\r\n    [RouteNames.handDecisions]: {\r\n        trainingHand: TrainingHand;\r\n    };\r\n    [RouteNames.hitSplitAces]: undefined;\r\n    [RouteNames.missedPairs]: undefined;\r\n    [RouteNames.onboarding]: undefined;\r\n    [RouteNames.table]: undefined;\r\n    [RouteNames.trainingCompleted]: undefined;\r\n    [RouteNames.trainingPairs]: undefined;\r\n    [RouteNames.untrainedPairsPriority]: undefined;\r\n};\r\n","import { AppNavigation } from './navigation';\r\n\r\nexport enum OnBoardingSections {\r\n    appSettings = 'appSettings',\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    casinoRules = 'casinoRules',\r\n    configMenuButton = 'configMenuButton',\r\n    earningsIndicator = 'earningsIndicator',\r\n    missedPairs = 'missedPairs',\r\n    precisionIndicator = 'precisionIndicator',\r\n    progressIndicator = 'progressIndicator',\r\n    resetTraining = 'resetTraining',\r\n    tableActions = 'tableActions',\r\n    tableDealerHand = 'tableDealerHand',\r\n    tableFeedback = 'tableFeedback',\r\n    tablePlayerHands = 'tablePlayerHands'\r\n}\r\n\r\nexport type OnBoardingStep = {\r\n    activeSection?: OnBoardingSections[];\r\n    event?: OnBoardingStepEvent;\r\n    hideNextButton?: boolean;\r\n    hidePreviousButton?: boolean;\r\n    load?: (navigation: AppNavigation) => void;\r\n    text: string;\r\n};\r\n\r\nexport enum OnBoardingStepEvent {\r\n    startRound = 0,\r\n    playerAction = 1\r\n}\r\n","export enum Phases {\r\n    dealer = 'dealer',\r\n    finished = 'finished',\r\n    player = 'player'\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\nimport { Hand, HandCode } from './hand';\r\n\r\nexport interface TrainingPair {\r\n    dealer: Hand;\r\n    player: Hand;\r\n}\r\n\r\nexport interface TrainingPairRepresentation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    handCode: HandCode;\r\n}\r\n\r\nexport enum TrainingPairStatus {\r\n    untrained = 0,\r\n    passed = 1,\r\n    missed = 2\r\n}\r\n","import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { CasinoRulesKeys, GameConfig, Player, TrainingProgress } from './types';\r\n\r\nconst gameConfigKey = 'gameConfig';\r\nconst hasCompletedOnboardingKey = 'hasCompletedOnboarding';\r\nconst playerEarningsKey = 'playerEarnings';\r\nconst playerEarningsHistoricalKey = 'playerEarningsHistorical';\r\nconst trainingProgressKey = 'trainedHands';\r\n\r\nexport const getGameConfig = (currentGameConfig: GameConfig) =>\r\n    AsyncStorage.getItem(gameConfigKey)\r\n        .then<GameConfig>((value) => {\r\n            const storedGameConfig: Partial<GameConfig> | undefined = value && JSON.parse(value);\r\n            return {\r\n                casinoRules:\r\n                    storedGameConfig && storedGameConfig.casinoRules !== undefined\r\n                        ? {\r\n                              [CasinoRulesKeys.blackjackPeek]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.blackjackPeek\r\n                                        ],\r\n                              [CasinoRulesKeys.dealerHitsSoft17]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.dealerHitsSoft17\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.dealerHitsSoft17\r\n                                        ],\r\n                              [CasinoRulesKeys.doubling]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.doubling]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.doubling],\r\n                              [CasinoRulesKeys.doublingAfterSplit]:\r\n                                  storedGameConfig.casinoRules[\r\n                                      CasinoRulesKeys.doublingAfterSplit\r\n                                  ] !== undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ],\r\n                              [CasinoRulesKeys.hitSplitAces]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces],\r\n                              [CasinoRulesKeys.splitsNumber]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.splitsNumber],\r\n                              [CasinoRulesKeys.surrender]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                          }\r\n                        : currentGameConfig.casinoRules,\r\n                isDealerAnimationEnabled:\r\n                    storedGameConfig && storedGameConfig.isDealerAnimationEnabled !== undefined\r\n                        ? storedGameConfig.isDealerAnimationEnabled\r\n                        : currentGameConfig.isDealerAnimationEnabled,\r\n                isSoundEnabled:\r\n                    storedGameConfig && storedGameConfig.isSoundEnabled !== undefined\r\n                        ? storedGameConfig.isSoundEnabled\r\n                        : currentGameConfig.isSoundEnabled,\r\n                selectedHands:\r\n                    storedGameConfig && storedGameConfig.selectedHands !== undefined\r\n                        ? storedGameConfig.selectedHands\r\n                        : currentGameConfig.selectedHands,\r\n                selectedHandsOnly:\r\n                    storedGameConfig && storedGameConfig.selectedHandsOnly !== undefined\r\n                        ? storedGameConfig.selectedHandsOnly\r\n                        : currentGameConfig.selectedHandsOnly,\r\n                untrainedPairsPriority:\r\n                    storedGameConfig && storedGameConfig.untrainedPairsPriority !== undefined\r\n                        ? storedGameConfig.untrainedPairsPriority\r\n                        : currentGameConfig.untrainedPairsPriority\r\n            };\r\n        })\r\n        .catch(() => currentGameConfig);\r\n\r\nexport const getHasCompletedOnboarding = () =>\r\n    AsyncStorage.getItem(hasCompletedOnboardingKey)\r\n        .then<boolean>((value) => (value ? JSON.parse(value) : false))\r\n        .catch(() => false);\r\n\r\nexport const getPlayerEarnings = () =>\r\n    AsyncStorage.getItem(playerEarningsKey)\r\n        .then<Player['cash']>((value) => (value ? parseInt(value) : 0))\r\n        .catch(() => 0);\r\n\r\nexport const getPlayerEarningsHistorical = () =>\r\n    AsyncStorage.getItem(playerEarningsHistoricalKey)\r\n        .then<Player['earningsHistorical']>((value) => (value ? JSON.parse(value) : []))\r\n        .catch(() => []);\r\n\r\nexport const getTrainingProgress = () =>\r\n    AsyncStorage.getItem(trainingProgressKey)\r\n        .then<TrainingProgress>((value) => (value ? JSON.parse(value) : undefined))\r\n        .catch(() => undefined);\r\n\r\nexport const updateGameConfig = (gameConfig: GameConfig) => {\r\n    AsyncStorage.setItem(gameConfigKey, JSON.stringify(gameConfig)).catch(() => {});\r\n};\r\n\r\nexport const updateHasCompletedOnboarding = (hasCompletedOnboarding: boolean) => {\r\n    AsyncStorage.setItem(\r\n        hasCompletedOnboardingKey,\r\n        JSON.stringify(hasCompletedOnboarding)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarnings = (playerEarnings: Player['cash']) => {\r\n    AsyncStorage.setItem(playerEarningsKey, JSON.stringify(playerEarnings)).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarningsHistorical = (\r\n    playerEarningsHistorical: Player['earningsHistorical']\r\n) => {\r\n    AsyncStorage.setItem(\r\n        playerEarningsHistoricalKey,\r\n        JSON.stringify(playerEarningsHistorical)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updateTrainingProgress = (TrainingProgress: TrainingProgress) => {\r\n    AsyncStorage.setItem(trainingProgressKey, JSON.stringify(TrainingProgress)).catch(() => {});\r\n};\r\n","import { BaseDecisions, Dictionary, DynamicDecisions, PlayerDecisions } from './types';\r\n\r\nexport const doubleColor = '#a1a669';\r\nexport const hitColor = '#428bca';\r\nexport const splitColor = '#5cb85c';\r\nexport const standColor = '#46b8da';\r\nexport const surrenderColor = '#8f6088';\r\n\r\nexport const dangerColor = '#dc3545';\r\nexport const nonRandomColor = '#e5c100';\r\nexport const untrainedColor = '#333';\r\nexport const warningColor = '#ffc107';\r\n\r\nexport const tableColor = '#088446';\r\n\r\nexport const colors: Dictionary<string, BaseDecisions | DynamicDecisions | PlayerDecisions> = {\r\n    [BaseDecisions.hit]: hitColor,\r\n    [BaseDecisions.stand]: standColor,\r\n    [DynamicDecisions.double_hit]: doubleColor,\r\n    [DynamicDecisions.double_stand]: doubleColor,\r\n    [DynamicDecisions.split_hit]: splitColor,\r\n    [DynamicDecisions.split_stand]: splitColor,\r\n    [DynamicDecisions.split_surrender_hit]: splitColor,\r\n    [DynamicDecisions.surrender_hit]: surrenderColor,\r\n    [DynamicDecisions.surrender_split_hit]: surrenderColor,\r\n    [DynamicDecisions.surrender_stand]: surrenderColor,\r\n    [PlayerDecisions.double]: doubleColor,\r\n    [PlayerDecisions.split]: splitColor,\r\n    [PlayerDecisions.surrender]: surrenderColor\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { Dictionary } from './types';\r\n\r\nexport const cartesianProduct = <T, U, R>(\r\n    firstArray: T[],\r\n    secondArray: U[],\r\n    elementBuilder: (t: T, u: U) => R\r\n): R[] => {\r\n    return firstArray.reduce<R[]>((product, x) => {\r\n        return product.concat(secondArray.map((y) => elementBuilder(x, y)));\r\n    }, []);\r\n};\r\n\r\nexport const getAbsoluteMax = (numbers: number[]) =>\r\n    Math.ceil(\r\n        numbers.reduce((reduced, next) => Math.max(reduced, Math.abs(next)), Number.MIN_VALUE)\r\n    );\r\n\r\nexport const getObjectKeys = <T extends string | number | symbol>(object: { [key in T]: any }) =>\r\n    Object.keys(object) as T[];\r\n\r\nexport const getPrimeFactors = (number: number) => {\r\n    const factors: number[] = [];\r\n    let divisor = 2;\r\n\r\n    while (number >= 2) {\r\n        if (number % divisor == 0) {\r\n            factors.push(divisor);\r\n            number = number / divisor;\r\n        } else {\r\n            divisor++;\r\n        }\r\n    }\r\n    return factors.reverse();\r\n};\r\n\r\nexport const getRandomItem = <T>(items: T[]) =>\r\n    items[Math.round(Math.random() * (items.length - 1))];\r\n\r\nexport const playSound = (sound: Audio.Sound) =>\r\n    sound\r\n        .stopAsync() // In case is already playing and it hasn't finished yet\r\n        .catch(/* Failing to stop audio is not a critical issue */)\r\n        .then(() => sound.playAsync())\r\n        .catch(/* Failing to play audio is not a critical issue */);\r\n\r\nexport const removeDuplicates = (numbers: number[]): number[] => {\r\n    const numbersDictionary = numbers.reduce<Dictionary<number>>(\r\n        (dictionary, next) => ({ ...dictionary, [next]: next }),\r\n        {}\r\n    );\r\n    return Object.keys(numbersDictionary).map((x) => numbersDictionary[x]);\r\n};\r\n\r\nexport const shuffleArray = <T>(array: T[]) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n};\r\n","import { SimpleCardSymbol, TrainingHandStatus, TrainingPairStatus } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nexport const allDealerSymbols: SimpleCardSymbol[] = [\r\n    SimpleCardSymbol.Two,\r\n    SimpleCardSymbol.Three,\r\n    SimpleCardSymbol.Four,\r\n    SimpleCardSymbol.Five,\r\n    SimpleCardSymbol.Six,\r\n    SimpleCardSymbol.Seven,\r\n    SimpleCardSymbol.Eight,\r\n    SimpleCardSymbol.Nine,\r\n    SimpleCardSymbol.Ten,\r\n    SimpleCardSymbol.Ace\r\n];\r\n\r\nexport const getUntrainedDealerSymbols = (trainingHandStatus: TrainingHandStatus) =>\r\n    getObjectKeys(trainingHandStatus).filter(\r\n        (dealerSymbol) => trainingHandStatus[dealerSymbol] !== TrainingPairStatus.passed\r\n    );\r\n","import { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../types';\r\n\r\nexport const getDefaultCasinoRules = (): CasinoRules => ({\r\n    [CasinoRulesKeys.blackjackPeek]: false,\r\n    [CasinoRulesKeys.dealerHitsSoft17]: false,\r\n    [CasinoRulesKeys.doubling]: Doubling.nineToElevenSoft,\r\n    [CasinoRulesKeys.doublingAfterSplit]: true,\r\n    [CasinoRulesKeys.hitSplitAces]: false,\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber.three,\r\n    [CasinoRulesKeys.surrender]: false\r\n});\r\n","import {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    HandDecisionSet,\r\n    HandDecisionSetGetters,\r\n    SimpleCardSymbol,\r\n    SplitsNumber\r\n} from '../types';\r\n\r\nconst alwaysHit: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n};\r\n\r\nconst alwaysStand: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n};\r\n\r\nexport const getHandRangesNumber = (decisionSet: HandDecisionSet) =>\r\n    Object.values(decisionSet).reduce<{\r\n        previousValue: string;\r\n        ranges: number;\r\n    }>(\r\n        (reduced, next) => {\r\n            return reduced.previousValue === next\r\n                ? reduced\r\n                : { previousValue: next, ranges: reduced.ranges + 1 };\r\n        },\r\n        {\r\n            previousValue: '',\r\n            ranges: 0\r\n        }\r\n    ).ranges;\r\n\r\nexport const handDecisionSetGetters: HandDecisionSetGetters = {\r\n    [HandCode.Split2s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            !casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split3s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split4s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split5s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split6s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split7s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split8s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                        ? DynamicDecisions.surrender_split_hit\r\n                        : DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split9s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Split10s]: () => alwaysStand,\r\n    [HandCode.SplitAs]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft18]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft19]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Soft20]: () => alwaysStand,\r\n    [HandCode.Hard5]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard6]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard7]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard8]: () => alwaysHit,\r\n    [HandCode.Hard9]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard10]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard11]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard12]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\r\n                ? DynamicDecisions.surrender_stand\r\n                : BaseDecisions.stand\r\n    }),\r\n    [HandCode.Hard18]: () => alwaysStand,\r\n    [HandCode.Hard19]: () => alwaysStand,\r\n    [HandCode.Hard20]: () => alwaysStand\r\n};\r\n","import {\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    HandCode,\r\n    SelectedHands,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\nimport { getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { handDecisionSetGetters } from './hand-decision-set';\r\n\r\nexport const getDefaultTrainingHands = () => getTrainingHands(getDefaultCasinoRules());\r\n\r\nexport const getSelectedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    selectedHands?: SelectedHands\r\n) =>\r\n    selectedHands\r\n        ? Object.values(trainingHands).filter((hand) => selectedHands[hand.code])\r\n        : Object.values(trainingHands);\r\n\r\nexport const getTrainingHands = (casinoRules: CasinoRules): TrainingHands => ({\r\n    [HandCode.Split2s]: {\r\n        code: HandCode.Split2s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split2s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.doublingAfterSplit,\r\n            CasinoRulesKeys.surrender,\r\n\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: '2,2'\r\n    },\r\n    [HandCode.Split3s]: {\r\n        code: HandCode.Split3s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split3s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.doublingAfterSplit,\r\n            CasinoRulesKeys.surrender,\r\n\r\n            CasinoRulesKeys.blackjackPeek\r\n        ],\r\n        name: '3,3'\r\n    },\r\n    [HandCode.Split4s]: {\r\n        code: HandCode.Split4s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split4s](casinoRules),\r\n        dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n        name: '4,4'\r\n    },\r\n    [HandCode.Split5s]: {\r\n        code: HandCode.Split5s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split5s](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: '5,5'\r\n    },\r\n    [HandCode.Split6s]: {\r\n        code: HandCode.Split6s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split6s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.doublingAfterSplit,\r\n            CasinoRulesKeys.surrender,\r\n\r\n            CasinoRulesKeys.blackjackPeek\r\n        ],\r\n        name: '6,6'\r\n    },\r\n    [HandCode.Split7s]: {\r\n        code: HandCode.Split7s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split7s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.surrender,\r\n\r\n            CasinoRulesKeys.blackjackPeek\r\n        ],\r\n        name: '7,7'\r\n    },\r\n    [HandCode.Split8s]: {\r\n        code: HandCode.Split8s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split8s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: '8,8'\r\n    },\r\n    [HandCode.Split9s]: {\r\n        code: HandCode.Split9s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split9s](casinoRules),\r\n        dependencies: [CasinoRulesKeys.splitsNumber],\r\n        name: '9,9'\r\n    },\r\n    [HandCode.Split10s]: {\r\n        code: HandCode.Split10s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split10s](casinoRules),\r\n        dependencies: [],\r\n        name: '10,10'\r\n    },\r\n    [HandCode.SplitAs]: {\r\n        code: HandCode.SplitAs,\r\n        decisionSet: handDecisionSetGetters[HandCode.SplitAs](casinoRules),\r\n        dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.blackjackPeek],\r\n        name: 'A,A'\r\n    },\r\n    [HandCode.Soft13]: {\r\n        code: HandCode.Soft13,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft13](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 13'\r\n    },\r\n    [HandCode.Soft14]: {\r\n        code: HandCode.Soft14,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft14](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 14'\r\n    },\r\n    [HandCode.Soft15]: {\r\n        code: HandCode.Soft15,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft15](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 15'\r\n    },\r\n    [HandCode.Soft16]: {\r\n        code: HandCode.Soft16,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft16](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 16'\r\n    },\r\n    [HandCode.Soft17]: {\r\n        code: HandCode.Soft17,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft17](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 17'\r\n    },\r\n    [HandCode.Soft18]: {\r\n        code: HandCode.Soft18,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft18](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\r\n        name: 'Soft 18'\r\n    },\r\n    [HandCode.Soft19]: {\r\n        code: HandCode.Soft19,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft19](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\r\n        name: 'Soft 19'\r\n    },\r\n    [HandCode.Soft20]: {\r\n        code: HandCode.Soft20,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft20](casinoRules),\r\n        dependencies: [],\r\n        name: 'Soft 20'\r\n    },\r\n    /* Soft 21 => Either Blackjack or maximum score! This hand doesn't need training */\r\n    /* Hard 4 => Only possible with 2,2. Covered in Split hands */\r\n    [HandCode.Hard5]: {\r\n        code: HandCode.Hard5,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard5](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 5'\r\n    },\r\n    [HandCode.Hard6]: {\r\n        code: HandCode.Hard6,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard6](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 6'\r\n    },\r\n    [HandCode.Hard7]: {\r\n        code: HandCode.Hard7,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard7](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 7'\r\n    },\r\n    [HandCode.Hard8]: {\r\n        code: HandCode.Hard8,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard8](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 8'\r\n    },\r\n    [HandCode.Hard9]: {\r\n        code: HandCode.Hard9,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard9](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Hard 9'\r\n    },\r\n    [HandCode.Hard10]: {\r\n        code: HandCode.Hard10,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard10](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Hard 10'\r\n    },\r\n    [HandCode.Hard11]: {\r\n        code: HandCode.Hard11,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard11](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.doubling,\r\n\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: 'Hard 11'\r\n    },\r\n    [HandCode.Hard12]: {\r\n        code: HandCode.Hard12,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard12](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 12'\r\n    },\r\n    [HandCode.Hard13]: {\r\n        code: HandCode.Hard13,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard13](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 13'\r\n    },\r\n    [HandCode.Hard14]: {\r\n        code: HandCode.Hard14,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard14](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 14'\r\n    },\r\n    [HandCode.Hard15]: {\r\n        code: HandCode.Hard15,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard15](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.surrender,\r\n\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: 'Hard 15'\r\n    },\r\n    [HandCode.Hard16]: {\r\n        code: HandCode.Hard16,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard16](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender],\r\n        name: 'Hard 16'\r\n    },\r\n    [HandCode.Hard17]: {\r\n        code: HandCode.Hard17,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard17](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.surrender,\r\n\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: 'Hard 17'\r\n    },\r\n    [HandCode.Hard18]: {\r\n        code: HandCode.Hard18,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard18](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 18'\r\n    },\r\n    [HandCode.Hard19]: {\r\n        code: HandCode.Hard19,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard19](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 19'\r\n    },\r\n    [HandCode.Hard20]: {\r\n        code: HandCode.Hard20,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard20](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 20'\r\n    }\r\n    /* Hard 21 => Maximum score! This hand doesn't need training */\r\n});\r\n\r\nexport const getUntrainedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    selectedHands?: SelectedHands\r\n) =>\r\n    getSelectedTrainingHands(trainingHands, selectedHands).filter(\r\n        (trainingHand) => getUntrainedDealerSymbols(trainingProgress[trainingHand.code]).length > 0\r\n    );\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CardValues,\r\n    SimpleCardSymbol,\r\n    SpecialCardSymbol,\r\n    TenPointsCardSymbol\r\n} from '../types';\r\nimport { cartesianProduct, getObjectKeys, getRandomItem, removeDuplicates } from '../utils';\r\n\r\nconst cardsValue: CardValues = {\r\n    [SimpleCardSymbol.Ace]: [1, 11],\r\n    [SimpleCardSymbol.Two]: [2],\r\n    [SimpleCardSymbol.Three]: [3],\r\n    [SimpleCardSymbol.Four]: [4],\r\n    [SimpleCardSymbol.Five]: [5],\r\n    [SimpleCardSymbol.Six]: [6],\r\n    [SimpleCardSymbol.Seven]: [7],\r\n    [SimpleCardSymbol.Eight]: [8],\r\n    [SimpleCardSymbol.Nine]: [9],\r\n    [SimpleCardSymbol.Ten]: [10],\r\n    [SpecialCardSymbol.Jack]: [10],\r\n    [SpecialCardSymbol.Queen]: [10],\r\n    [SpecialCardSymbol.King]: [10]\r\n};\r\n\r\nexport const createCard = (symbol: CardSymbol, suit?: CardSuit, isHoleCard?: boolean): Card => ({\r\n    isHoleCard,\r\n    isRandom: suit !== undefined,\r\n    suit: suit || getRandomSuit(),\r\n    symbol\r\n});\r\n\r\nconst suits = [CardSuit.clubs, CardSuit.diamonds, CardSuit.hearts, CardSuit.spades];\r\n\r\nconst symbols = getObjectKeys(cardsValue);\r\n\r\nconst deck = cartesianProduct(symbols, suits, createCard);\r\n\r\nexport const getCardEffectiveValue = (card: Card): number => {\r\n    const values = getCardValues(card);\r\n    return values[values.length - 1];\r\n};\r\n\r\nexport const getCardsValues = (cards: Card[], options?: { peeking?: boolean }) => {\r\n    const cardsValues = cards\r\n        .filter((card) => options?.peeking || !card.isHoleCard)\r\n        .map((card) => getCardValues(card));\r\n    const cardsAggregatedValues = cardsValues.reduce(\r\n        (reducedValues, currentValues) =>\r\n            cartesianProduct(reducedValues, currentValues, (x, y) => x + y),\r\n        [0]\r\n    );\r\n    return removeDuplicates(cardsAggregatedValues);\r\n};\r\n\r\nconst getCardValues = (card: Card): number[] => cardsValue[card.symbol];\r\n\r\nexport const getRandomCard = (options?: { isHoleCard?: boolean }) => {\r\n    let randomCard = getRandomItem(deck);\r\n    if (options?.isHoleCard) {\r\n        randomCard = { ...randomCard, isHoleCard: true };\r\n    }\r\n    return randomCard;\r\n};\r\n\r\nexport const getRandomSuit = () => getRandomItem(suits);\r\n\r\nexport const revealHoleCard = (card: Card) => {\r\n    card.isHoleCard = false;\r\n};\r\n\r\nexport const simpleSymbolToSymbol = (simpleSymbol: SimpleCardSymbol): CardSymbol =>\r\n    simpleSymbol === SimpleCardSymbol.Ten ? getRandomItem(tenPointsSymbols) : simpleSymbol;\r\n\r\nexport const symbolToSimpleSymbol = (symbol: CardSymbol): SimpleCardSymbol =>\r\n    tenPointsSymbols.indexOf(symbol as SpecialCardSymbol) > -1\r\n        ? SimpleCardSymbol.Ten\r\n        : (symbol as SimpleCardSymbol);\r\n\r\nconst tenPointsSymbols: TenPointsCardSymbol[] = [\r\n    SimpleCardSymbol.Ten,\r\n    SpecialCardSymbol.Jack,\r\n    SpecialCardSymbol.Queen,\r\n    SpecialCardSymbol.King\r\n];\r\n\r\nexport const valueToSymbol = (number: number): CardSymbol =>\r\n    number === 10\r\n        ? getRandomItem(tenPointsSymbols)\r\n        : number === 1\r\n        ? SimpleCardSymbol.Ace\r\n        : (String(number) as CardSymbol);\r\n","import { CardSymbol, HandCode, SimpleCardSymbol } from '../types';\r\nimport { valueToSymbol, simpleSymbolToSymbol } from './card';\r\n\r\nexport const getHardHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const value = parseInt(handCode, 10);\r\n\r\n    const minValue = Math.max(2, value - 10);\r\n    const maxValue = Math.min(value - minValue, 10);\r\n\r\n    let firstValue = Math.floor(Math.random() * (maxValue - minValue) + minValue);\r\n    let secondValue = value - firstValue;\r\n\r\n    // If numbers are equal, we would be training a splittable hand. Change them when possible\r\n    // E.g. Transform a 7,7 (for 14) into a 6,8. Do not transform a 10,10 for 20\r\n    if (firstValue === secondValue && firstValue > minValue && firstValue < maxValue) {\r\n        firstValue++;\r\n        secondValue--;\r\n    }\r\n\r\n    return [valueToSymbol(firstValue), valueToSymbol(secondValue)];\r\n};\r\n\r\nexport const getSoftHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const handValues = handCode.split('/').map((s) => parseInt(s, 10));\r\n    const complementarySymbol = valueToSymbol(handValues[0] - 1);\r\n\r\n    // Make Ace the second card sometimes by randomly reversing the symbols\r\n    return Math.floor(Math.random() * 100) % 2\r\n        ? [complementarySymbol, SimpleCardSymbol.Ace]\r\n        : [SimpleCardSymbol.Ace, complementarySymbol];\r\n};\r\n\r\nexport const getSplitHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const splitSymbols = handCode.split(',') as SimpleCardSymbol[];\r\n    return splitSymbols.map(simpleSymbolToSymbol);\r\n};\r\n\r\nexport const isSoftHandCode = (handCode: HandCode) => handCode.includes('/');\r\n\r\nexport const isSplitHandCode = (handCode: HandCode) => handCode.includes(',');\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    Hand,\r\n    HandCode,\r\n    HandOutcome,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomItem } from '../utils';\r\nimport {\r\n    createCard,\r\n    getCardEffectiveValue,\r\n    getCardsValues,\r\n    getRandomCard,\r\n    revealHoleCard,\r\n    symbolToSimpleSymbol,\r\n    valueToSymbol\r\n} from './card';\r\nimport {\r\n    getHardHandSymbols,\r\n    getSoftHandSymbols,\r\n    getSplitHandSymbols,\r\n    isSoftHandCode,\r\n    isSplitHandCode\r\n} from './hand-code';\r\n\r\nexport const areHandsSplitAces = (hands: Hand[]) =>\r\n    hands.length > 1 &&\r\n    hands[0].cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hands[1].cards[0].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const canBeDealerBlackjack = (hand: Hand) => {\r\n    const visibleCard = hand.cards[0];\r\n    const cardSymbol = symbolToSimpleSymbol(visibleCard.symbol);\r\n    return cardSymbol === SimpleCardSymbol.Ace || cardSymbol === SimpleCardSymbol.Ten;\r\n};\r\n\r\nconst canBustOnNextCard = (hand: Hand) => {\r\n    return hand.values[0] > 11;\r\n};\r\n\r\nexport const canDouble = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(hand);\r\n    const isHandWithTwoCards = hand.cards.length === 2;\r\n    const isSingleHand = hands.length === 1;\r\n\r\n    const contains9To11 = hand.values.some((handValue) => [9, 10, 11].indexOf(handValue) > -1);\r\n    const is10To11 = handEffectiveValue === 10 || handEffectiveValue === 11;\r\n    const is9To11 = handEffectiveValue === 9 || is10To11;\r\n\r\n    return (\r\n        isHandWithTwoCards &&\r\n        (casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft && contains9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven && is9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven && is10To11)) &&\r\n        (isSingleHand || casinoRules[CasinoRulesKeys.doublingAfterSplit]) &&\r\n        (!areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces])\r\n    );\r\n};\r\n\r\nexport const canHit = (hands: Hand[], casinoRules: CasinoRules) =>\r\n    !areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces];\r\n\r\nexport const canSplit = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    hand.cards.length === 2 &&\r\n    getCardEffectiveValue(hand.cards[0]) === getCardEffectiveValue(hand.cards[1]) &&\r\n    casinoRules[CasinoRulesKeys.splitsNumber] >= handsNumber;\r\n\r\nexport const canSurrender = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    handsNumber === 1 && hand.cards.length === 2 && casinoRules[CasinoRulesKeys.surrender];\r\n\r\nexport const createDealerHand = (\r\n    casinoRules: CasinoRules,\r\n    dealerSymbol?: CardSymbol,\r\n    dealerSuit?: CardSuit\r\n) => {\r\n    const dealerCards: Card[] = [\r\n        dealerSymbol ? createCard(dealerSymbol, dealerSuit) : getRandomCard()\r\n    ];\r\n\r\n    if (casinoRules[CasinoRulesKeys.blackjackPeek]) {\r\n        dealerCards.push(getRandomCard({ isHoleCard: true }));\r\n    }\r\n\r\n    return createHand(dealerCards);\r\n};\r\n\r\nexport const createHand = (cards: Card[], bet = 1): Hand => ({\r\n    bet,\r\n    cards: cards,\r\n    values: getCardsValues(cards)\r\n});\r\n\r\nexport const dealCard = (hand: Hand, card: Card) => {\r\n    hand.cards.push(card);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n\r\n// - If the player hand has no risk (0% probabilities of busting) and some untrained pair can\r\n//   be reached by adding a specific card to the player hand, it returns that card. Returns a\r\n//   a random card otherwise\r\n// - Called after player hitting, splitting or starting a split hand.\r\nexport const getCardForUntrainedHand = (\r\n    playerHand: Hand,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n): Card => {\r\n    let nextCard = getRandomCard();\r\n\r\n    if (!canBustOnNextCard(playerHand)) {\r\n        const isPlayerHandSoft = playerHand.values.length > 1;\r\n        const playerHandValues = getCardsValues(playerHand.cards);\r\n\r\n        const valuesToUntrainedHands = Object.values(trainingHands)\r\n            .map((trainingHand) => {\r\n                const isHandUntrainedForDealerSymbol =\r\n                    trainingProgress[trainingHand.code][dealerSymbol] ===\r\n                    TrainingPairStatus.untrained;\r\n\r\n                let valueToReachThisHand: number;\r\n\r\n                if (isSplitHandCode(trainingHand.code)) {\r\n                    // Untrained split hands can never be reached after user action\r\n                    valueToReachThisHand = -1;\r\n                } else if (isSoftHandCode(trainingHand.code)) {\r\n                    const currentHandMinValue = parseInt(trainingHand.code.split('/')[0], 10);\r\n                    const softDifference = currentHandMinValue - playerHandValues[0];\r\n\r\n                    if (isPlayerHandSoft) {\r\n                        // E.g. Player hand = 3/13. Can reach 4/14+ but not 3/13- (equal or lower)\r\n                        valueToReachThisHand = softDifference > 0 ? softDifference : -1;\r\n                    } else {\r\n                        // E.g. Player hand = 8. Can only 9/19 (soft hand)\r\n                        valueToReachThisHand = softDifference === 1 ? softDifference : -1;\r\n                    }\r\n                } else {\r\n                    const currentHandHardValue = parseInt(trainingHand.code, 10);\r\n                    const hardDifference = currentHandHardValue - playerHandValues[0];\r\n\r\n                    if (isPlayerHandSoft) {\r\n                        // E.g. Player hand = 5/15. Can reach 12-15 but not 11- (soft hand) neither\r\n                        // 16+ (soft hand)\r\n                        const makesSoftHand = playerHandValues[1] + hardDifference <= 21;\r\n                        valueToReachThisHand =\r\n                            !makesSoftHand && hardDifference > 1 && hardDifference <= 10\r\n                                ? hardDifference\r\n                                : -1;\r\n                    } else {\r\n                        // E.g. Player hand = 7. Can reach 9-17 but not 7- (equal or lower),\r\n                        // 8 (soft hand), 14 (split hand) neither 18+ (out of scope)\r\n                        valueToReachThisHand =\r\n                            hardDifference > 1 && // Lower & Soft hand\r\n                            hardDifference <= 10 && // Out of scope\r\n                            hardDifference !== playerHandValues[0] // Split hand\r\n                                ? hardDifference\r\n                                : -1;\r\n                    }\r\n                }\r\n\r\n                return isHandUntrainedForDealerSymbol && valueToReachThisHand > -1\r\n                    ? valueToReachThisHand\r\n                    : -1;\r\n            })\r\n            .filter((value) => value > -1);\r\n\r\n        if (valuesToUntrainedHands.length > 0) {\r\n            nextCard = createCard(valueToSymbol(getRandomItem(valuesToUntrainedHands)));\r\n        }\r\n    }\r\n\r\n    return nextCard;\r\n};\r\n\r\nexport const getHandEffectiveValue = (hand: Hand) => {\r\n    let effectiveValue = hand.values[0];\r\n    if (hand.values.some((v) => v < 22)) {\r\n        effectiveValue = [...hand.values].reverse().find((v) => v < 22)!;\r\n    }\r\n    return effectiveValue;\r\n};\r\n\r\nexport const getHandValidValues = (hand: Hand): number[] => {\r\n    return hand.values.some((v) => v < 22) ? hand.values.filter((v) => v < 22) : [hand.values[0]];\r\n};\r\n\r\nexport const handCodeToHand = (handCode: HandCode): Hand => {\r\n    const handSymbols = isSplitHandCode(handCode)\r\n        ? getSplitHandSymbols(handCode)\r\n        : isSoftHandCode(handCode)\r\n        ? getSoftHandSymbols(handCode)\r\n        : getHardHandSymbols(handCode);\r\n\r\n    return createHand(handSymbols.map((symbol) => createCard(symbol)));\r\n};\r\n\r\nexport const handToHandCode = (hand: Hand): HandCode => {\r\n    const handSymbols = hand.cards.map((c) => symbolToSimpleSymbol(c.symbol));\r\n    const isSplitHand = handSymbols.length === 2 && handSymbols[0] === handSymbols[1];\r\n\r\n    return isSplitHand\r\n        ? (handSymbols.join(',') as HandCode)\r\n        : (getHandValidValues(hand).join('/') as HandCode);\r\n};\r\n\r\nexport const hasHoleCard = (hand: Hand) => hand.cards.length > 1 && hand.cards[1].isHoleCard;\r\n\r\nconst isAcesPair = (hand: Hand) =>\r\n    hand.cards.length === 2 &&\r\n    hand.cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hand.cards[1].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const isBlackjack = (hand: Hand, handsNumber: number) => {\r\n    return (\r\n        handsNumber === 1 &&\r\n        hand.cards.length === 2 &&\r\n        hand.values.length === 2 &&\r\n        hand.values[0] === 11 &&\r\n        hand.values[1] === 21\r\n    );\r\n};\r\n\r\nconst isBust = (hand: Hand) => {\r\n    return getHandEffectiveValue(hand) > 21;\r\n};\r\n\r\nexport const isDealerBlackjack = (hand: Hand) => {\r\n    const cardValues = getCardsValues(hand.cards, { peeking: true });\r\n    return (\r\n        hand.cards.length === 2 &&\r\n        cardValues.length === 2 &&\r\n        cardValues[0] === 11 &&\r\n        cardValues[1] === 21\r\n    );\r\n};\r\n\r\nexport const isFinished = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const isAcesPairHand = isAcesPair(hand);\r\n    return (\r\n        getHandEffectiveValue(hand) >= 21 ||\r\n        (areHandsSplitAces(hands) &&\r\n            ((isAcesPairHand && !canSplit(hand, hands.length, casinoRules)) ||\r\n                (!isAcesPairHand && !casinoRules[CasinoRulesKeys.hitSplitAces])))\r\n    );\r\n};\r\n\r\nexport const resolveHand = (\r\n    playerHand: Hand,\r\n    handsNumber: number,\r\n    dealerHand: Hand\r\n): HandOutcome => {\r\n    const playerHandValue = getHandEffectiveValue(playerHand);\r\n    const dealerHandValue = getHandEffectiveValue(dealerHand!);\r\n    const handOutcome = isBust(playerHand)\r\n        ? HandOutcome.bust\r\n        : isBlackjack(playerHand, handsNumber) && isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.push\r\n        : isBlackjack(playerHand, handsNumber)\r\n        ? HandOutcome.blackjack\r\n        : isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.dealerWins\r\n        : isBust(dealerHand!)\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue > dealerHandValue\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue === dealerHandValue\r\n        ? HandOutcome.push\r\n        : HandOutcome.dealerWins;\r\n\r\n    playerHand.outcome = handOutcome;\r\n    return handOutcome;\r\n};\r\n\r\nexport const revealDealerHoleCard = (hand: Hand) => {\r\n    revealHoleCard(hand.cards[1]);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n","import {\r\n    CasinoRules,\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPair,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys, getRandomItem } from '../utils';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { createDealerHand, handCodeToHand } from './hand';\r\nimport { getSelectedTrainingHands, getUntrainedTrainingHands } from './training-hand';\r\n\r\nexport const allTrainingPairsNumber = allDealerSymbols.length * Object.keys(HandCode).length;\r\n\r\nexport const getSpecificTrainingPair = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    casinoRules: CasinoRules\r\n): TrainingPair => {\r\n    return {\r\n        dealer: createDealerHand(casinoRules, dealerSymbol),\r\n        player: handCodeToHand(handCode)\r\n    };\r\n};\r\n\r\nexport const getUntrainedTrainingPair = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    gameConfig: GameConfig\r\n): TrainingPair => {\r\n    const untrainedTrainingHands = getUntrainedTrainingHands(\r\n        trainingHands,\r\n        trainingProgress,\r\n        gameConfig.selectedHandsOnly ? gameConfig.selectedHands : undefined\r\n    );\r\n\r\n    const randomTrainingHand =\r\n        untrainedTrainingHands.length > 0\r\n            ? getRandomItem(untrainedTrainingHands)\r\n            : getRandomItem(\r\n                  getSelectedTrainingHands(\r\n                      trainingHands,\r\n                      gameConfig.selectedHandsOnly ? gameConfig.selectedHands : undefined\r\n                  )\r\n              ); // In case all hands have been passed\r\n\r\n    const trainingHandStatus = trainingProgress[randomTrainingHand.code];\r\n    const untrainedDealerSymbols = getUntrainedDealerSymbols(trainingHandStatus);\r\n\r\n    const randomDealerSymbol =\r\n        untrainedDealerSymbols.length > 0\r\n            ? getRandomItem(untrainedDealerSymbols)\r\n            : getRandomItem(getObjectKeys(trainingHandStatus)); // In case all hands have been passed\r\n\r\n    return {\r\n        dealer: createDealerHand(gameConfig.casinoRules, randomDealerSymbol),\r\n        player: handCodeToHand(randomTrainingHand.code)\r\n    };\r\n};\r\n","import {\r\n    GameConfig,\r\n    HandCode,\r\n    SelectedHands,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingHandStatus,\r\n    TrainingPairRepresentation,\r\n    TrainingPairStatus,\r\n    TrainingProgress,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\nimport { allDealerSymbols } from './dealer-symbols';\r\nimport { getUntrainedTrainingHands } from './training-hand';\r\nimport { allTrainingPairsNumber } from './training-pair';\r\n\r\nexport const getDefaultTrainingStatus = (): TrainingStatus => ({\r\n    attemptedTrainingPairs: 0,\r\n    isCompleted: false,\r\n    isProgressBlocked: false,\r\n    missedTrainingPairs: [],\r\n    passedTrainingPairs: 0,\r\n    trainingProgress: Object.values(HandCode).reduce<TrainingProgress>(\r\n        (reducedTrainingProgress, handCode) => ({\r\n            ...reducedTrainingProgress,\r\n            [handCode]: allDealerSymbols.reduce<TrainingHandStatus>(\r\n                (reducedDealerSymbols, dealerSymbol) => ({\r\n                    ...reducedDealerSymbols,\r\n                    [dealerSymbol]: TrainingPairStatus.untrained\r\n                }),\r\n                {} as TrainingHandStatus\r\n            )\r\n        }),\r\n        {} as TrainingProgress\r\n    )\r\n});\r\n\r\nexport const getIsProgressBlocked = (\r\n    trainingStatus: TrainingStatus,\r\n    trainingHands: TrainingHands,\r\n    selectedHandsOnly: boolean,\r\n    selectedHands: SelectedHands\r\n) =>\r\n    selectedHandsOnly &&\r\n    getProgressPercentage(trainingStatus.attemptedTrainingPairs) < 100 &&\r\n    getUntrainedTrainingHands(trainingHands, trainingStatus.trainingProgress, selectedHands)\r\n        .length === 0;\r\n\r\nconst getNextMissedTrainingPairs = (\r\n    missedTrainingPairs: TrainingPairRepresentation[],\r\n    isHit: boolean,\r\n    handCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingPairRepresentation[] => {\r\n    return isHit\r\n        ? missedTrainingPairs.filter(\r\n              (missedTrainingPair) =>\r\n                  missedTrainingPair.dealerSymbol !== currentDealerSymbol ||\r\n                  missedTrainingPair.handCode !== handCode\r\n          )\r\n        : missedTrainingPairs.some(\r\n              (missedTrainingPair) =>\r\n                  missedTrainingPair.dealerSymbol === currentDealerSymbol &&\r\n                  missedTrainingPair.handCode === handCode\r\n          )\r\n        ? missedTrainingPairs\r\n        : [{ dealerSymbol: currentDealerSymbol, handCode }].concat(missedTrainingPairs);\r\n};\r\n\r\nexport const getNextTrainingStatus = (\r\n    trainingStatus: TrainingStatus,\r\n    trainingHands: TrainingHands,\r\n    gameConfig: GameConfig,\r\n    isHit: boolean,\r\n    currentHandCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingStatus => {\r\n    // The current trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol]\r\n    // value must be kept to update attemptedTrainingPairs and passedTrainingPairs\r\n    const currentHandTrainingStatus =\r\n        trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol];\r\n\r\n    trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol] = isHit\r\n        ? TrainingPairStatus.passed\r\n        : TrainingPairStatus.missed;\r\n\r\n    const nextAttemptedTrainingPairs =\r\n        trainingStatus.attemptedTrainingPairs +\r\n        (currentHandTrainingStatus === TrainingPairStatus.untrained ? 1 : 0);\r\n\r\n    const nextMissedTrainingPairs = getNextMissedTrainingPairs(\r\n        trainingStatus.missedTrainingPairs,\r\n        isHit,\r\n        currentHandCode,\r\n        currentDealerSymbol\r\n    );\r\n\r\n    const nextPassedTrainingHands =\r\n        trainingStatus.passedTrainingPairs +\r\n        (isHit && currentHandTrainingStatus !== TrainingPairStatus.passed\r\n            ? 1\r\n            : !isHit && currentHandTrainingStatus === TrainingPairStatus.passed\r\n            ? -1\r\n            : 0);\r\n\r\n    const nextTrainingStatus = {\r\n        attemptedTrainingPairs: nextAttemptedTrainingPairs,\r\n        isCompleted: isTrainingCompleted(nextPassedTrainingHands),\r\n        isProgressBlocked: false,\r\n        missedTrainingPairs: nextMissedTrainingPairs,\r\n        passedTrainingPairs: nextPassedTrainingHands,\r\n        trainingProgress: trainingStatus.trainingProgress\r\n    };\r\n\r\n    nextTrainingStatus.isProgressBlocked = getIsProgressBlocked(\r\n        nextTrainingStatus,\r\n        trainingHands,\r\n        gameConfig.selectedHandsOnly,\r\n        gameConfig.selectedHands\r\n    );\r\n\r\n    return nextTrainingStatus;\r\n};\r\n\r\nexport const getProgressPercentage = (attemptedTrainingPairs: number) =>\r\n    Math.floor((attemptedTrainingPairs * 1000) / allTrainingPairsNumber) / 10;\r\n\r\nexport const isTrainingCompleted = (passedTrainingPairs: number) =>\r\n    passedTrainingPairs === allTrainingPairsNumber;\r\n\r\nconst reduceTrainingHandProgress = (\r\n    handCode: HandCode,\r\n    trainingHandStatus: TrainingHandStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus =>\r\n    getObjectKeys(trainingHandStatus).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, dealerSymbol) =>\r\n            reduceTrainingPairProgress(\r\n                handCode,\r\n                dealerSymbol,\r\n                trainingHandStatus[dealerSymbol],\r\n                reducedTrainingStatus\r\n            ),\r\n        reducedTrainingStatus\r\n    );\r\n\r\nconst reduceTrainingPairProgress = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingPairStatus: TrainingPairStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus => {\r\n    return {\r\n        attemptedTrainingPairs:\r\n            reducedTrainingStatus.attemptedTrainingPairs +\r\n            (trainingPairStatus !== TrainingPairStatus.untrained ? 1 : 0),\r\n        isCompleted: false,\r\n        isProgressBlocked: false,\r\n        missedTrainingPairs:\r\n            trainingPairStatus === TrainingPairStatus.missed\r\n                ? reducedTrainingStatus.missedTrainingPairs.concat([\r\n                      {\r\n                          dealerSymbol,\r\n                          handCode\r\n                      }\r\n                  ])\r\n                : reducedTrainingStatus.missedTrainingPairs,\r\n        passedTrainingPairs:\r\n            reducedTrainingStatus.passedTrainingPairs +\r\n            (trainingPairStatus === TrainingPairStatus.passed ? 1 : 0),\r\n        trainingProgress: reducedTrainingStatus.trainingProgress\r\n    };\r\n};\r\n\r\nexport const retrieveTrainingStatus = (\r\n    trainingProgress: TrainingProgress,\r\n    trainingHands: TrainingHands,\r\n    gameConfig: GameConfig\r\n): TrainingStatus => {\r\n    const trainingStatus = getObjectKeys(trainingProgress).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, handCode) =>\r\n            reduceTrainingHandProgress(handCode, trainingProgress[handCode], reducedTrainingStatus),\r\n        {\r\n            attemptedTrainingPairs: 0,\r\n            isCompleted: false,\r\n            isProgressBlocked: false,\r\n            missedTrainingPairs: [],\r\n            passedTrainingPairs: 0,\r\n            trainingProgress: trainingProgress\r\n        } as TrainingStatus\r\n    );\r\n\r\n    trainingStatus.isCompleted = isTrainingCompleted(trainingStatus.passedTrainingPairs);\r\n    trainingStatus.isProgressBlocked = getIsProgressBlocked(\r\n        trainingStatus,\r\n        trainingHands,\r\n        gameConfig.selectedHandsOnly,\r\n        gameConfig.selectedHands\r\n    );\r\n\r\n    return trainingStatus;\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, initialRouteName, RouteNames } from '../../types';\r\n\r\nexport interface ConfigButtonProps {\r\n    isEnabled: boolean;\r\n    isProgressBlocked: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nexport const ConfigButton: React.FC<ConfigButtonProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          if (props.routeName === initialRouteName) {\r\n                              props.navigation.navigate(RouteNames.configMenu);\r\n                          } else {\r\n                              props.navigation.goBack();\r\n                          }\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {props.routeName === initialRouteName ? (\r\n                <React.Fragment>\r\n                    <Svg height={24} viewBox=\"340 140 280 279.416\" width={24}>\r\n                        <Path\r\n                            fill=\"white\"\r\n                            d=\"M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083\r\n\tc-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333\r\n\tL362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25\r\n\tc2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916\r\n\th51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25\r\n\tc4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667\r\n\tS533.667,250.25,533.667,280S509.75,333.666,480,333.666z\"\r\n                        />\r\n                    </Svg>\r\n                    {props.isProgressBlocked && props.progress < 100 && (\r\n                        <View\r\n                            style={{\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                bottom: 8\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'black', fontWeight: 'bold' }}>⚠️</Text>\r\n                        </View>\r\n                    )}\r\n                </React.Fragment>\r\n            ) : (\r\n                <Svg height={24} viewBox=\"0 0 352 512\" width={24}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n                    />\r\n                </Svg>\r\n            )}\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { G, Path } from 'react-native-svg';\r\nimport { dangerColor, splitColor } from '../../constants';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface EarningsIndicatorProps {\r\n    earnings: number;\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n}\r\n\r\nexport const EarningsIndicator: React.FC<EarningsIndicatorProps> = (props) => {\r\n    const earningsColor =\r\n        props.earnings > 0 ? splitColor : props.earnings < 0 ? dangerColor : 'white';\r\n\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.earningsChart);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: earningsColor, fontSize: 20 }}>\r\n                    {`${props.earnings > 0 ? '+' : ''}${props.earnings}`}\r\n                </Text>\r\n                <Svg height={24} viewBox=\"0 0 468 468\" width={24} style={{ marginTop: 2 }}>\r\n                    <G transform=\"translate(0,468) scale(0.078000,-0.078000)\">\r\n                        <Path\r\n                            fill={earningsColor}\r\n                            d=\"M2600 5595 c0 -237 -3 -305 -12 -305 -7 0 -63 -5 -125 -10 -140 -12\r\n                    -299 -49 -398 -91 -11 -4 -49 -20 -85 -35 -304 -124 -635 -421 -789 -706 -33\r\n                    -63 -80 -169 -88 -202 -35 -143 -41 -258 -23 -421 37 -323 180 -591 420 -785\r\n                    77 -62 83 -66 116 -87 28 -18 244 -126 279 -140 27 -10 103 -36 115 -38 19 -5\r\n                    100 -27 120 -35 59 -20 254 -55 418 -75 l52 -7 0 -515 0 -516 -82 6 c-76 5\r\n                    -198 30 -223 45 -5 4 -12 7 -15 8 -71 14 -269 163 -285 215 -4 11 -10 19 -14\r\n                    19 -12 0 -75 133 -95 200 l-17 55 -410 -3 -410 -2 6 -63 c17 -165 65 -343 132\r\n                    -487 26 -54 99 -185 115 -205 4 -5 27 -35 51 -65 72 -93 202 -215 327 -306 60\r\n                    -44 244 -154 257 -154 5 0 25 -9 44 -19 34 -18 167 -63 264 -90 62 -17 188\r\n                    -31 276 -31 l79 0 0 -325 0 -325 375 0 375 0 2 332 3 333 85 6 c121 9 341 58\r\n                    430 96 8 3 18 7 22 7 3 1 10 4 14 8 4 5 13 8 20 8 16 0 162 70 249 119 39 22\r\n                    77 44 85 48 8 4 20 12 27 17 7 6 36 27 64 46 70 47 221 181 267 237 20 24 47\r\n                    57 60 71 36 42 132 200 162 267 104 232 133 496 79 720 -11 44 -21 89 -24 100\r\n                    -7 28 -110 235 -132 264 -193 254 -402 410 -708 524 -138 51 -348 95 -495 102\r\n                    -58 3 -129 8 -158 11 l-52 5 2 502 3 502 58 -2 c154 -5 367 -94 455 -188 66\r\n                    -71 103 -148 110 -230 l5 -65 431 0 432 0 -4 38 c-4 47 -29 151 -52 222 -141\r\n                    430 -441 791 -800 962 -133 63 -169 78 -235 94 -5 2 -44 12 -86 23 -42 11\r\n                    -123 25 -180 31 -57 6 -112 13 -121 16 -17 5 -18 28 -18 290 l0 284 -375 0\r\n                    -375 0 0 -305z m0 -1585 l0 -450 -57 0 c-52 1 -84 6 -159 23 -30 7 -158 59\r\n                    -164 66 -3 3 -18 13 -35 21 -54 28 -151 128 -186 192 -32 59 -34 69 -34 158 0\r\n                    69 6 111 20 154 56 167 269 281 528 285 l87 1 0 -450z m975 -1485 c219 -17\r\n                    399 -118 472 -266 46 -93 48 -281 3 -367 -80 -153 -329 -259 -612 -261 l-88\r\n                    -1 0 448 c0 247 3 452 7 456 4 4 37 4 73 2 36 -3 101 -8 145 -11z\"\r\n                        />\r\n                    </G>\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface PrecisionIndicatorProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    precision: number;\r\n}\r\n\r\nexport const PrecisionIndicator: React.FC<PrecisionIndicatorProps> = (props) => {\r\n    const precision = Math.floor(props.precision * 1000) / 10;\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.missedPairs);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{precision}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M784.5,368.7L990,163.2l-166.9,11.6L834.7,7.9L629.2,213.4l-9,128.5L499.6,462.6c-10.1,0.1-20.1,3.9-27.8,11.6c-15.5,15.5-15.5,40.6,0,56.1c15.5,15.5,40.6,15.5,56.1,0c9.6-9.6,13.3-23,10.9-35.4L656,377.7L784.5,368.7z M671.4,232.6l112-112l-7.1,101l101-7l-112,112l-101,7L671.4,232.6z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M967.8,357.1l-35.6,33.2c10.7,41.4,15.4,84.1,13.9,127.5c-8.6,246-215.7,439.2-461.7,430.6c-246-8.6-439.2-215.7-430.6-461.7c8.6-246,215.7-439.2,461.7-430.6c28.6,1,56.9,5,84.6,11.4l37.7-35.2c-39.3-11.5-79.9-18.2-120.9-19.6C247,3.3,19.7,215.2,10.3,485.2C0.9,755.1,212.8,982.3,482.7,991.8c269.9,9.4,497.2-202.5,506.6-472.4C991.3,463.9,984,409.5,967.8,357.1z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M698.1,426.1c7,18.4,11.6,37.7,13.3,57.6c10.2,116.6-76.4,219.9-193.1,230.1C401.7,724,298.5,637.4,288.3,520.8c-10.2-116.6,76.4-219.9,193-230.1c25.8-2.3,51.7,0.3,76.3,7.3l-4-45.6c-24.8-5.3-50.5-7.1-76.1-4.8C337.1,259.8,232.8,384.1,245,524.5C257.3,665,381.6,769.3,522.1,757C662.6,744.7,766.9,620.5,754.6,480c-1.7-19.8-5.8-39.1-11.9-57.7L698.1,426.1z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface NavBarProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n}\r\n\r\nexport const ProgressIndicator: React.FC<NavBarProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.trainingPairs);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{props.progress}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M819.5,386.3h-2.5c-18.4,0-33.4,5.3-48,14.3c-12.7-37.1-45-63.7-86.6-63.7c-18.4,0-35.9,5.3-50.4,14.3c-12.7-37-45-63.7-86.6-63.7c-16.2,0-31.3,4.1-44.7,11.2v-95.3c0-51.9-39.3-94-91.6-94s-94.7,42.1-94.7,94v365l-57.5-57.3c-37-36.7-102.4-31.5-133.9,0s-52.1,94.9-7,140l264.5,262.7c5.5,5.4,11.5,9.9,17.8,13.8c48.2,39.3,103.5,62.6,220.3,62.6c266.9,0,291.6-144,291.6-321.6v-188C910.1,428.4,871.8,386.3,819.5,386.3z M860.3,668.4c0,150.3-0.7,272.1-241.8,272.1c-102.1,0-163.4-22.8-209.9-68.9L158.3,622.9c-22.2-22.2-16.6-50.5,1.6-68.6c18.1-18.1,51.4-18.8,68.9-1.4c0,0,43.9,43.7,81.8,81.3c28.6,28.5,53.8,53.5,53.8,53.5V213.2c0-24.6,20.1-44.5,44.9-44.5c24.8,0,41.7,19.9,41.7,44.5V515h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.4-0.5-5h0.5V391.3c0-24.6,17.9-44.5,42.7-44.5c0,0,43.9-0.6,43.9,44.5v163.3h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.3-0.5-5h0.5V440.8c0-24.6,17.6-44.5,42.4-44.5c0,0,44.8,2.8,44.8,44.5v143.5h0.5c-0.3,1.6-0.5,3.3-0.5,4.9c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.3-11.1,24.3-24.7c0-1.7-0.2-3.3-0.5-4.9h0.5v-98c0-24.6,18.5-44.5,43.3-44.5c0,0,43.4-1.8,43.4,44.5C860.3,486.3,860.3,628.4,860.3,668.4z M277.5,343.4v-83.1c-7.9-17.7-12.4-37.3-12.4-58c0-78.8,63.9-142.7,142.7-142.7s142.7,63.9,142.7,142.7c0,10.8-1.3,21.2-3.6,31.3c17.9,0.7,34.1,8.1,45.9,20.1c4.6-16.4,7.3-33.5,7.3-51.4C600,96.1,513.9,10,407.7,10S215.4,96.1,215.4,202.3C215.4,258.1,239.4,308.3,277.5,343.4z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import { OnBoardingSections, OnBoardingStep, OnBoardingStepEvent, RouteNames } from '../types';\r\n\r\nexport const onBoardingSteps: OnBoardingStep[] = [\r\n    {\r\n        activeSection: [OnBoardingSections.tableActions],\r\n        event: OnBoardingStepEvent.startRound,\r\n        hideNextButton: true,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click Random to start training a random pair'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tablePlayerHands],\r\n        hidePreviousButton: true,\r\n        text: 'This is your hand'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableDealerHand],\r\n        text: \"This is the dealer's hand\"\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableDealerHand, OnBoardingSections.tablePlayerHands],\r\n        text: 'training pair = player hand vs dealer up card'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableActions],\r\n        event: OnBoardingStepEvent.playerAction,\r\n        hideNextButton: true,\r\n        hidePreviousButton: true,\r\n        text: 'Chose an action for each of your hands'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableFeedback],\r\n        hidePreviousButton: true,\r\n        text: 'Confirm whether you chose the right action'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.progressIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of trained pairs'\r\n    },\r\n    {\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.trainingPairs);\r\n        },\r\n        text: 'Click on it to train pairs or view their status'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.precisionIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of passed pairs'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.missedPairs],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.missedPairs);\r\n        },\r\n        text: \"Click on it to see the pairs you've missed\"\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.earningsIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows your cash status'\r\n    },\r\n    {\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.earningsChart);\r\n        },\r\n        text: 'Click on it to see your earnings historical'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.configMenuButton],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click here to access the configuration menu'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.basicStrategyTable],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.configMenu);\r\n        },\r\n        text: 'View and memorize the basic strategy table'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.casinoRules],\r\n        text: 'Chose the casino rules you want to train with'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.appSettings],\r\n        text: 'Speed up your training with additional options'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.resetTraining],\r\n        text: 'Start training over and master basic strategy'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { StyleProp, View, ViewStyle } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { OnBoardingSections } from '../types';\r\n\r\nexport interface OnBoardingSectionProps {\r\n    isHighlighted?: OnBoardingSections | boolean;\r\n    onBoardingStep: number;\r\n    style?: StyleProp<ViewStyle> | ((isHighlighted: boolean) => StyleProp<ViewStyle>);\r\n}\r\n\r\nexport const OnBoardingSection: React.FC<OnBoardingSectionProps> = (props) => {\r\n    const isOnboardingActive = props.onBoardingStep > -1;\r\n    const isHighlighted =\r\n        isOnboardingActive &&\r\n        (typeof props.isHighlighted === 'boolean'\r\n            ? props.isHighlighted\r\n            : props.isHighlighted !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep] &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection!.indexOf(props.isHighlighted) >\r\n                  -1);\r\n    const style =\r\n        props.style && typeof props.style === 'function' ? props.style(isHighlighted) : props.style;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                width: '100%',\r\n                ...(style as {})\r\n            }}\r\n        >\r\n            {props.children}\r\n            {isOnboardingActive && !isHighlighted && (\r\n                <View\r\n                    style={{\r\n                        backgroundColor: 'black',\r\n                        opacity: 0.5,\r\n                        top: 0,\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        right: 0,\r\n                        left: 0\r\n                    }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { Animated, View } from 'react-native';\r\nimport { tableColor } from '../constants';\r\nimport { getProgressPercentage } from '../logic/training-status';\r\nimport { AppNavigation, OnBoardingSections, Player, TrainingStatus } from '../types';\r\nimport { ConfigButton } from './nav-bar-items/config-button';\r\nimport { EarningsIndicator } from './nav-bar-items/earnings-indicator';\r\nimport { PrecisionIndicator } from './nav-bar-items/precision-indicator';\r\nimport { ProgressIndicator } from './nav-bar-items/progress-indicator';\r\nimport { OnBoardingSection } from './onboarding-section';\r\n\r\nexport interface NavBarProps {\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    player: Player;\r\n    routeName?: string;\r\n    trainingStatus: TrainingStatus;\r\n}\r\n\r\nconst shakeAmplitude = 6;\r\nconst shakeDuration = 40;\r\nconst useNativeDriver = true;\r\n\r\nconst animateIndicator = (position: Animated.Value) => {\r\n    Animated.sequence([\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: 0,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        })\r\n    ]).start();\r\n};\r\n\r\nexport const NavBar: React.FC<NavBarProps> = (props) => {\r\n    const precision =\r\n        props.trainingStatus.attemptedTrainingPairs > 0\r\n            ? props.trainingStatus.passedTrainingPairs / props.trainingStatus.attemptedTrainingPairs\r\n            : 0;\r\n\r\n    const earningsPosition = useMemo(() => new Animated.Value(0), []);\r\n    const precisionPosition = useMemo(() => new Animated.Value(0), []);\r\n    const progressPosition = useMemo(() => new Animated.Value(0), []);\r\n\r\n    const progressPercentage = getProgressPercentage(props.trainingStatus.attemptedTrainingPairs);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(earningsPosition);\r\n    }, [props.player.cash]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(precisionPosition);\r\n    }, [precision]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(progressPosition);\r\n    }, [progressPercentage]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                height: 48,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.earningsIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '25%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: earningsPosition }]\r\n                    }}\r\n                >\r\n                    <EarningsIndicator\r\n                        earnings={props.player.cash}\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.precisionIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: precisionPosition }]\r\n                    }}\r\n                >\r\n                    <PrecisionIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        precision={precision}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.progressIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: progressPosition }]\r\n                    }}\r\n                >\r\n                    <ProgressIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        progress={progressPercentage}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.configMenuButton}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    alignItems: 'center',\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '15%'\r\n                })}\r\n            >\r\n                <ConfigButton\r\n                    isEnabled={props.onBoardingStep === -1}\r\n                    isProgressBlocked={props.trainingStatus.isProgressBlocked}\r\n                    navigation={props.navigation}\r\n                    progress={progressPercentage}\r\n                    routeName={props.routeName}\r\n                />\r\n            </OnBoardingSection>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\n\r\ninterface ButtonProps {\r\n    backgroundColor?: string;\r\n    height: number | string;\r\n    isEnabled: boolean;\r\n    marginBottom?: number;\r\n    marginTop?: number;\r\n    onPress: () => void;\r\n    text: string;\r\n    textColor?: string;\r\n    textSize?: number;\r\n    width: number | string;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = (props) => (\r\n    <TouchableOpacity\r\n        style={{\r\n            height: props.height,\r\n            marginBottom: props.marginBottom,\r\n            marginTop: props.marginTop,\r\n            width: props.width\r\n        }}\r\n        onPress={props.isEnabled ? props.onPress : undefined}\r\n    >\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                backgroundColor: props.backgroundColor,\r\n                height: '100%',\r\n                justifyContent: 'center',\r\n                opacity: props.isEnabled ? 1 : 0.4,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: props.textColor || 'white',\r\n                    fontSize: props.textSize || 20,\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                {props.text}\r\n            </Text>\r\n        </View>\r\n    </TouchableOpacity>\r\n);\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { Button } from './button';\r\n\r\ninterface OnboardingBarProps {\r\n    exitOnboarding: () => void;\r\n    nextStepHandler: () => void;\r\n    onBoardingStep: number;\r\n    previousStepHandler: () => void;\r\n}\r\n\r\nexport const OnboardingBar: React.FC<OnboardingBarProps> = (props) => {\r\n    const currentStep = onBoardingSteps[props.onBoardingStep];\r\n\r\n    return (\r\n        <View style={{ alignItems: 'center', backgroundColor: 'white', flexDirection: 'row' }}>\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep > 0 && !currentStep.hidePreviousButton && (\r\n                    <Button\r\n                        height={56}\r\n                        isEnabled={true}\r\n                        onPress={props.previousStepHandler}\r\n                        text=\"⬅️\"\r\n                        textColor=\"black\"\r\n                        textSize={24}\r\n                        width=\"100%\"\r\n                    />\r\n                )}\r\n            </View>\r\n\r\n            <View style={{ width: '70%' }}>\r\n                <Text style={{ color: 'black', fontSize: 20, padding: 16 }}>\r\n                    {currentStep.text}\r\n                </Text>\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep < onBoardingSteps.length - 1 &&\r\n                    !currentStep.hideNextButton && (\r\n                        <Button\r\n                            height={56}\r\n                            isEnabled={true}\r\n                            onPress={props.nextStepHandler}\r\n                            text=\"➡️\"\r\n                            textColor=\"black\"\r\n                            textSize={24}\r\n                            width=\"100%\"\r\n                        />\r\n                    )}\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                <Button\r\n                    height={56}\r\n                    isEnabled={true}\r\n                    onPress={props.exitOnboarding}\r\n                    text=\"❌\"\r\n                    textColor=\"black\"\r\n                    textSize={20}\r\n                    width=\"100%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import {\r\n    Card,\r\n    Hand,\r\n    HandOutcome,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { createHand, dealCard, getCardForUntrainedHand, handToHandCode, resolveHand } from './hand';\r\n\r\nexport const createPlayer = (): Player => ({\r\n    cash: 0,\r\n    earningsHistorical: [0],\r\n    handIndex: 0,\r\n    hands: [],\r\n    lastActionHand: undefined\r\n});\r\n\r\nexport const hitCurrentHand = (\r\n    player: Player,\r\n    untrainedPairsPriority: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const nextCard = untrainedPairsPriority\r\n        ? getCardForUntrainedHand(currentHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(currentHand, nextCard);\r\n};\r\n\r\nexport const doubleCurrentHand = (player: Player, card: Card) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    dealCard(currentHand, card);\r\n    player.cash -= currentHand.bet;\r\n    currentHand.bet *= 2;\r\n};\r\n\r\nexport const getCurrentHand = (player: Player): Hand => player.hands[player.handIndex];\r\n\r\nexport const initializeHands = (player: Player, initialHand: Hand) => {\r\n    player.cash -= initialHand.bet;\r\n    player.hands = [initialHand];\r\n    player.handIndex = 0;\r\n    player.lastActionHand = undefined;\r\n};\r\n\r\nexport const isLastHand = (player: Player) => player.hands.length - 1 <= player.handIndex;\r\n\r\nexport const resolvePlayerEarnings = (player: Player, dealerHand: Hand) =>\r\n    player.hands.reduce((earnings, hand) => {\r\n        const handOutcome = resolveHand(hand, player.hands.length, dealerHand);\r\n        return (\r\n            earnings +\r\n            (handOutcome === HandOutcome.blackjack\r\n                ? hand.bet * 2.5\r\n                : handOutcome === HandOutcome.playerWins\r\n                ? hand.bet * 2\r\n                : handOutcome === HandOutcome.push\r\n                ? hand.bet\r\n                : 0)\r\n        );\r\n    }, 0);\r\n\r\nexport const splitCurrentHand = (\r\n    player: Player,\r\n    untrainedPairsPriority: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const firstHand = createHand([currentHand.cards[0]]);\r\n    const secondHand = createHand([currentHand.cards[1]]);\r\n    player.cash -= secondHand.bet;\r\n    const nextCard = untrainedPairsPriority\r\n        ? getCardForUntrainedHand(firstHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(firstHand, nextCard);\r\n    player.hands.splice(player.handIndex, 1, firstHand, secondHand);\r\n};\r\n\r\nexport const startNextHand = (\r\n    player: Player,\r\n    untrainedPairsPriority: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    player.handIndex++;\r\n    const nextHand = player.hands[player.handIndex];\r\n    const nextCard = untrainedPairsPriority\r\n        ? getCardForUntrainedHand(nextHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(nextHand, nextCard);\r\n};\r\n\r\nexport const standCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n};\r\n\r\nexport const surrenderCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    player.cash += currentHand.bet / 2;\r\n    player.hands.splice(player.handIndex, 1);\r\n};\r\n","import { updatePlayerEarnings, updatePlayerEarningsHistorical } from '../async-storage';\r\nimport { CasinoRules, CasinoRulesKeys, GameConfig, Hand, Phases, Player } from '../types';\r\nimport { getRandomCard } from './card';\r\nimport {\r\n    dealCard,\r\n    getHandEffectiveValue,\r\n    getHandValidValues,\r\n    hasHoleCard,\r\n    revealDealerHoleCard\r\n} from './hand';\r\nimport { resolvePlayerEarnings } from './player';\r\n\r\nexport const handleDealerTurn = (\r\n    dealerHand: Hand,\r\n    gameConfig: GameConfig,\r\n    player: Player,\r\n    setDealerHand: (dealerHand: Hand) => void,\r\n    setPhase: (phase: Phases) => void,\r\n    setPlayer: (player: Player) => void\r\n) => {\r\n    let nextDealerHand = { ...dealerHand };\r\n\r\n    if (\r\n        gameConfig.isDealerAnimationEnabled &&\r\n        mustDealerDraw(nextDealerHand, gameConfig.casinoRules)\r\n    ) {\r\n        setTimeout(() => {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            } else {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n            // Setting the dealerHand will trigger this handler again, through useEffect\r\n        }, 1000);\r\n    } else {\r\n        if (!gameConfig.isDealerAnimationEnabled) {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            }\r\n\r\n            while (mustDealerDraw(nextDealerHand, gameConfig.casinoRules)) {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n        }\r\n\r\n        const playerEarnings = resolvePlayerEarnings(player, nextDealerHand);\r\n        const nextCash = player.cash + playerEarnings;\r\n        const nextEarningsHistorical = player.earningsHistorical.concat([nextCash]);\r\n        const nextPlayer: Player = {\r\n            ...player,\r\n            cash: nextCash,\r\n            earningsHistorical: nextEarningsHistorical\r\n        };\r\n\r\n        setPlayer(nextPlayer);\r\n        setPhase(Phases.finished);\r\n\r\n        updatePlayerEarnings(nextCash);\r\n        updatePlayerEarningsHistorical(nextEarningsHistorical);\r\n    }\r\n};\r\n\r\nconst mustDealerDraw = (dealerHand: Hand, casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(dealerHand);\r\n    return (\r\n        handEffectiveValue < 17 ||\r\n        (casinoRules[CasinoRulesKeys.dealerHitsSoft17] &&\r\n            getHandValidValues(dealerHand).length > 1 &&\r\n            handEffectiveValue === 17)\r\n    );\r\n};\r\n","import {\r\n    BaseDecisions,\r\n    DecisionEvaluation,\r\n    DynamicConditions,\r\n    DynamicDecision,\r\n    DynamicDecisions,\r\n    Hand,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    TrainingHands\r\n} from '../types';\r\nimport { symbolToSimpleSymbol } from './card';\r\nimport { handToHandCode } from './hand';\r\n\r\nexport const evaluateDecision = (\r\n    playerHand: Hand,\r\n    dealerHand: Hand,\r\n    trainingHands: TrainingHands,\r\n    dynamicConditions: DynamicConditions,\r\n    playerDecision: PlayerDecision\r\n): DecisionEvaluation => {\r\n    const handCode = handToHandCode(playerHand);\r\n    const trainingHand = trainingHands[handCode];\r\n    const dealerSymbol = symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const dynamicDecision = trainingHand.decisionSet[dealerSymbol];\r\n    const optimalDecision = evaluateDynamicDecision(dynamicDecision, dynamicConditions);\r\n\r\n    return {\r\n        dealerSymbol,\r\n        dynamicDecision,\r\n        handName: trainingHand.name,\r\n        isHit: playerDecision === optimalDecision\r\n    };\r\n};\r\n\r\nconst evaluateDynamicDecision = (\r\n    dynamicDecision: DynamicDecision,\r\n    dynamicConditions: DynamicConditions\r\n): PlayerDecision =>\r\n    dynamicDecision === DynamicDecisions.double_hit\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.double_stand\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.split_stand\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_surrender_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_split_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_stand\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.stand\r\n        : dynamicDecision;\r\n","import { Dictionary, GameConfig, HandCode } from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\n\r\nexport const getDefaultGameConfig = (): GameConfig => ({\r\n    casinoRules: getDefaultCasinoRules(),\r\n    isDealerAnimationEnabled: true,\r\n    isSoundEnabled: true,\r\n    selectedHands: Object.values(HandCode).reduce(\r\n        (hands, handCode) => ({ ...hands, [handCode]: true }),\r\n        {}\r\n    ) as Dictionary<boolean, HandCode>,\r\n    selectedHandsOnly: false,\r\n    untrainedPairsPriority: false\r\n});\r\n","import { Picker } from '@react-native-picker/picker';\r\nimport React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, Doubling } from '../../types';\r\n\r\ninterface DoublingPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange: (nextCasinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const DoublingPicker: React.FC<DoublingPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.doubling}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={String(props.casinoRules[CasinoRulesKeys.doubling])}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextDoubling = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextDoubling > 0,\r\n                            [CasinoRulesKeys.doubling]: nextDoubling\r\n                        };\r\n                        props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"Any pair\" value={String(Doubling.anyPair)} />\r\n                    <Picker.Item\r\n                        label=\"9, 10, 11, S19, S20\"\r\n                        value={String(Doubling.nineToElevenSoft)}\r\n                    />\r\n                    <Picker.Item label=\"9, 10, 11\" value={String(Doubling.nineToEleven)} />\r\n                    <Picker.Item label=\"10, 11\" value={String(Doubling.tenToEleven)} />\r\n                    <Picker.Item label=\"None\" value={String(Doubling.none)} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Text, View } from 'react-native';\r\nimport { hitColor } from '../constants';\r\n\r\ntype SwitcherProps = {\r\n    disabled?: boolean;\r\n    label: string;\r\n    onValueChange: (value: boolean) => void;\r\n    value: boolean;\r\n};\r\n\r\nexport const Switcher: React.FC<SwitcherProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                opacity: props.disabled ? 0.3 : undefined,\r\n                paddingTop: 12,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Switch\r\n                disabled={props.disabled}\r\n                onValueChange={props.onValueChange}\r\n                style={{ marginRight: 8 }}\r\n                trackColor={{ true: hitColor, false: 'white' }}\r\n                value={props.value}\r\n            />\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {props.label}\r\n            </Text>\r\n            {props.children}\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../../types';\r\nimport { Switcher } from '../switcher';\r\n\r\ninterface RuleSwitcherProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange: (nextCasinoRules: CasinoRules) => void;\r\n    ruleName:\r\n        | CasinoRulesKeys.blackjackPeek\r\n        | CasinoRulesKeys.dealerHitsSoft17\r\n        | CasinoRulesKeys.doublingAfterSplit\r\n        | CasinoRulesKeys.hitSplitAces\r\n        | CasinoRulesKeys.surrender;\r\n}\r\n\r\nexport const RuleSwitcher: React.FC<RuleSwitcherProps> = (props) => {\r\n    const disabled =\r\n        (props.ruleName === CasinoRulesKeys.doublingAfterSplit &&\r\n            (props.casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none)) ||\r\n        (props.ruleName === CasinoRulesKeys.hitSplitAces &&\r\n            props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none);\r\n\r\n    return (\r\n        <Switcher\r\n            disabled={disabled}\r\n            label={props.ruleName}\r\n            onValueChange={(newValue) => {\r\n                props.onValueChange({\r\n                    ...props.casinoRules,\r\n                    [props.ruleName]: newValue\r\n                });\r\n            }}\r\n            value={props.casinoRules[props.ruleName]}\r\n        >\r\n            {props.children}\r\n        </Switcher>\r\n    );\r\n};\r\n","import { Picker } from '@react-native-picker/picker';\r\nimport React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, SplitsNumber } from '../../types';\r\n\r\ninterface SplitsNumberPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange: (nextCasinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const SplitsNumberPicker: React.FC<SplitsNumberPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.splitsNumber}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={String(props.casinoRules[CasinoRulesKeys.splitsNumber])}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextSplitsNumber = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.hitSplitAces]:\r\n                                props.casinoRules[CasinoRulesKeys.hitSplitAces] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.splitsNumber]: nextSplitsNumber\r\n                        };\r\n                        props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"None\" value={String(SplitsNumber.none)} />\r\n                    <Picker.Item label=\"1\" value={String(SplitsNumber.one)} />\r\n                    <Picker.Item label=\"2\" value={String(SplitsNumber.two)} />\r\n                    <Picker.Item label=\"3\" value={String(SplitsNumber.three)} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import * as Linking from 'expo-linking';\r\nimport React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { colors } from '../constants';\r\nimport { allDealerSymbols } from '../logic/dealer-symbols';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    BaseDecisions,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    SplitsNumber\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nconst actionsAbbreviationMap: Dictionary<string, BaseDecisions | DynamicDecisions> = {\r\n    [BaseDecisions.hit]: 'H',\r\n    [BaseDecisions.stand]: 'S',\r\n    [DynamicDecisions.double_hit]: 'Dh',\r\n    [DynamicDecisions.double_stand]: 'Ds',\r\n    [DynamicDecisions.split_hit]: 'Ph',\r\n    [DynamicDecisions.split_stand]: 'Ps',\r\n    [DynamicDecisions.split_surrender_hit]: 'Pr',\r\n    [DynamicDecisions.surrender_hit]: 'Rh',\r\n    [DynamicDecisions.surrender_split_hit]: 'Rp',\r\n    [DynamicDecisions.surrender_stand]: 'Rs'\r\n};\r\n\r\nconst handCodesAbbreviationMap: Partial<Dictionary<string, HandCode>> = {\r\n    [HandCode.Split2s]: '2s',\r\n    [HandCode.Split3s]: '3s',\r\n    [HandCode.Split4s]: '4s',\r\n    [HandCode.Split5s]: '5s',\r\n    [HandCode.Split6s]: '6s',\r\n    [HandCode.Split7s]: '7s',\r\n    [HandCode.Split8s]: '8s',\r\n    [HandCode.Split9s]: '9s',\r\n    [HandCode.Split10s]: 'Xs',\r\n    [HandCode.SplitAs]: 'As',\r\n    [HandCode.Soft13]: 'A2',\r\n    [HandCode.Soft14]: 'A3',\r\n    [HandCode.Soft15]: 'A4',\r\n    [HandCode.Soft16]: 'A5',\r\n    [HandCode.Soft17]: 'A6',\r\n    [HandCode.Soft18]: 'A7',\r\n    [HandCode.Soft19]: 'A8',\r\n    [HandCode.Soft20]: 'A9'\r\n};\r\n\r\nconst cellWidth = Math.floor((100 * 100) / (allDealerSymbols.length + 1)) / 100;\r\n\r\ninterface TextCellProps {\r\n    backgroundColor?: string;\r\n}\r\n\r\nconst TextCell: React.FC<TextCellProps> = (props) => (\r\n    <Text\r\n        style={{\r\n            backgroundColor: props.backgroundColor,\r\n            color: 'white',\r\n            fontSize: 16,\r\n            marginVertical: 1,\r\n            paddingVertical: 2,\r\n            textAlign: 'center',\r\n            width: `${cellWidth}%`\r\n        }}\r\n    >\r\n        {props.children}\r\n    </Text>\r\n);\r\n\r\ninterface BasicStrategyTableProps {\r\n    casinoRules: CasinoRules;\r\n}\r\n\r\nexport const BasicStrategyTable: React.FC<BasicStrategyTableProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    return (\r\n        <ScrollView style={{ width: '100%' }}>\r\n            <Text\r\n                onPress={() => {\r\n                    Linking.openURL(\r\n                        'https://wizardofodds.com/games/blackjack/strategy/calculator/'\r\n                    );\r\n                }}\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20,\r\n                    fontStyle: 'italic',\r\n                    marginVertical: 16,\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                This basic strategy table is based on the data available at the Wizard of Odds basic\r\n                strategy calculator\r\n            </Text>\r\n\r\n            <View style={{ paddingHorizontal: 16, marginBottom: 16 }}>\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={setCasinoRules}\r\n                    ruleName={CasinoRulesKeys.blackjackPeek}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={setCasinoRules}\r\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                />\r\n\r\n                <DoublingPicker casinoRules={casinoRules} onValueChange={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={setCasinoRules}\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                />\r\n\r\n                <SplitsNumberPicker casinoRules={casinoRules} onValueChange={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={setCasinoRules}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                />\r\n            </View>\r\n\r\n            <View style={{ flexDirection: 'row', width: '100%' }}>\r\n                {[''].concat(Object.values(allDealerSymbols)).map((dealerSymbol) => (\r\n                    <TextCell key={dealerSymbol}>{dealerSymbol}</TextCell>\r\n                ))}\r\n            </View>\r\n\r\n            {Object.values(HandCode).map((handCode) => {\r\n                const trainingHand = trainingHands[handCode];\r\n                return (\r\n                    <View key={handCode} style={{ flexDirection: 'row', width: '100%' }}>\r\n                        <TextCell>{handCodesAbbreviationMap[handCode] || handCode}</TextCell>\r\n                        {getObjectKeys(trainingHand.decisionSet).map((cardSymbol) => (\r\n                            <TextCell\r\n                                key={cardSymbol}\r\n                                backgroundColor={colors[trainingHand.decisionSet[cardSymbol]]}\r\n                            >\r\n                                {actionsAbbreviationMap[trainingHand.decisionSet[cardSymbol]]}\r\n                            </TextCell>\r\n                        ))}\r\n                    </View>\r\n                );\r\n            })}\r\n\r\n            <View style={{ paddingHorizontal: 16, marginVertical: 16 }}>\r\n                {getObjectKeys(actionsAbbreviationMap).map((action) => (\r\n                    <Text\r\n                        key={action}\r\n                        style={{\r\n                            backgroundColor: colors[action],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 8,\r\n                            paddingVertical: 4,\r\n                            marginBottom: 4\r\n                        }}\r\n                    >\r\n                        {actionsAbbreviationMap[action]} = {action}\r\n                    </Text>\r\n                ))}\r\n            </View>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { playSound } from '../utils';\r\n\r\ntype SoundQueue = { isActive: boolean; sounds: Audio.Sound[] };\r\n\r\nexport const createSoundQueue = (): SoundQueue => ({\r\n    isActive: false,\r\n    sounds: []\r\n});\r\n\r\nconst playNextSound = (soundQueue: SoundQueue) => {\r\n    const nextSound = soundQueue.sounds.pop();\r\n    if (nextSound) {\r\n        playSound(nextSound).then(() => {\r\n            setTimeout(() => playNextSound(soundQueue), 250);\r\n        });\r\n    } else {\r\n        soundQueue.isActive = false;\r\n    }\r\n};\r\n\r\nexport const pushSound = (soundQueue: SoundQueue, sound: Audio.Sound) => {\r\n    soundQueue.sounds.push(sound);\r\n    if (!soundQueue.isActive) {\r\n        soundQueue.isActive = true;\r\n        playNextSound(soundQueue);\r\n    }\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\r\nimport cardSlideSoundMp3 from '../../assets/card-slide.mp3';\r\nimport { nonRandomColor } from '../constants';\r\nimport { createSoundQueue, pushSound } from '../logic/sound-queue';\r\nimport { AppNavigation, Card, RouteNames, SimpleCardSymbol } from '../types';\r\n\r\ninterface CardComponentProps {\r\n    card: Card;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nconst animationsDuration = 400;\r\nconst initialOpacity = 0;\r\nconst initialPosition = -20;\r\n\r\nconst soundQueue = createSoundQueue();\r\n\r\nexport const CardComponent: React.FC<CardComponentProps> = (props) => {\r\n    const opacity = useMemo(() => new Animated.Value(initialOpacity), []);\r\n    const position = useMemo(() => new Animated.Value(initialPosition), []);\r\n    const [cardSlideSound, setCardSlideSound] = useState<Audio.Sound | false>();\r\n\r\n    const animateCard = (sound?: Audio.Sound | false) => {\r\n        if (!props.skipAnimation) {\r\n            Animated.parallel([\r\n                Animated.timing(opacity, {\r\n                    useNativeDriver: true,\r\n                    toValue: 1,\r\n                    duration: animationsDuration * 2\r\n                }),\r\n                Animated.timing(position, {\r\n                    useNativeDriver: true,\r\n                    toValue: 0,\r\n                    duration: animationsDuration\r\n                })\r\n            ]).start();\r\n        }\r\n\r\n        if (props.isSoundEnabled && sound) {\r\n            pushSound(soundQueue, sound);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cardSlideSound === undefined) {\r\n            Audio.Sound.createAsync(cardSlideSoundMp3, { volume: 0.5 })\r\n                .then((result) => {\r\n                    animateCard(result.sound);\r\n                    setCardSlideSound(result.sound);\r\n                })\r\n                .catch(() => {\r\n                    /* Failing to load audio is not a critical issue */\r\n                    animateCard();\r\n                    setCardSlideSound(false);\r\n                });\r\n        } else {\r\n            if (!props.skipAnimation) {\r\n                opacity.setValue(initialOpacity);\r\n                position.setValue(initialPosition);\r\n            }\r\n\r\n            animateCard(cardSlideSound);\r\n        }\r\n    }, [props.card]);\r\n\r\n    const cardColor = props.card.isRandom\r\n        ? props.card.suit === '♦' || props.card.suit === '♥'\r\n            ? 'red'\r\n            : 'black'\r\n        : nonRandomColor;\r\n\r\n    const backgroundColor = props.card.isHoleCard ? 'lightgrey' : 'white';\r\n\r\n    return (\r\n        <Animated.View\r\n            style={{\r\n                backgroundColor,\r\n                borderRadius: 8,\r\n                height: 66,\r\n                marginBottom: 8,\r\n                marginRight: 8,\r\n                opacity: props.skipAnimation ? undefined : opacity,\r\n                transform: props.skipAnimation ? undefined : [{ translateY: position }],\r\n                width: 56\r\n            }}\r\n        >\r\n            {!props.card.isHoleCard && (\r\n                <TouchableOpacity\r\n                    onPress={\r\n                        props.navigation && !props.card.isRandom\r\n                            ? () => {\r\n                                  props.navigation!.navigate(RouteNames.untrainedPairsPriority);\r\n                              }\r\n                            : undefined\r\n                    }\r\n                >\r\n                    {props.card.isRandom ? (\r\n                        <Text\r\n                            style={{\r\n                                color: cardColor,\r\n                                fontSize: 16,\r\n                                position: 'absolute',\r\n                                right: 4,\r\n                                top: 4\r\n                            }}\r\n                        >\r\n                            {props.card.suit}\r\n                        </Text>\r\n                    ) : (\r\n                        <View\r\n                            style={{\r\n                                backgroundColor: cardColor,\r\n                                height: 12,\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                top: 8,\r\n                                width: 12\r\n                            }}\r\n                        />\r\n                    )}\r\n                    <Text\r\n                        style={{\r\n                            color: cardColor,\r\n                            fontSize: 40,\r\n                            marginRight: props.card.symbol === SimpleCardSymbol.Ten ? 0 : 8,\r\n                            marginTop: 12,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.card.symbol}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            )}\r\n        </Animated.View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { getHandValidValues, isBlackjack } from '../logic/hand';\r\nimport { AppNavigation, Hand } from '../types';\r\nimport { CardComponent } from './card-component';\r\n\r\ninterface HandComponentProps {\r\n    hand: Hand;\r\n    handsNumber: number;\r\n    isCurrentHand: boolean;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    peeking?: boolean;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nexport const HandComponent: React.FC<HandComponentProps> = (props) => {\r\n    const handValues = getHandValidValues(props.hand).join('/');\r\n    const displayValues = isBlackjack(props.hand, props.handsNumber)\r\n        ? 'Blackjack'\r\n        : handValues.indexOf('21') > -1\r\n        ? '21'\r\n        : handValues;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                backgroundColor: props.isCurrentHand ? 'rgba(255, 255, 255, 0.2)' : undefined,\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'center',\r\n                maxWidth: '100%',\r\n                paddingTop: 8,\r\n                paddingHorizontal: 8\r\n            }}\r\n        >\r\n            {props.hand.cards.map((card, index) => (\r\n                <CardComponent\r\n                    card={card}\r\n                    isSoundEnabled={props.isSoundEnabled}\r\n                    key={index}\r\n                    navigation={props.navigation}\r\n                    skipAnimation={props.skipAnimation}\r\n                />\r\n            ))}\r\n            <View style={{ alignItems: 'center', justifyContent: 'center', marginBottom: 8 }}>\r\n                {props.peeking ? (\r\n                    <Text style={{ color: 'black', fontSize: 32 }}>👁️</Text>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Text style={{ color: 'white', fontSize: 25 }}> {displayValues}</Text>\r\n                        {props.hand.outcome && (\r\n                            <Text style={{ color: 'white', fontSize: 25, fontWeight: 'bold' }}>\r\n                                {props.hand.outcome}\r\n                            </Text>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { createCard } from '../logic/card';\r\nimport { CardSuit, SimpleCardSymbol } from '../types';\r\n\r\nexport const BlackjackPeek: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Blackjack Peek\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    In Hole card games the dealer's hand immediately receives its second card face\r\n                    down (the hole card) after receiving its first card face up.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Eight, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds, true)\r\n                        ],\r\n                        values: [8]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 16 }}>\r\n                    When Blackjack Peek is enabled and the dealer's hand could be a blackjack (e.g.\r\n                    the first card is an ace or a ten value card), the dealer peeks at the hole\r\n                    card.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds, true)\r\n                        ],\r\n                        values: [1, 11]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    peeking={true}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 16 }}>\r\n                    If the hole card makes the dealer's hand a blackjack, the dealer reveals the\r\n                    hole card winning over all players' non blackjack hands.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds)\r\n                        ],\r\n                        values: [11, 21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\nexport const Divider: React.FC = () => (\r\n    <View\r\n        style={{\r\n            backgroundColor: 'white',\r\n            height: 2,\r\n            width: '100%'\r\n        }}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity } from 'react-native';\r\nimport { tableColor } from '../constants';\r\n\r\ninterface HelpIconProps {\r\n    onPress: () => void;\r\n}\r\n\r\nexport const HelpIcon: React.FC<HelpIconProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity onPress={props.onPress}>\r\n            <Text\r\n                style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: 16,\r\n                    color: tableColor,\r\n                    fontSize: 18,\r\n                    fontWeight: 'bold',\r\n                    marginLeft: 8,\r\n                    marginTop: 2,\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                ?\r\n            </Text>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Alert, Platform, ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { Divider } from '../components/divider';\r\nimport { HelpIcon } from '../components/help-icon';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { Switcher } from '../components/switcher';\r\nimport {\r\n    dangerColor,\r\n    doubleColor,\r\n    hitColor,\r\n    splitColor,\r\n    standColor,\r\n    warningColor\r\n} from '../constants';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\nimport { getIsProgressBlocked } from '../logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    GameConfig,\r\n    HandCode,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    SelectedHands,\r\n    TrainingHands,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype ConfigMenuProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    resetTrainingStatus: () => void;\r\n    setGameConfig: (gameConfig: GameConfig) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingStatus: TrainingStatus;\r\n};\r\n\r\nexport const ConfigMenu: React.FC<ConfigMenuProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n    const [isDealerAnimationEnabled, setIsDealerAnimationEnabled] = useState(\r\n        props.gameConfig.isDealerAnimationEnabled\r\n    );\r\n    const [isProgressBlocked, setIsProgressBlocked] = useState(\r\n        props.trainingStatus.isProgressBlocked\r\n    );\r\n    const [isSoundEnabled, setIsSoundEnabled] = useState(props.gameConfig.isSoundEnabled);\r\n    const [selectedHands, setSelectedHands] = useState(props.gameConfig.selectedHands);\r\n    const [selectedHandsOnly, setSelectedHandsOnly] = useState(props.gameConfig.selectedHandsOnly);\r\n    const [trainingHands, setTrainingHands] = useState(props.trainingHands);\r\n    const [untrainedPairsPriority, setUntrainedPairsPriority] = useState(\r\n        props.gameConfig.untrainedPairsPriority\r\n    );\r\n\r\n    const isSomeHandSelected = (_selectedHandsOnly: boolean, _selectedHands: SelectedHands) =>\r\n        !_selectedHandsOnly || Object.values(_selectedHands).some((x) => x);\r\n\r\n    const isProgressBlockedHandler = (options: {\r\n        nextSelectedHands?: SelectedHands;\r\n        nextSelectedHandsOnly?: boolean;\r\n        nextTrainingHands?: TrainingHands;\r\n    }) => {\r\n        const _selectedHandsOnly =\r\n            options.nextSelectedHandsOnly !== undefined\r\n                ? options.nextSelectedHandsOnly\r\n                : selectedHandsOnly;\r\n        const _selectedHands = options.nextSelectedHands || selectedHands;\r\n\r\n        setIsProgressBlocked(\r\n            isSomeHandSelected(_selectedHandsOnly, _selectedHands) &&\r\n                getIsProgressBlocked(\r\n                    props.trainingStatus,\r\n                    options.nextTrainingHands || trainingHands,\r\n                    _selectedHandsOnly,\r\n                    _selectedHands\r\n                )\r\n        );\r\n    };\r\n\r\n    const casinoRuleChangeHandler = (nextCasinoRules: CasinoRules) => {\r\n        setCasinoRules(nextCasinoRules);\r\n        const nextTrainingHands = getTrainingHands(nextCasinoRules);\r\n        setTrainingHands(nextTrainingHands);\r\n    };\r\n\r\n    const saveHandler = () => {\r\n        props.setGameConfig({\r\n            casinoRules,\r\n            isDealerAnimationEnabled,\r\n            isSoundEnabled,\r\n            selectedHands,\r\n            selectedHandsOnly,\r\n            untrainedPairsPriority\r\n        });\r\n        props.navigation.navigate(RouteNames.table);\r\n    };\r\n\r\n    const isSaveButtonEnabled =\r\n        isSomeHandSelected(selectedHandsOnly, selectedHands) &&\r\n        (props.gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doublingAfterSplit] !==\r\n                casinoRules[CasinoRulesKeys.doublingAfterSplit] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                casinoRules[CasinoRulesKeys.doubling] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                casinoRules[CasinoRulesKeys.hitSplitAces] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                casinoRules[CasinoRulesKeys.splitsNumber] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                casinoRules[CasinoRulesKeys.surrender] ||\r\n            props.gameConfig.isDealerAnimationEnabled !== isDealerAnimationEnabled ||\r\n            props.gameConfig.isSoundEnabled !== isSoundEnabled ||\r\n            getObjectKeys(props.gameConfig.selectedHands).some(\r\n                (key) => props.gameConfig.selectedHands[key] !== selectedHands[key]\r\n            ) ||\r\n            props.gameConfig.selectedHandsOnly !== selectedHandsOnly ||\r\n            props.gameConfig.untrainedPairsPriority !== untrainedPairsPriority);\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            style={{\r\n                flexGrow: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.basicStrategyTable}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 8,\r\n                    paddingHorizontal: 16,\r\n                    paddingVertical: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={splitColor}\r\n                    isEnabled={true}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.basicStrategyTable);\r\n                    }}\r\n                    text=\"Basic strategy table\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                {isProgressBlocked && (\r\n                    <Text\r\n                        style={{\r\n                            color: warningColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingTop: 16\r\n                        }}\r\n                    >\r\n                        ⚠️ Selected hands are blocking progress. Modify the selection or disable\r\n                        Selected hands to complete your training\r\n                    </Text>\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.casinoRules}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Casino rules\r\n                </Text>\r\n                <Divider />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.blackjackPeek}\r\n                >\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.blackjackPeek);\r\n                        }}\r\n                    />\r\n                </RuleSwitcher>\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                />\r\n\r\n                <DoublingPicker casinoRules={casinoRules} onValueChange={casinoRuleChangeHandler} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.hitSplitAces}\r\n                >\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.hitSplitAces);\r\n                        }}\r\n                    />\r\n                </RuleSwitcher>\r\n\r\n                <SplitsNumberPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.appSettings}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    App settings\r\n                </Text>\r\n                <Divider />\r\n\r\n                <Switcher\r\n                    label=\"Dealer cards animation\"\r\n                    onValueChange={setIsDealerAnimationEnabled}\r\n                    value={isDealerAnimationEnabled}\r\n                />\r\n\r\n                <Switcher\r\n                    disabled={props.trainingStatus.isCompleted}\r\n                    label=\"Untrained pairs priority\"\r\n                    onValueChange={setUntrainedPairsPriority}\r\n                    value={!props.trainingStatus.isCompleted && untrainedPairsPriority}\r\n                >\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.untrainedPairsPriority);\r\n                        }}\r\n                    />\r\n                </Switcher>\r\n\r\n                <Switcher\r\n                    label=\"Selected hands only\"\r\n                    onValueChange={(value) => {\r\n                        setSelectedHandsOnly(value);\r\n                        isProgressBlockedHandler({\r\n                            nextSelectedHandsOnly: value\r\n                        });\r\n                    }}\r\n                    value={selectedHandsOnly}\r\n                />\r\n\r\n                {selectedHandsOnly && (\r\n                    <View\r\n                        style={{\r\n                            borderLeftColor: 'white',\r\n                            borderLeftWidth: 2,\r\n                            flexDirection: 'row',\r\n                            flexWrap: 'wrap',\r\n                            marginLeft: 16,\r\n                            marginTop: 16\r\n                        }}\r\n                    >\r\n                        <TouchableOpacity\r\n                            onPress={() => {\r\n                                const nextSelectedHands = Object.values(HandCode).reduce(\r\n                                    (hands, handCode) => ({ ...hands, [handCode]: true }),\r\n                                    {}\r\n                                ) as Dictionary<boolean, HandCode>;\r\n                                setSelectedHands(nextSelectedHands);\r\n                                isProgressBlockedHandler({\r\n                                    nextSelectedHands\r\n                                });\r\n                            }}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                backgroundColor: doubleColor,\r\n                                marginBottom: 8,\r\n                                marginLeft: '2%',\r\n                                paddingVertical: 4,\r\n                                width: '48%'\r\n                            }}\r\n                        >\r\n                            <Text\r\n                                style={{\r\n                                    color: 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Select all\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n\r\n                        <TouchableOpacity\r\n                            onPress={() => {\r\n                                const nextSelectedHands = Object.values(HandCode).reduce(\r\n                                    (hands, handCode) => ({ ...hands, [handCode]: false }),\r\n                                    {}\r\n                                ) as Dictionary<boolean, HandCode>;\r\n                                setSelectedHands(nextSelectedHands);\r\n                                isProgressBlockedHandler({\r\n                                    nextSelectedHands\r\n                                });\r\n                            }}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                backgroundColor: doubleColor,\r\n                                marginBottom: 8,\r\n                                marginLeft: '2%',\r\n                                paddingVertical: 4,\r\n                                width: '48%'\r\n                            }}\r\n                        >\r\n                            <Text\r\n                                style={{\r\n                                    color: 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Unselect all\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n\r\n                        {Object.values(trainingHands).map((trainingHand) => (\r\n                            <TouchableOpacity\r\n                                key={trainingHand.name}\r\n                                onPress={() => {\r\n                                    const nextSelectedHands = {\r\n                                        ...selectedHands,\r\n                                        [trainingHand.code]: !selectedHands[trainingHand.code]\r\n                                    };\r\n                                    setSelectedHands(nextSelectedHands);\r\n                                    isProgressBlockedHandler({\r\n                                        nextSelectedHands\r\n                                    });\r\n                                }}\r\n                                style={{\r\n                                    alignItems: 'center',\r\n                                    backgroundColor: selectedHands[trainingHand.code]\r\n                                        ? standColor\r\n                                        : undefined,\r\n                                    paddingVertical: 4,\r\n                                    width: '33.33%'\r\n                                }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20\r\n                                    }}\r\n                                >\r\n                                    {trainingHand.name}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                )}\r\n\r\n                <Switcher\r\n                    label=\"Sound effects 🔊\"\r\n                    onValueChange={setIsSoundEnabled}\r\n                    value={isSoundEnabled}\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16,\r\n                    paddingTop: 24\r\n                }}\r\n            >\r\n                {!isSomeHandSelected(selectedHandsOnly, selectedHands) && (\r\n                    <Text\r\n                        style={{\r\n                            color: warningColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingBottom: 16\r\n                        }}\r\n                    >\r\n                        Some hand must be selected to save the changes\r\n                    </Text>\r\n                )}\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={isSaveButtonEnabled}\r\n                    marginBottom={40}\r\n                    onPress={saveHandler}\r\n                    text=\"Save\"\r\n                    width=\"100%\"\r\n                />\r\n\r\n                <Divider />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={props.phase === Phases.finished}\r\n                    marginTop={40}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.onboarding);\r\n                    }}\r\n                    text=\"Onboarding\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.resetTraining}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 16,\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={dangerColor}\r\n                    isEnabled={true}\r\n                    marginTop={8}\r\n                    onPress={() => {\r\n                        const title = 'Reset training';\r\n                        const body =\r\n                            'Resetting the training will mark all hands as untrained, ' +\r\n                            'setting the progress and precision indicators to 0%, ' +\r\n                            'and set the player earnings to 0$ as well. ' +\r\n                            'Are you sure you want to reset the training?';\r\n\r\n                        if (Platform.OS === 'web') {\r\n                            const response = window.confirm(body);\r\n                            if (response) {\r\n                                props.resetTrainingStatus();\r\n                            }\r\n                        } else {\r\n                            Alert.alert(title, body, [\r\n                                {\r\n                                    text: 'Cancel',\r\n                                    style: 'cancel'\r\n                                },\r\n                                {\r\n                                    text: 'Reset',\r\n                                    onPress: props.resetTrainingStatus\r\n                                }\r\n                            ]);\r\n                        }\r\n                    }}\r\n                    text=\"Reset training\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport { Dimensions, View } from 'react-native';\r\nimport { LineChart } from 'react-native-chart-kit';\r\nimport { Button } from '../components/button';\r\nimport { colors, tableColor } from '../constants';\r\nimport { BaseDecisions, Player } from '../types';\r\nimport { getAbsoluteMax, getPrimeFactors } from '../utils';\r\n\r\ntype ChartDimensions = {\r\n    boundaries: number;\r\n    scale: number;\r\n    width: number;\r\n};\r\n\r\ntype ChartPage = {\r\n    index: number;\r\n    data: number[];\r\n};\r\n\r\ninterface EarningsChartProps {\r\n    earningsHistorical: Player['earningsHistorical'];\r\n}\r\n\r\nconst chartDeadSpace = 16;\r\nconst pageSize = 20;\r\nconst screenHorizontalMargin = 8;\r\n\r\nconst getChartDimensions = (data: number[]): ChartDimensions => {\r\n    const absoluteMax = getAbsoluteMax(data);\r\n    const primeFactors = data.length > 0 ? getPrimeFactors(absoluteMax) : [2];\r\n    const scale = 2 * Math.min(primeFactors[0], 6);\r\n    const windowWidth = Dimensions.get('window').width;\r\n\r\n    return {\r\n        boundaries: absoluteMax,\r\n        scale,\r\n        width: windowWidth - screenHorizontalMargin * 2\r\n    };\r\n};\r\n\r\nconst getCurrentPage = (data: number[], nextIndex: number | undefined): ChartPage => {\r\n    nextIndex = nextIndex === undefined ? (data.length > 0 ? data.length - 1 : 0) : nextIndex;\r\n    const nextData = data.slice(\r\n        Math.max(0, nextIndex - pageSize),\r\n        Math.min(Math.max(0, nextIndex + 1), data.length)\r\n    );\r\n\r\n    return {\r\n        data: nextData,\r\n        index: nextIndex\r\n    };\r\n};\r\n\r\nconst getFormattedData = (data: number[], dimensions: ChartDimensions) => {\r\n    const boundaryDots =\r\n        data.length > 0\r\n            ? [data[data.length - 1], dimensions.boundaries, -dimensions.boundaries]\r\n            : [];\r\n\r\n    const dotWidth = data.length > 0 ? dimensions.width / data.length : dimensions.width;\r\n    const boundaryDotsWidth = dotWidth * boundaryDots.length;\r\n\r\n    return {\r\n        chartWidth: dimensions.width + boundaryDotsWidth + chartDeadSpace,\r\n        source: data.length > 0 ? data.concat(boundaryDots) : [0]\r\n    };\r\n};\r\n\r\nexport const EarningsChart: React.FC<EarningsChartProps> = (props) => {\r\n    const dimensions = useMemo(() => getChartDimensions(props.earningsHistorical), [\r\n        props.earningsHistorical\r\n    ]);\r\n    const [page, setPage] = useState(() => getCurrentPage(props.earningsHistorical, undefined));\r\n    const formattedData = useMemo(() => getFormattedData(page.data, dimensions), [\r\n        dimensions,\r\n        page\r\n    ]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                marginHorizontal: screenHorizontalMargin,\r\n                overflow: 'hidden'\r\n            }}\r\n        >\r\n            <LineChart\r\n                chartConfig={{\r\n                    backgroundGradientFrom: tableColor,\r\n                    backgroundGradientTo: tableColor,\r\n                    color: () => `rgb(255, 255, 255)`,\r\n                    decimalPlaces: 1,\r\n                    linejoinType: 'bevel',\r\n                    propsForLabels: {\r\n                        fontSize: 16\r\n                    }\r\n                }}\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: formattedData.source\r\n                        }\r\n                    ],\r\n                    labels: []\r\n                }}\r\n                height={300}\r\n                segments={dimensions.scale}\r\n                style={{ marginLeft: -chartDeadSpace }}\r\n                width={formattedData.chartWidth}\r\n                withVerticalLines={false}\r\n            />\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={page.index >= pageSize}\r\n                    onPress={() => {\r\n                        if (page.index >= pageSize) {\r\n                            setPage(\r\n                                getCurrentPage(props.earningsHistorical, page.index - pageSize)\r\n                            );\r\n                        }\r\n                    }}\r\n                    text=\"Previous\"\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={page.index < props.earningsHistorical.length - 1}\r\n                    onPress={() => {\r\n                        if (page.index < props.earningsHistorical.length - 1) {\r\n                            setPage(\r\n                                getCurrentPage(props.earningsHistorical, page.index + pageSize)\r\n                            );\r\n                        }\r\n                    }}\r\n                    text=\"Next\"\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { HandDecisionSet } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ninterface HandDecisionsTableProps {\r\n    handDecisionSet: HandDecisionSet;\r\n}\r\n\r\nexport const HandDecisionsTable: React.FC<HandDecisionsTableProps> = (props) => (\r\n    <View style={{ width: '100%' }}>\r\n        {getObjectKeys(props.handDecisionSet).map((simpleCardSymbol) => {\r\n            return (\r\n                <View key={simpleCardSymbol} style={{ flexDirection: 'row', width: '100%' }}>\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            paddingTop: 12,\r\n                            textAlign: 'center',\r\n                            width: '15%'\r\n                        }}\r\n                    >\r\n                        {simpleCardSymbol}\r\n                    </Text>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: colors[props.handDecisionSet[simpleCardSymbol]],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            marginTop: 8,\r\n                            paddingVertical: 4,\r\n                            paddingHorizontal: 8,\r\n                            textAlign: 'center',\r\n                            width: '85%'\r\n                        }}\r\n                    >\r\n                        {props.handDecisionSet[simpleCardSymbol]}\r\n                    </Text>\r\n                </View>\r\n            );\r\n        })}\r\n    </View>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getHandRangesNumber, handDecisionSetGetters } from '../logic/hand-decision-set';\r\nimport { AppRoute, CasinoRules, CasinoRulesKeys, RouteNames } from '../types';\r\n\r\ntype HandDecisionsProps = {\r\n    casinoRules: CasinoRules;\r\n    route: AppRoute<RouteNames.handDecisions>;\r\n};\r\n\r\nexport const HandDecisions: React.FC<HandDecisionsProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n\r\n    const trainingHand = props.route.params['trainingHand'];\r\n    const handDecisionSet = handDecisionSetGetters[trainingHand.code](casinoRules);\r\n\r\n    return (\r\n        <ScrollView\r\n            style={{\r\n                flex: 1,\r\n                paddingHorizontal: 16,\r\n                marginVertical: 16,\r\n                width: '100%'\r\n            }}\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between',\r\n                    paddingBottom: 16,\r\n                    width: '100%'\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 24 }}>{trainingHand.name} decisions</Text>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20\r\n                    }}\r\n                >\r\n                    Ranges: {getHandRangesNumber(handDecisionSet)}\r\n                </Text>\r\n            </View>\r\n\r\n            <HandDecisionsTable handDecisionSet={handDecisionSet} />\r\n\r\n            {trainingHand.dependencies.map((dependency) => {\r\n                return dependency === CasinoRulesKeys.doubling ? (\r\n                    <DoublingPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        onValueChange={setCasinoRules}\r\n                    />\r\n                ) : dependency === CasinoRulesKeys.splitsNumber ? (\r\n                    <SplitsNumberPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        onValueChange={setCasinoRules}\r\n                    />\r\n                ) : (\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        onValueChange={setCasinoRules}\r\n                        ruleName={dependency}\r\n                    />\r\n                );\r\n            })}\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { createCard } from '../logic/card';\r\nimport { CardSuit, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const HitSplitAces: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Hit split aces\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Hitting split aces is usually not allowed. On this scenario, one single card\r\n                    will be dealt to each hand after splitting the aces and player's turn will be\r\n                    terminated.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    If another ace is dealt to any of the hands and re-splitting aces is allowed,\r\n                    the player can decide to split aces again or to stand.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.diamonds)\r\n                        ],\r\n                        values: [2, 12]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={true}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [createCard(SimpleCardSymbol.Ace, CardSuit.hearts)],\r\n                        values: [1, 11]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Note that an ace and ten value card after a split are counted as a non-blackjack\r\n                    21:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.spades)\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.hearts),\r\n                            createCard(SpecialCardSymbol.King, CardSuit.diamonds)\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairRepresentation\r\n} from '../types';\r\n\r\ntype MissedPairsProps = {\r\n    gameConfig: GameConfig;\r\n    missedTrainingPairs: TrainingPairRepresentation[];\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nconst boldTextProperties: StyleProp<TextStyle> = {\r\n    ...textProperties,\r\n    fontWeight: 'bold'\r\n};\r\n\r\nexport const MissedPairs: React.FC<MissedPairsProps> = (props) => {\r\n    return (\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.missedPairs}\r\n            onBoardingStep={props.onBoardingStep}\r\n            style={{ alignItems: undefined, flex: 1 }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Missed pairs\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{ flexGrow: 1 }}\r\n            >\r\n                {props.missedTrainingPairs.length === 0 ? (\r\n                    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>\r\n                        <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                            No missed pairs so far. Nice job!\r\n                        </Text>\r\n                    </View>\r\n                ) : (\r\n                    Object.values(props.missedTrainingPairs).map((missedTrainingPair) => {\r\n                        const handName = props.trainingHands[missedTrainingPair.handCode].name;\r\n\r\n                        return (\r\n                            <View\r\n                                key={\r\n                                    missedTrainingPair.handCode +\r\n                                    '-' +\r\n                                    missedTrainingPair.dealerSymbol\r\n                                }\r\n                                style={{ marginBottom: 16, width: '100%' }}\r\n                            >\r\n                                <View\r\n                                    style={{\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row',\r\n                                        justifyContent: 'space-between'\r\n                                    }}\r\n                                >\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            marginBottom: 16\r\n                                        }}\r\n                                    >\r\n                                        <Text style={boldTextProperties}>{handName}</Text>\r\n                                        <Text style={textProperties}> vs </Text>\r\n                                        <Text style={boldTextProperties}>\r\n                                            {missedTrainingPair.dealerSymbol}\r\n                                        </Text>\r\n                                    </View>\r\n                                    <View\r\n                                        style={{\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        <TouchableOpacity\r\n                                            onPress={\r\n                                                props.onBoardingStep > -1 ||\r\n                                                props.phase !== Phases.finished\r\n                                                    ? undefined\r\n                                                    : () => {\r\n                                                          const trainingPair = getSpecificTrainingPair(\r\n                                                              missedTrainingPair.handCode,\r\n                                                              missedTrainingPair.dealerSymbol,\r\n                                                              props.gameConfig.casinoRules\r\n                                                          );\r\n                                                          props.startTrainingRound(\r\n                                                              trainingPair.player,\r\n                                                              trainingPair.dealer\r\n                                                          );\r\n                                                          props.navigation.navigate(\r\n                                                              RouteNames.table\r\n                                                          );\r\n                                                      }\r\n                                            }\r\n                                        >\r\n                                            <Text\r\n                                                style={{\r\n                                                    backgroundColor: doubleColor,\r\n                                                    borderRadius: 16,\r\n                                                    color: 'white',\r\n                                                    fontSize: 20,\r\n                                                    marginBottom: 16,\r\n                                                    paddingHorizontal: 16,\r\n                                                    paddingVertical: 4,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                Train ➡️\r\n                                            </Text>\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                </View>\r\n                                <Divider />\r\n                            </View>\r\n                        );\r\n                    })\r\n                )}\r\n            </ScrollView>\r\n        </OnBoardingSection>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { doubleColor, hitColor } from '../constants';\r\nimport { CardSuit } from '../types';\r\n\r\ninterface OnboardingProps {\r\n    skipOnboardingHandler: () => void;\r\n    startOnboardingHandler: () => void;\r\n}\r\n\r\nexport const Onboarding: React.FC<OnboardingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Welcome to\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 30,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    {CardSuit.clubs}\r\n                    {CardSuit.hearts} Blackjump {CardSuit.diamonds}\r\n                    {CardSuit.spades}\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        paddingBottom: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    The app that will help you master Blackjack basic strategy\r\n                </Text>\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={true}\r\n                    onPress={props.startOnboardingHandler}\r\n                    text=\"Start onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={true}\r\n                    marginTop={16}\r\n                    onPress={props.skipOnboardingHandler}\r\n                    text=\"Skip onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { createCard, getRandomCard, getRandomSuit } from '../logic/card';\r\nimport { createDealerHand, createHand } from '../logic/hand';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { getUntrainedTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingStepEvent,\r\n    Phases,\r\n    PlayerDecisions,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { Button } from './button';\r\n\r\nexport interface ActionsProps {\r\n    gameConfig: GameConfig;\r\n    handlers: {\r\n        double: () => void;\r\n        hit: () => void;\r\n        split: () => void;\r\n        stand: () => void;\r\n        surrender: () => void;\r\n    };\r\n    isDoubleEnabled: boolean;\r\n    isHitEnabled: boolean;\r\n    isSplitEnabled: boolean;\r\n    isSurrenderEnabled: boolean;\r\n    phase: Phases;\r\n    onBoardingStep: number;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n}\r\n\r\nexport const Actions: React.FC<ActionsProps> = (props) => {\r\n    const isPlayerTurn = props.phase === Phases.player;\r\n\r\n    const isDoublingAvailable =\r\n        props.gameConfig.casinoRules[CasinoRulesKeys.doubling] > Doubling.none;\r\n    const isSurrenderAvailable = props.gameConfig.casinoRules[CasinoRulesKeys.surrender];\r\n\r\n    const activeOptionalButtons = 1 + Number(isDoublingAvailable) + Number(isSurrenderAvailable);\r\n    const optionalButtonsWidth = Math.floor((100 * 100) / activeOptionalButtons) / 100;\r\n\r\n    return props.phase === Phases.finished ? (\r\n        <Button\r\n            height={112}\r\n            backgroundColor={colors[BaseDecisions.hit]}\r\n            isEnabled={true}\r\n            onPress={() => {\r\n                let dealerHand: Hand;\r\n                let playerHand: Hand;\r\n\r\n                if (\r\n                    onBoardingSteps[props.onBoardingStep] &&\r\n                    onBoardingSteps[props.onBoardingStep].event === OnBoardingStepEvent.startRound\r\n                ) {\r\n                    /* Prevent dealing a Blackjack as initial hand when onboarding is active */\r\n                    playerHand = createHand([\r\n                        createCard(SimpleCardSymbol.Seven, getRandomSuit()),\r\n                        getRandomCard()\r\n                    ]);\r\n                    dealerHand = createDealerHand(\r\n                        props.gameConfig.casinoRules,\r\n                        SimpleCardSymbol.Six,\r\n                        getRandomSuit()\r\n                    );\r\n                } else if (\r\n                    props.gameConfig.untrainedPairsPriority ||\r\n                    props.gameConfig.selectedHandsOnly\r\n                ) {\r\n                    const trainingPair = getUntrainedTrainingPair(\r\n                        props.trainingHands,\r\n                        props.trainingProgress,\r\n                        props.gameConfig\r\n                    );\r\n                    playerHand = trainingPair.player;\r\n                    dealerHand = trainingPair.dealer;\r\n                } else {\r\n                    playerHand = createHand([getRandomCard(), getRandomCard()]);\r\n                    dealerHand = createDealerHand(props.gameConfig.casinoRules);\r\n                }\r\n\r\n                props.startTrainingRound(playerHand, dealerHand);\r\n            }}\r\n            text=\"Random\"\r\n            width=\"100%\"\r\n        />\r\n    ) : (\r\n        <React.Fragment>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={isPlayerTurn && props.isHitEnabled}\r\n                    onPress={props.handlers.hit}\r\n                    text={BaseDecisions.hit}\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={isPlayerTurn}\r\n                    onPress={props.handlers.stand}\r\n                    text={BaseDecisions.stand}\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[PlayerDecisions.split]}\r\n                    isEnabled={isPlayerTurn && props.isSplitEnabled}\r\n                    onPress={props.handlers.split}\r\n                    text={PlayerDecisions.split}\r\n                    width={`${optionalButtonsWidth}%`}\r\n                />\r\n                {isDoublingAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.double]}\r\n                        isEnabled={isPlayerTurn && props.isDoubleEnabled}\r\n                        onPress={props.handlers.double}\r\n                        text={PlayerDecisions.double}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n                {isSurrenderAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.surrender]}\r\n                        isEnabled={isPlayerTurn && props.isSurrenderEnabled}\r\n                        onPress={props.handlers.surrender}\r\n                        text={PlayerDecisions.surrender}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n            </View>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { dangerColor, splitColor } from '../constants';\r\nimport { DecisionEvaluation } from '../types';\r\n\r\ninterface DecisionEvaluationProps {\r\n    decisionEvaluation: DecisionEvaluation;\r\n    showDecisionsHandler?: () => void;\r\n}\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nconst boldTextProperties: StyleProp<TextStyle> = {\r\n    ...textProperties,\r\n    fontWeight: 'bold'\r\n};\r\n\r\nexport const DecisionEvaluationComponent: React.FC<DecisionEvaluationProps> = (props) => (\r\n    <View\r\n        style={{\r\n            alignItems: 'center',\r\n            backgroundColor: props.decisionEvaluation.isHit ? splitColor : dangerColor,\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            width: '100%'\r\n        }}\r\n    >\r\n        {props.decisionEvaluation.isHit ? (\r\n            <Text style={textProperties}>Well done</Text>\r\n        ) : (\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'center',\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                <Text style={boldTextProperties}>{props.decisionEvaluation.handName}</Text>\r\n                <Text style={textProperties}> vs </Text>\r\n                <Text style={boldTextProperties}>{props.decisionEvaluation.dealerSymbol}</Text>\r\n                <Text style={textProperties}> = </Text>\r\n                <Text style={boldTextProperties}>{props.decisionEvaluation.dynamicDecision}</Text>\r\n\r\n                <TouchableOpacity onPress={props.showDecisionsHandler} style={{ marginTop: 8 }}>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: 'white',\r\n                            borderRadius: 16,\r\n                            color: dangerColor,\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 16,\r\n                            paddingVertical: 2,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.decisionEvaluation.handName} decisions ➡️\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )}\r\n    </View>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { Actions, ActionsProps } from '../components/actions';\r\nimport { DecisionEvaluationComponent } from '../components/decision-evaluation';\r\nimport { Divider } from '../components/divider';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    Player,\r\n    RouteNames,\r\n    TrainingHands\r\n} from '../types';\r\n\r\ntype TableProps = ActionsProps & {\r\n    dealerHand?: Hand;\r\n    decisionEvaluation?: DecisionEvaluation;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    peeking: boolean;\r\n    phase: Phases;\r\n    player: Player;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const Table: React.FC<TableProps> = (props) => (\r\n    <React.Fragment>\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableDealerHand}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ minHeight: 128, justifyContent: 'center' }}\r\n            >\r\n                {props.dealerHand && (\r\n                    <HandComponent\r\n                        hand={props.dealerHand}\r\n                        handsNumber={1}\r\n                        isCurrentHand={props.phase === Phases.dealer}\r\n                        isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                        navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\r\n                        peeking={props.peeking}\r\n                    />\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableFeedback}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ height: 80, justifyContent: 'center', width: '100%' }}\r\n            >\r\n                <Divider />\r\n                {props.decisionEvaluation ? (\r\n                    <DecisionEvaluationComponent\r\n                        decisionEvaluation={props.decisionEvaluation}\r\n                        showDecisionsHandler={\r\n                            props.onBoardingStep > -1\r\n                                ? undefined\r\n                                : () => {\r\n                                      props.navigation.navigate(RouteNames.handDecisions, {\r\n                                          trainingHand:\r\n                                              props.trainingHands[props.player.lastActionHand!]\r\n                                      });\r\n                                  }\r\n                        }\r\n                    />\r\n                ) : (\r\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingHorizontal: 8,\r\n                                paddingTop: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            Dealer must draw to 16\r\n                        </Text>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingBottom: 8,\r\n                                paddingHorizontal: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            and stand on{' '}\r\n                            {props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                                ? 'hard 17'\r\n                                : 'all 17s'}\r\n                        </Text>\r\n                    </View>\r\n                )}\r\n                <Divider />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tablePlayerHands}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ flex: 1 }}\r\n            >\r\n                <ScrollView\r\n                    contentContainerStyle={{\r\n                        flexGrow: 1,\r\n                        justifyContent: 'space-evenly'\r\n                    }}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {props.player.hands.map((hand, index) => (\r\n                        <HandComponent\r\n                            hand={hand}\r\n                            handsNumber={props.player.hands.length}\r\n                            isCurrentHand={\r\n                                props.phase === Phases.player && index === props.player.handIndex\r\n                            }\r\n                            isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                            key={index}\r\n                            navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\r\n                        />\r\n                    ))}\r\n                </ScrollView>\r\n            </OnBoardingSection>\r\n        </View>\r\n\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.tableActions}\r\n            onBoardingStep={props.onBoardingStep}\r\n        >\r\n            <Actions\r\n                gameConfig={props.gameConfig}\r\n                handlers={props.handlers}\r\n                isDoubleEnabled={props.isDoubleEnabled}\r\n                isHitEnabled={props.isHitEnabled}\r\n                isSplitEnabled={props.isSplitEnabled}\r\n                isSurrenderEnabled={props.isSurrenderEnabled}\r\n                phase={props.phase}\r\n                onBoardingStep={props.onBoardingStep}\r\n                startTrainingRound={props.startTrainingRound}\r\n                trainingHands={props.trainingHands}\r\n                trainingProgress={props.trainingProgress}\r\n            />\r\n        </OnBoardingSection>\r\n    </React.Fragment>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\n\r\nexport const TrainingCompleted: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingTop: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training completed\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 64, marginVertical: 32 }}>🎉🍾</Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 24, marginBottom: 32 }}>\r\n                    Congratulations! You have trained every possible training pair. You can now test\r\n                    your skills in a real casino 💸💸\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, fontStyle: 'italic' }}>\r\n                    Master the Basic Strategy: reset the training stats from the configuration menu\r\n                    and keep practicing until you miss no pairs at all\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor, untrainedColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype TrainingPairsProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n};\r\n\r\nexport const TrainingPairs: React.FC<TrainingPairsProps> = (props) => {\r\n    const [unfoldedHand, setUnfoldedHand] = useState<HandCode | undefined>(HandCode.Hard5);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training pairs\r\n                </Text>\r\n            </OnBoardingSection>\r\n            <ScrollView\r\n                style={{\r\n                    flex: 1\r\n                }}\r\n                contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            >\r\n                {getObjectKeys(props.trainingProgress).map((handCode) => {\r\n                    const trainingHandStatus = props.trainingProgress[handCode];\r\n                    const handName = props.trainingHands[handCode].name;\r\n\r\n                    return (\r\n                        <OnBoardingSection\r\n                            isHighlighted={unfoldedHand === handCode}\r\n                            key={handCode}\r\n                            onBoardingStep={props.onBoardingStep}\r\n                            style={{ paddingVertical: 8, paddingHorizontal: 16, width: '100%' }}\r\n                        >\r\n                            <TouchableOpacity\r\n                                onPress={() => {\r\n                                    setUnfoldedHand(\r\n                                        unfoldedHand !== handCode ? handCode : undefined\r\n                                    );\r\n                                }}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20,\r\n                                        marginBottom: 16,\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {handName}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            {unfoldedHand && unfoldedHand === handCode && (\r\n                                <React.Fragment>\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            justifyContent: 'space-around',\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        {getObjectKeys(trainingHandStatus).map((dealerSymbol) => {\r\n                                            const backgroundColor =\r\n                                                trainingHandStatus[dealerSymbol] ===\r\n                                                TrainingPairStatus.untrained\r\n                                                    ? untrainedColor\r\n                                                    : trainingHandStatus[dealerSymbol] ===\r\n                                                      TrainingPairStatus.passed\r\n                                                    ? 'lightgreen'\r\n                                                    : 'lightcoral';\r\n\r\n                                            return (\r\n                                                <TouchableOpacity\r\n                                                    key={dealerSymbol}\r\n                                                    onPress={\r\n                                                        props.onBoardingStep > -1 ||\r\n                                                        props.phase !== Phases.finished\r\n                                                            ? undefined\r\n                                                            : () => {\r\n                                                                  const trainingPair = getSpecificTrainingPair(\r\n                                                                      handCode,\r\n                                                                      dealerSymbol,\r\n                                                                      props.gameConfig.casinoRules\r\n                                                                  );\r\n                                                                  props.startTrainingRound(\r\n                                                                      trainingPair.player,\r\n                                                                      trainingPair.dealer\r\n                                                                  );\r\n                                                                  props.navigation.navigate(\r\n                                                                      RouteNames.table\r\n                                                                  );\r\n                                                              }\r\n                                                    }\r\n                                                    style={{\r\n                                                        alignItems: 'center',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        borderRadius: 8,\r\n                                                        marginBottom: 8,\r\n                                                        paddingVertical: 4,\r\n                                                        width: '18%'\r\n                                                    }}\r\n                                                >\r\n                                                    <Text\r\n                                                        style={{\r\n                                                            color: 'white',\r\n                                                            fontSize: 20,\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        {dealerSymbol}\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                            );\r\n                                        })}\r\n                                    </View>\r\n                                    <TouchableOpacity\r\n                                        onPress={\r\n                                            props.onBoardingStep > -1\r\n                                                ? undefined\r\n                                                : () => {\r\n                                                      props.navigation.navigate(\r\n                                                          RouteNames.handDecisions,\r\n                                                          {\r\n                                                              trainingHand:\r\n                                                                  props.trainingHands[handCode]\r\n                                                          }\r\n                                                      );\r\n                                                  }\r\n                                        }\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                backgroundColor: doubleColor,\r\n                                                borderRadius: 16,\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginVertical: 16,\r\n                                                marginHorizontal: 24,\r\n                                                paddingVertical: 4,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName} decisions ➡️\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                </React.Fragment>\r\n                            )}\r\n                            <Divider />\r\n                        </OnBoardingSection>\r\n                    );\r\n                })}\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { CardComponent } from '../components/card-component';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { createCard } from '../logic/card';\r\nimport { CardSuit, Hand, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const UntrainedPairsPriority: React.FC = () => {\r\n    const hardNine: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            createCard(SimpleCardSymbol.Five, CardSuit.clubs),\r\n            createCard(SimpleCardSymbol.Four, CardSuit.hearts)\r\n        ],\r\n        values: [9]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Untrained pairs priority\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20 }}>\r\n                    Prioritizes untrained/missed pairs instead of dealing random cards (a training\r\n                    pair consists of a player hand and a dealer up card). When enabling Untrained\r\n                    pairs priority:\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • Non-random cards will be dealt. Non-random cards are golden and have a square\r\n                    instead of a suit\r\n                </Text>\r\n\r\n                <View style={{ alignItems: 'center', marginTop: 16 }}>\r\n                    <CardComponent\r\n                        card={createCard(SimpleCardSymbol.Eight)}\r\n                        isSoundEnabled={false}\r\n                        skipAnimation={true}\r\n                    />\r\n                </View>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • Each time you start training a random pair you will be dealt an\r\n                    untrained/missed hand against the corresponding dealer up card\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 24 }}>\r\n                    • Each time you Hit or Split a hand you might be dealt a card that turns your\r\n                    current hand into an untrained/missed pair\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardNine}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    Hit\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [...hardNine.cards, createCard(SimpleCardSymbol.Ace)],\r\n                        values: [10, 20]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [...hardNine.cards, createCard(SimpleCardSymbol.Ten)],\r\n                        values: [20]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontStyle: 'italic',\r\n                        marginTop: 24\r\n                    }}\r\n                >\r\n                    You still will be dealt a random card when no untrained/missed pairs can be\r\n                    reached from your current hand or when the risk of busting your current hand is\r\n                    greater than 0\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • You will never be dealt a hand that requires no actions (i.e. a Blackjack or\r\n                    21)\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.spades),\r\n                            createCard(SpecialCardSymbol.Jack, CardSuit.hearts)\r\n                        ],\r\n                        values: [11, 21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • When you complete the training (i.e. reach 100% progress), Untrained pairs\r\n                    priority will be automatically disabled\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Audio } from 'expo-av';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\r\nimport hitSoundMp3 from '../assets/hit.mp3';\r\nimport missSoundMp3 from '../assets/miss.mp3';\r\nimport {\r\n    getGameConfig,\r\n    getHasCompletedOnboarding,\r\n    getPlayerEarnings,\r\n    getPlayerEarningsHistorical,\r\n    getTrainingProgress,\r\n    updateGameConfig,\r\n    updateHasCompletedOnboarding,\r\n    updatePlayerEarnings,\r\n    updatePlayerEarningsHistorical,\r\n    updateTrainingProgress\r\n} from './async-storage';\r\nimport { NavBar } from './components/nav-bar';\r\nimport { OnboardingBar } from './components/onboarding-bar';\r\nimport { tableColor } from './constants';\r\nimport { handleDealerTurn } from './logic/app-state';\r\nimport { evaluateDecision } from './logic/basic-strategy';\r\nimport { getRandomCard, symbolToSimpleSymbol } from './logic/card';\r\nimport { getDefaultGameConfig } from './logic/game-config';\r\nimport {\r\n    canBeDealerBlackjack,\r\n    canDouble,\r\n    canHit,\r\n    canSplit,\r\n    canSurrender,\r\n    isDealerBlackjack,\r\n    isFinished,\r\n    revealDealerHoleCard\r\n} from './logic/hand';\r\nimport { handToHandCode } from './logic/hand';\r\nimport { onBoardingSteps } from './logic/onboarding';\r\nimport {\r\n    createPlayer,\r\n    doubleCurrentHand,\r\n    getCurrentHand,\r\n    hitCurrentHand,\r\n    initializeHands,\r\n    isLastHand,\r\n    splitCurrentHand,\r\n    standCurrentHand,\r\n    startNextHand,\r\n    surrenderCurrentHand\r\n} from './logic/player';\r\nimport { getDefaultTrainingHands, getTrainingHands } from './logic/training-hand';\r\nimport {\r\n    getDefaultTrainingStatus,\r\n    getIsProgressBlocked,\r\n    getNextTrainingStatus,\r\n    retrieveTrainingStatus\r\n} from './logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    initialRouteName,\r\n    OnBoardingStepEvent,\r\n    Phases,\r\n    Player,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    RouteNames,\r\n    RouteParams,\r\n    TrainingStatus\r\n} from './types';\r\nimport { playSound } from './utils';\r\nimport { BasicStrategyTable } from './views/basic-strategy-table';\r\nimport { BlackjackPeek } from './views/blackjack-peek';\r\nimport { ConfigMenu } from './views/config-menu';\r\nimport { EarningsChart } from './views/earnings-chart';\r\nimport { HandDecisions } from './views/hand-decisions';\r\nimport { HitSplitAces } from './views/hit-split-aces';\r\nimport { MissedPairs } from './views/missed-pairs';\r\nimport { Onboarding } from './views/onboarding';\r\nimport { Table } from './views/table';\r\nimport { TrainingCompleted } from './views/training-completed';\r\nimport { TrainingPairs } from './views/training-pairs';\r\nimport { UntrainedPairsPriority } from './views/untrained-pairs-priority';\r\n\r\nconst Stack = createStackNavigator<RouteParams>();\r\nlet navigationListener: Function | undefined;\r\n\r\nconst initializeSounds = () =>\r\n    Promise.all([Audio.Sound.createAsync(hitSoundMp3), Audio.Sound.createAsync(missSoundMp3)])\r\n        .then((results) => ({\r\n            hit: results[0].sound,\r\n            miss: results[1].sound\r\n        }))\r\n        .catch((errors) => {\r\n            console.log(errors);\r\n            /* Failing to load audio is not a critical issue */\r\n            return undefined;\r\n        });\r\n\r\nexport const BlackJump: React.FC = () => {\r\n    const [currentRoute, setCurrentRoute] = useState<string>(initialRouteName);\r\n    const [dealerHand, setDealerHand] = useState<Hand>();\r\n    const [decisionEvaluation, setDecisionEvaluation] = useState<DecisionEvaluation>();\r\n    const [decisionEvaluationTimeout, setDecisionEvaluationTimeout] = useState(0);\r\n    const [gameConfig, setGameConfig] = useState(getDefaultGameConfig());\r\n    const [onBoardingStep, setOnBoardingStep] = useState(-1);\r\n    const [peeking, setPeeking] = useState(false);\r\n    const [phase, setPhase] = useState<Phases>(Phases.finished);\r\n    const [player, setPlayer] = useState<Player>(createPlayer());\r\n    const [trainingHands, setTrainingHands] = useState(getDefaultTrainingHands());\r\n    const [sounds, setSounds] = useState<{ hit: Audio.Sound; miss: Audio.Sound }>();\r\n    const [trainingStatus, setTrainingStatus] = useState(getDefaultTrainingStatus());\r\n\r\n    const navigationRef = useRef<NavigationContainerRef<RouteParams>>(null);\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            getGameConfig(gameConfig),\r\n            getHasCompletedOnboarding(),\r\n            getPlayerEarnings(),\r\n            getPlayerEarningsHistorical(),\r\n            getTrainingProgress(),\r\n            initializeSounds()\r\n        ]).then((results) => {\r\n            const _gameConfig = results[0];\r\n            const hasCompletedOnboarding = results[1];\r\n            const playerEarnings = results[2];\r\n            const playerEarningsHistorical = results[3];\r\n            const trainingProgress = results[4];\r\n            const _sounds = results[5];\r\n\r\n            setGameConfig(_gameConfig);\r\n            const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\r\n            setTrainingHands(nextTrainingHands);\r\n\r\n            if (!hasCompletedOnboarding) {\r\n                navigationRef.current?.navigate(RouteNames.onboarding);\r\n            }\r\n\r\n            setPlayer({\r\n                ...player,\r\n                cash: playerEarnings,\r\n                earningsHistorical: playerEarningsHistorical\r\n            });\r\n\r\n            if (trainingProgress) {\r\n                const nextTrainingStatus = retrieveTrainingStatus(\r\n                    trainingProgress,\r\n                    nextTrainingHands,\r\n                    _gameConfig\r\n                );\r\n                setTrainingStatus(nextTrainingStatus);\r\n            }\r\n\r\n            setSounds(_sounds);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (navigationRef.current && !navigationListener) {\r\n            navigationListener = navigationRef.current.addListener('state', (event) => {\r\n                setCurrentRoute(event.data.state!.routes[event.data.state!.index!].name);\r\n            });\r\n        }\r\n    }, [navigationRef.current]);\r\n\r\n    const currentHand = getCurrentHand(player);\r\n    const isDoubleEnabled =\r\n        currentHand !== undefined && canDouble(currentHand, player.hands, gameConfig.casinoRules);\r\n    const isHitEnabled = currentHand !== undefined && canHit(player.hands, gameConfig.casinoRules);\r\n    const isSplitEnabled =\r\n        currentHand !== undefined &&\r\n        canSplit(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const isSurrenderEnabled =\r\n        currentHand !== undefined &&\r\n        canSurrender(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const currentDealerSymbol = dealerHand && symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const updateOnBoardingStep = (direction: 'forward' | 'backward') => {\r\n        const nextStep = onBoardingStep + (direction === 'forward' ? 1 : -1);\r\n        onBoardingSteps[nextStep] &&\r\n            onBoardingSteps[nextStep].load &&\r\n            onBoardingSteps[nextStep].load!(navigationRef.current as unknown as AppNavigation);\r\n        setOnBoardingStep(nextStep);\r\n    };\r\n\r\n    const exitOnboarding = () => {\r\n        setOnBoardingStep(-1);\r\n        updateHasCompletedOnboarding(true);\r\n        navigationRef.current?.navigate(RouteNames.table);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (decisionEvaluationTimeout) {\r\n            clearTimeout(decisionEvaluationTimeout);\r\n        }\r\n        if (decisionEvaluation && decisionEvaluation.isHit) {\r\n            const nextTimeout = setTimeout(() => {\r\n                setDecisionEvaluation(undefined);\r\n            }, 1000);\r\n            setDecisionEvaluationTimeout(nextTimeout as unknown as number);\r\n        }\r\n    }, [decisionEvaluation]);\r\n\r\n    useEffect(() => {\r\n        if (phase === 'dealer') {\r\n            handleDealerTurn(dealerHand!, gameConfig, player, setDealerHand, setPhase, setPlayer);\r\n        }\r\n    }, [phase, dealerHand]);\r\n\r\n    const saveGameConfig = (nextGameConfig: GameConfig) => {\r\n        setGameConfig(nextGameConfig);\r\n        updateGameConfig(nextGameConfig);\r\n    };\r\n\r\n    const startTrainingRound = (playerHand: Hand, dealerHand: Hand) => {\r\n        const nextPlayer = { ...player };\r\n        initializeHands(nextPlayer, playerHand);\r\n\r\n        if (\r\n            gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            canBeDealerBlackjack(dealerHand)\r\n        ) {\r\n            setPeeking(true);\r\n            setTimeout(() => {\r\n                setPeeking(false);\r\n                if (isDealerBlackjack(dealerHand)) {\r\n                    revealDealerHoleCard(dealerHand);\r\n                    setPhase(Phases.dealer);\r\n                } else {\r\n                    setPhase(Phases.player);\r\n                }\r\n            }, 1500);\r\n        } else {\r\n            setPhase(\r\n                isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)\r\n                    ? Phases.dealer\r\n                    : Phases.player\r\n            );\r\n        }\r\n\r\n        setDealerHand(dealerHand);\r\n        setPlayer(nextPlayer);\r\n        setDecisionEvaluation(undefined);\r\n\r\n        if (\r\n            onBoardingSteps[onBoardingStep] &&\r\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.startRound\r\n        ) {\r\n            updateOnBoardingStep('forward');\r\n        }\r\n    };\r\n\r\n    const finishCurrentHand = (player: Player) => {\r\n        if (isLastHand(player)) {\r\n            setPhase(Phases.dealer);\r\n            // By setting the phase to dealer, the corresponding useEffect hook will be executed\r\n        } else {\r\n            const nextPlayer = { ...player };\r\n            startNextHand(\r\n                nextPlayer,\r\n                gameConfig.untrainedPairsPriority,\r\n                currentDealerSymbol!,\r\n                trainingHands,\r\n                trainingStatus.trainingProgress\r\n            );\r\n            setPlayer(nextPlayer);\r\n            if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n                finishCurrentHand(nextPlayer);\r\n            }\r\n        }\r\n    };\r\n\r\n    const evaluatePlayerDecision = (playerDecision: PlayerDecision, hand: Hand) => {\r\n        const nextDecisionEvaluation = evaluateDecision(\r\n            hand,\r\n            dealerHand!,\r\n            trainingHands,\r\n            {\r\n                canDouble: isDoubleEnabled,\r\n                canSplit: isSplitEnabled,\r\n                canSurrender: isSurrenderEnabled\r\n            },\r\n            playerDecision\r\n        );\r\n\r\n        if (gameConfig.isSoundEnabled && sounds) {\r\n            playSound(nextDecisionEvaluation.isHit ? sounds.hit : sounds.miss);\r\n        }\r\n\r\n        setDecisionEvaluation(nextDecisionEvaluation);\r\n\r\n        const handCode = handToHandCode(currentHand);\r\n        let nextTrainingStatus = getNextTrainingStatus(\r\n            trainingStatus,\r\n            trainingHands,\r\n            gameConfig,\r\n            nextDecisionEvaluation.isHit,\r\n            handCode,\r\n            currentDealerSymbol!\r\n        );\r\n\r\n        setTrainingStatus(nextTrainingStatus);\r\n        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n\r\n        if (\r\n            onBoardingSteps[onBoardingStep] &&\r\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.playerAction\r\n        ) {\r\n            updateOnBoardingStep('forward');\r\n        }\r\n\r\n        if (nextTrainingStatus.isCompleted && !trainingStatus.isCompleted) {\r\n            navigationRef.current?.navigate(RouteNames.trainingCompleted);\r\n            saveGameConfig({ ...gameConfig, untrainedPairsPriority: false });\r\n        }\r\n    };\r\n\r\n    const doubleHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.double, currentHand);\r\n        doubleCurrentHand(nextPlayer, getRandomCard());\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const hitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.hit, currentHand);\r\n        hitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.untrainedPairsPriority,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(currentHand, nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const standHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.stand, currentHand);\r\n        standCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const splitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.split, currentHand);\r\n        splitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.untrainedPairsPriority,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const surrenderHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.surrender, currentHand);\r\n        surrenderCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    return (\r\n        <GestureHandlerRootView style={{ flex: 1 }}>\r\n            <NavigationContainer ref={navigationRef}>\r\n                <StatusBar hidden={true} />\r\n                <NavBar\r\n                    navigation={navigationRef.current as unknown as AppNavigation}\r\n                    onBoardingStep={onBoardingStep}\r\n                    player={player}\r\n                    routeName={currentRoute}\r\n                    trainingStatus={trainingStatus}\r\n                />\r\n                <Stack.Navigator\r\n                    initialRouteName={initialRouteName}\r\n                    screenOptions={{\r\n                        headerShown: false,\r\n                        cardStyle: {\r\n                            backgroundColor: tableColor\r\n                        }\r\n                    }}\r\n                >\r\n                    <Stack.Screen name={RouteNames.basicStrategyTable}>\r\n                        {() => <BasicStrategyTable casinoRules={gameConfig.casinoRules} />}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen name={RouteNames.blackjackPeek} component={BlackjackPeek} />\r\n                    <Stack.Screen name={RouteNames.configMenu}>\r\n                        {(props) => (\r\n                            <ConfigMenu\r\n                                gameConfig={gameConfig}\r\n                                navigation={props.navigation}\r\n                                onBoardingStep={onBoardingStep}\r\n                                phase={phase}\r\n                                resetTrainingStatus={() => {\r\n                                    const nextTrainingStatus = getDefaultTrainingStatus();\r\n                                    const nextPlayer: Player = {\r\n                                        ...player,\r\n                                        cash: 0,\r\n                                        earningsHistorical: [0]\r\n                                    };\r\n\r\n                                    updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n                                    updatePlayerEarnings(nextPlayer.cash);\r\n                                    updatePlayerEarningsHistorical(nextPlayer.earningsHistorical);\r\n\r\n                                    setPlayer(nextPlayer);\r\n                                    setTrainingStatus(nextTrainingStatus);\r\n\r\n                                    props.navigation.navigate(RouteNames.table);\r\n                                }}\r\n                                setGameConfig={(_gameConfig) => {\r\n                                    const nextTrainingHands = getTrainingHands(\r\n                                        _gameConfig.casinoRules\r\n                                    );\r\n                                    const nextTrainingStatus: TrainingStatus = {\r\n                                        ...trainingStatus,\r\n                                        isProgressBlocked: getIsProgressBlocked(\r\n                                            trainingStatus,\r\n                                            trainingHands,\r\n                                            _gameConfig.selectedHandsOnly,\r\n                                            _gameConfig.selectedHands\r\n                                        )\r\n                                    };\r\n\r\n                                    saveGameConfig(_gameConfig);\r\n                                    setTrainingHands(nextTrainingHands);\r\n                                    setTrainingStatus(nextTrainingStatus);\r\n                                }}\r\n                                trainingHands={trainingHands}\r\n                                trainingStatus={trainingStatus}\r\n                            />\r\n                        )}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen name={RouteNames.earningsChart}>\r\n                        {() => <EarningsChart earningsHistorical={player.earningsHistorical} />}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen name={RouteNames.handDecisions}>\r\n                        {(props) => (\r\n                            <HandDecisions\r\n                                casinoRules={gameConfig.casinoRules}\r\n                                route={props.route}\r\n                            />\r\n                        )}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen name={RouteNames.hitSplitAces} component={HitSplitAces} />\r\n                    <Stack.Screen name={RouteNames.missedPairs}>\r\n                        {(props) => (\r\n                            <MissedPairs\r\n                                gameConfig={gameConfig}\r\n                                missedTrainingPairs={trainingStatus.missedTrainingPairs}\r\n                                navigation={props.navigation}\r\n                                onBoardingStep={onBoardingStep}\r\n                                phase={phase}\r\n                                startTrainingRound={startTrainingRound}\r\n                                trainingHands={trainingHands}\r\n                            />\r\n                        )}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen name={RouteNames.onboarding}>\r\n                        {() => (\r\n                            <Onboarding\r\n                                skipOnboardingHandler={exitOnboarding}\r\n                                startOnboardingHandler={() => updateOnBoardingStep('forward')}\r\n                            />\r\n                        )}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen name={RouteNames.table}>\r\n                        {(props) => (\r\n                            <Table\r\n                                dealerHand={dealerHand}\r\n                                decisionEvaluation={decisionEvaluation}\r\n                                gameConfig={gameConfig}\r\n                                handlers={{\r\n                                    double: doubleHandler,\r\n                                    hit: hitHandler,\r\n                                    split: splitHandler,\r\n                                    stand: standHandler,\r\n                                    surrender: surrenderHandler\r\n                                }}\r\n                                isDoubleEnabled={isDoubleEnabled}\r\n                                isHitEnabled={isHitEnabled}\r\n                                isSplitEnabled={isSplitEnabled}\r\n                                isSurrenderEnabled={isSurrenderEnabled}\r\n                                navigation={props.navigation}\r\n                                onBoardingStep={onBoardingStep}\r\n                                peeking={peeking}\r\n                                phase={phase}\r\n                                player={player}\r\n                                startTrainingRound={startTrainingRound}\r\n                                trainingHands={trainingHands}\r\n                                trainingProgress={trainingStatus.trainingProgress}\r\n                            />\r\n                        )}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen\r\n                        name={RouteNames.trainingCompleted}\r\n                        component={TrainingCompleted}\r\n                    />\r\n                    <Stack.Screen name={RouteNames.trainingPairs}>\r\n                        {(props) => (\r\n                            <TrainingPairs\r\n                                gameConfig={gameConfig}\r\n                                navigation={props.navigation}\r\n                                onBoardingStep={onBoardingStep}\r\n                                phase={phase}\r\n                                startTrainingRound={startTrainingRound}\r\n                                trainingHands={trainingHands}\r\n                                trainingProgress={trainingStatus.trainingProgress}\r\n                            />\r\n                        )}\r\n                    </Stack.Screen>\r\n                    <Stack.Screen\r\n                        name={RouteNames.untrainedPairsPriority}\r\n                        component={UntrainedPairsPriority}\r\n                    />\r\n                </Stack.Navigator>\r\n\r\n                {onBoardingStep > -1 && (\r\n                    <OnboardingBar\r\n                        exitOnboarding={exitOnboarding}\r\n                        nextStepHandler={() => updateOnBoardingStep('forward')}\r\n                        onBoardingStep={onBoardingStep}\r\n                        previousStepHandler={() => updateOnBoardingStep('backward')}\r\n                    />\r\n                )}\r\n            </NavigationContainer>\r\n        </GestureHandlerRootView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { BlackJump } from './src/blackjump';\r\n\r\nexport default function App() {\r\n    return <BlackJump />;\r\n}\r\n// TODo Release 1.18.2 with rule disabling fixes, hole card removal\r\n"],"sourceRoot":""}