{"version":3,"sources":["assets/hit.mp3","assets/miss.mp3","assets/card-slide.mp3","src/types/card.ts","src/types/casino-rules.ts","src/types/decisions.ts","src/types/hand.ts","src/types/navigation.ts","src/types/onboarding.ts","src/types/phases.ts","src/types/training-pair.ts","src/async-storage.ts","src/constants.ts","src/utils.ts","src/logic/dealer-symbols.ts","src/logic/casino-rules.ts","src/logic/hand-decision-set.ts","src/logic/training-hand.ts","src/logic/card.ts","src/logic/hand-code.ts","src/logic/hand.ts","src/logic/training-pair.ts","src/logic/training-status.ts","src/components/nav-bar-items/config-button.tsx","src/components/nav-bar-items/earnings-indicator.tsx","src/components/nav-bar-items/precision-indicator.tsx","src/components/nav-bar-items/progress-indicator.tsx","src/logic/onboarding.ts","src/components/onboarding-section.tsx","src/components/nav-bar.tsx","src/components/button.tsx","src/components/onboarding-bar.tsx","src/logic/player.ts","src/logic/app-state.ts","src/logic/basic-strategy.ts","src/logic/game-config.ts","src/components/casino-rules/doubling-picker.tsx","src/components/casino-rules/rule-switcher.tsx","src/components/casino-rules/splits-number-picker.tsx","src/views/basic-strategy-table.tsx","src/components/divider.tsx","src/components/help-icon.tsx","src/views/config-menu.tsx","src/views/earnings-chart.tsx","src/components/hand-decisions-table.tsx","src/views/hand-decisions.tsx","src/logic/sound-queue.ts","src/components/card-component.tsx","src/components/hand-component.tsx","src/views/hit-split-aces.tsx","src/views/hole-card.tsx","src/views/missed-pairs.tsx","src/views/onboarding.tsx","src/components/actions.tsx","src/components/decision-evaluation.tsx","src/views/table.tsx","src/views/training-completed.tsx","src/views/training-pairs.tsx","src/views/untrained-pairs-priority.tsx","App.tsx"],"names":["module","exports","CardSuit","SimpleCardSymbol","SpecialCardSymbol","CasinoRulesKeys","Doubling","SplitsNumber","BaseDecisions","DynamicDecisions","PlayerDecisions","HandCode","HandOutcome","RouteNames","OnBoardingSections","OnBoardingStepEvent","Phases","initialRouteName","table","TrainingPairStatus","updatePlayerEarnings","playerEarnings","AsyncStorage","setItem","JSON","stringify","catch","updatePlayerEarningsHistorical","playerEarningsHistorical","updateTrainingProgress","TrainingProgress","colors","hit","stand","double_hit","double_stand","split_hit","split_stand","split_surrender_hit","surrender_hit","surrender_split_hit","surrender_stand","double","split","surrender","cartesianProduct","firstArray","secondArray","elementBuilder","reduce","product","x","concat","map","y","getObjectKeys","object","Object","keys","getRandomItem","items","Math","round","random","length","playSound","sound","stopAsync","then","playAsync","allDealerSymbols","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Ace","getUntrainedDealerSymbols","trainingHandStatus","filter","dealerSymbol","passed","getDefaultCasinoRules","blackjackPeek","dealerHitsSoft17","doubling","nineToElevenSoft","doublingAfterSplit","hitSplitAces","holeCard","splitsNumber","three","alwaysHit","alwaysStand","handDecisionSetGetters","Split2s","casinoRules","none","Split3s","Split4s","Split5s","tenToEleven","Split6s","Split7s","Split8s","Split9s","Split10s","SplitAs","Soft13","anyPair","Soft14","Soft15","Soft16","Soft17","Soft18","Soft19","Soft20","Hard5","Hard6","Hard7","Hard8","Hard9","nineToEleven","Hard10","Hard11","Hard12","Hard13","Hard14","Hard15","Hard16","Hard17","Hard18","Hard19","Hard20","getSelectedTrainingHands","trainingHands","selectedHands","values","hand","code","getTrainingHands","decisionSet","dependencies","name","getUntrainedTrainingHands","trainingProgress","trainingHand","cardsValue","Jack","Queen","King","createCard","symbol","suit","isHoleCard","isRandom","undefined","getRandomSuit","suits","clubs","diamonds","hearts","spades","symbols","deck","getCardEffectiveValue","card","getCardValues","getCardsValues","cards","options","numbers","numbersDictionary","dictionary","next","removeDuplicates","peeking","reducedValues","currentValues","getRandomCard","randomCard","simpleSymbolToSymbol","simpleSymbol","tenPointsSymbols","symbolToSimpleSymbol","indexOf","valueToSymbol","number","String","isSoftHandCode","handCode","includes","isSplitHandCode","areHandsSplitAces","hands","canSplit","handsNumber","createDealerHand","dealerSuit","dealerCards","push","createHand","bet","dealCard","getCardForUntrainedHand","playerHand","isPlayerHandSoft","playerHandValues","valuesToUntrainedHands","valueToReachThisHand","isHandUntrainedForDealerSymbol","untrained","softDifference","parseInt","hardDifference","value","getHandEffectiveValue","effectiveValue","some","v","reverse","find","getHandValidValues","handCodeToHand","handSymbols","getSplitHandSymbols","handValues","s","complementarySymbol","floor","getSoftHandSymbols","minValue","max","maxValue","min","firstValue","secondValue","getHardHandSymbols","handToHandCode","c","join","hasHoleCard","isBlackjack","isBust","isFinished","isAcesPairHand","isAcesPair","revealDealerHoleCard","allTrainingPairsNumber","getSpecificTrainingPair","dealer","player","getDefaultTrainingStatus","attemptedTrainingPairs","isCompleted","isProgressBlocked","missedTrainingPairs","passedTrainingPairs","reducedTrainingProgress","reducedDealerSymbols","getIsProgressBlocked","trainingStatus","selectedHandsOnly","getProgressPercentage","getNextTrainingStatus","gameConfig","isHit","currentHandCode","currentDealerSymbol","currentHandTrainingStatus","missed","nextAttemptedTrainingPairs","nextMissedTrainingPairs","missedTrainingPair","getNextMissedTrainingPairs","nextPassedTrainingHands","nextTrainingStatus","isTrainingCompleted","reduceTrainingPairProgress","trainingPairStatus","reducedTrainingStatus","retrieveTrainingStatus","reduceTrainingHandProgress","ConfigButton","props","TouchableOpacity","onPress","isEnabled","routeName","navigation","navigate","configMenu","goBack","style","alignItems","flexGrow","justifyContent","width","Fragment","height","viewBox","fill","d","progress","View","position","right","bottom","Text","color","fontWeight","EarningsIndicator","earningsColor","earnings","earningsChart","flexDirection","fontSize","marginTop","transform","PrecisionIndicator","precision","missedPairs","marginLeft","ProgressIndicator","trainingPairs","onBoardingSteps","activeSection","tableActions","event","startRound","hideNextButton","load","text","tablePlayerHands","hidePreviousButton","tableDealerHand","playerAction","tableFeedback","progressIndicator","precisionIndicator","earningsIndicator","configMenuButton","basicStrategyTable","appSettings","resetTraining","OnBoardingSection","isOnboardingActive","onBoardingStep","isHighlighted","children","backgroundColor","opacity","top","left","animateIndicator","Animated","sequence","timing","toValue","duration","useNativeDriver","start","NavBar","earningsPosition","useMemo","Value","precisionPosition","progressPosition","progressPercentage","useEffect","cash","translateX","Button","marginBottom","textColor","textSize","OnboardingBar","currentStep","previousStepHandler","padding","nextStepHandler","exitOnboarding","getCurrentHand","handIndex","resolvePlayerEarnings","dealerHand","handOutcome","playerHandValue","dealerHandValue","bust","blackjack","dealerWins","playerWins","outcome","resolveHand","mustDealerDraw","handEffectiveValue","evaluateDynamicDecision","dynamicDecision","dynamicConditions","canDouble","canSurrender","DoublingPicker","paddingTop","flex","Picker","selectedValue","onValueChange","newValue","nextDoubling","nextCasinoRules","setCasinoRules","Item","label","RuleSwitcher","SwitchCore","Switch","isDisabled","ruleName","marginRight","trackColor","true","false","hideLabel","fullWidth","SplitsNumberPicker","nextSplitsNumber","one","two","actionsAbbreviationMap","handCodesAbbreviationMap","cellWidth","TextCell","marginVertical","paddingVertical","textAlign","BasicStrategyTable","useState","ScrollView","Linking","fontStyle","paddingHorizontal","key","cardSymbol","action","Divider","HelpIcon","borderRadius","ConfigMenu","isDealerAnimationEnabled","setIsDealerAnimationEnabled","setIsProgressBlocked","isSoundEnabled","setIsSoundEnabled","setSelectedHands","setSelectedHandsOnly","setTrainingHands","untrainedPairsPriority","setUntrainedPairsPriority","isSomeHandSelected","_selectedHandsOnly","_selectedHands","isProgressBlockedHandler","nextSelectedHandsOnly","nextSelectedHands","nextTrainingHands","casinoRuleChangeHandler","isSaveButtonEnabled","contentContainerStyle","paddingBottom","disabled","borderLeftColor","borderLeftWidth","flexWrap","setGameConfig","phase","finished","onboarding","body","Platform","OS","window","confirm","resetTrainingStatus","Alert","alert","getChartDimensions","data","absoluteMax","ceil","reduced","abs","Number","MIN_VALUE","primeFactors","factors","divisor","getPrimeFactors","boundaries","scale","Dimensions","get","screenHorizontalMargin","getCurrentPage","nextIndex","slice","index","EarningsChart","dimensions","earningsHistorical","page","setPage","formattedData","boundaryDots","boundaryDotsWidth","chartWidth","source","getFormattedData","marginHorizontal","overflow","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","linejoinType","propsForLabels","datasets","labels","segments","withVerticalLines","HandDecisionsTable","handDecisionSet","simpleCardSymbol","HandDecisions","route","params","previousValue","ranges","dependency","pushSound","soundQueue","sounds","isActive","playNextSound","nextSound","pop","setTimeout","CardComponent","cardSlideSound","setCardSlideSound","animateCard","skipAnimation","parallel","animationsDuration","Audio","Sound","createAsync","cardSlideSoundMp3","volume","result","setValue","cardColor","translateY","HandComponent","displayValues","isCurrentHand","maxWidth","HitSplitAces","margin","HoleCard","textProperties","boldTextProperties","MissedPairs","handName","trainingPair","startTrainingRound","Onboarding","startOnboardingHandler","skipOnboardingHandler","Actions","isPlayerTurn","isDoublingAvailable","isSurrenderAvailable","activeOptionalButtons","optionalButtonsWidth","untrainedTrainingHands","randomTrainingHand","untrainedDealerSymbols","randomDealerSymbol","getUntrainedTrainingPair","isHitEnabled","handlers","isSplitEnabled","isDoubleEnabled","isSurrenderEnabled","DecisionEvaluationComponent","decisionEvaluation","showDecisionsHandler","Table","minHeight","handDecisions","lastActionHand","TrainingCompleted","TrainingPairs","unfoldedHand","setUnfoldedHand","UntrainedPairsPriority","hardFourteen","navigationListener","Stack","createStackNavigator","App","currentRoute","setCurrentRoute","setDealerHand","setDecisionEvaluation","decisionEvaluationTimeout","setDecisionEvaluationTimeout","setOnBoardingStep","setPeeking","setPhase","setPlayer","setSounds","setTrainingStatus","navigationRef","useRef","currentGameConfig","Promise","all","getItem","storedGameConfig","parse","hitSoundMp3","missSoundMp3","results","miss","errors","console","log","_gameConfig","hasCompletedOnboarding","_sounds","current","addListener","state","routes","currentHand","isHandWithTwoCards","isSingleHand","contains9To11","handValue","is10To11","is9To11","updateOnBoardingStep","direction","nextStep","clearTimeout","nextTimeout","nextDealerHand","nextCash","nextEarningsHistorical","handleDealerTurn","saveGameConfig","nextGameConfig","updateGameConfig","nextPlayer","initialHand","initializeHands","visibleCard","canBeDealerBlackjack","cardValues","isDealerBlackjack","finishCurrentHand","isLastHand","nextHand","nextCard","startNextHand","evaluatePlayerDecision","playerDecision","nextDecisionEvaluation","optimalDecision","evaluateDecision","trainingCompleted","doubleHandler","doubleCurrentHand","hitHandler","hitCurrentHand","standHandler","standCurrentHand","splitHandler","firstHand","secondHand","splice","splitCurrentHand","surrenderHandler","surrenderCurrentHand","NavigationContainer","ref","StatusBar","hidden","Navigator","screenOptions","headerShown","cardStyle","Screen","component"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,wECS/BC,EAWAC,EAaAC,ECtBAC,EAWAC,EAQAC,EC5BAC,EAoBAC,EAaAC,E,kJF1BAR,K,eAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAWAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,E,SAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,SAAAA,E,UAAAA,M,cAaAC,K,SAAAA,E,UAAAA,E,UAAAA,M,cCtBAC,K,+BAAAA,E,uCAAAA,E,oBAAAA,E,0CAAAA,E,8BAAAA,E,qBAAAA,E,6BAAAA,E,uBAAAA,M,cAWAC,O,eAAAA,I,6BAAAA,I,+BAAAA,I,uCAAAA,I,sBAAAA,M,cAQAC,O,eAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,cC5BAC,K,UAAAA,E,eAAAA,M,cAoBAC,K,0BAAAA,E,8BAAAA,E,wBAAAA,E,4BAAAA,E,wCAAAA,E,gCAAAA,E,wCAAAA,E,qCAAAA,M,cAaAC,K,gBAAAA,E,cAAAA,E,uBAAAA,M,SC1BAC,EAqCAC,ECtCAC,E,wBDCAF,K,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,cAqCAC,K,sBAAAA,E,YAAAA,E,yBAAAA,E,yBAAAA,E,aAAAA,M,cCtCAC,K,wCAAAA,E,wBAAAA,E,8BAAAA,E,8BAAAA,E,4BAAAA,E,oBAAAA,E,0BAAAA,E,wBAAAA,E,cAAAA,E,sCAAAA,E,8BAAAA,E,iDAAAA,M,KAeL,ICrBKC,EAyBAC,EC3BAC,EFuBCC,EAAmBJ,EAAWK,O,SCrB/BJ,K,0BAAAA,E,wCAAAA,E,0BAAAA,E,oCAAAA,E,sCAAAA,E,0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","file":"static/js/app.faff01e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hit.dc863917.mp3\";","module.exports = __webpack_public_path__ + \"static/media/miss.497d59f1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-slide.d80ce25b.mp3\";","import { Dictionary } from './dictionary';\r\n\r\nexport interface Card {\r\n    isHoleCard?: boolean;\r\n    isRandom: boolean;\r\n    suit: CardSuit;\r\n    symbol: CardSymbol;\r\n}\r\n\r\nexport enum CardSuit {\r\n    clubs = '\\u2663',\r\n    diamonds = '\\u2666',\r\n    hearts = '\\u2665',\r\n    spades = '\\u2660'\r\n}\r\n\r\nexport type CardSymbol = SimpleCardSymbol | SpecialCardSymbol;\r\n\r\nexport type CardValues = Dictionary<number[], CardSymbol>;\r\n\r\nexport enum SimpleCardSymbol {\r\n    Ace = 'A',\r\n    Two = '2',\r\n    Three = '3',\r\n    Four = '4',\r\n    Five = '5',\r\n    Six = '6',\r\n    Seven = '7',\r\n    Eight = '8',\r\n    Nine = '9',\r\n    Ten = '10'\r\n}\r\n\r\nexport enum SpecialCardSymbol {\r\n    Jack = 'J',\r\n    Queen = 'Q',\r\n    King = 'K'\r\n}\r\n\r\nexport type TenPointsCardSymbol = SimpleCardSymbol.Ten | SpecialCardSymbol;\r\n","export interface CasinoRules {\r\n    [CasinoRulesKeys.blackjackPeek]: boolean;\r\n    [CasinoRulesKeys.dealerHitsSoft17]: boolean;\r\n    [CasinoRulesKeys.doubling]: Doubling;\r\n    [CasinoRulesKeys.doublingAfterSplit]: boolean;\r\n    [CasinoRulesKeys.hitSplitAces]: boolean;\r\n    [CasinoRulesKeys.holeCard]: boolean;\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber;\r\n    [CasinoRulesKeys.surrender]: boolean;\r\n}\r\n\r\nexport enum CasinoRulesKeys {\r\n    blackjackPeek = 'Blackjack Peek',\r\n    dealerHitsSoft17 = 'Dealer hits soft 17',\r\n    doubling = 'Doubling',\r\n    doublingAfterSplit = 'Doubling after split',\r\n    hitSplitAces = 'Hit split aces',\r\n    holeCard = 'Hole card',\r\n    splitsNumber = 'Splits number',\r\n    surrender = 'Surrender'\r\n}\r\n\r\nexport enum Doubling {\r\n    none = 0,\r\n    tenToEleven = 1,\r\n    nineToEleven = 2,\r\n    nineToElevenSoft = 3,\r\n    anyPair = 4\r\n}\r\n\r\nexport enum SplitsNumber {\r\n    none = 0,\r\n    one = 1,\r\n    two = 2,\r\n    three = 3\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\n\r\nexport enum BaseDecisions {\r\n    hit = 'Hit',\r\n    stand = 'Stand'\r\n}\r\n\r\nexport interface DecisionEvaluation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    dynamicDecision: DynamicDecision;\r\n    handName: string;\r\n    isHit: boolean;\r\n}\r\n\r\nexport interface DynamicConditions {\r\n    canDouble: boolean;\r\n    canSplit: boolean;\r\n    canSurrender: boolean;\r\n}\r\n\r\nexport type DynamicDecision = BaseDecisions | DynamicDecisions;\r\n\r\nexport enum DynamicDecisions {\r\n    double_hit = 'Double / Hit',\r\n    double_stand = 'Double / Stand',\r\n    split_hit = 'Split / Hit',\r\n    split_stand = 'Split / Stand',\r\n    split_surrender_hit = 'Split / Surrender',\r\n    surrender_hit = 'Surrender / Hit',\r\n    surrender_split_hit = 'Surrender / Split',\r\n    surrender_stand = 'Surrender / Stand'\r\n}\r\n\r\nexport type PlayerDecision = BaseDecisions | PlayerDecisions;\r\n\r\nexport enum PlayerDecisions {\r\n    double = 'Double',\r\n    split = 'Split',\r\n    surrender = 'Surrender'\r\n}\r\n","import { Card } from './card';\r\n\r\nexport interface Hand {\r\n    bet: number;\r\n    cards: Card[];\r\n    outcome?: string;\r\n    values: number[];\r\n}\r\n\r\nexport enum HandCode {\r\n    Split2s = '2,2',\r\n    Split3s = '3,3',\r\n    Split4s = '4,4',\r\n    Split5s = '5,5',\r\n    Split6s = '6,6',\r\n    Split7s = '7,7',\r\n    Split8s = '8,8',\r\n    Split9s = '9,9',\r\n    Split10s = '10,10',\r\n    SplitAs = 'A,A',\r\n    Soft13 = '3/13',\r\n    Soft14 = '4/14',\r\n    Soft15 = '5/15',\r\n    Soft16 = '6/16',\r\n    Soft17 = '7/17',\r\n    Soft18 = '8/18',\r\n    Soft19 = '9/19',\r\n    Soft20 = '10/20',\r\n    Hard5 = '5',\r\n    Hard6 = '6',\r\n    Hard7 = '7',\r\n    Hard8 = '8',\r\n    Hard9 = '9',\r\n    Hard10 = '10',\r\n    Hard11 = '11',\r\n    Hard12 = '12',\r\n    Hard13 = '13',\r\n    Hard14 = '14',\r\n    Hard15 = '15',\r\n    Hard16 = '16',\r\n    Hard17 = '17',\r\n    Hard18 = '18',\r\n    Hard19 = '19',\r\n    Hard20 = '20'\r\n}\r\n\r\nexport enum HandOutcome {\r\n    blackjack = 'Blackjack',\r\n    bust = 'Bust',\r\n    dealerWins = 'Dealer wins',\r\n    playerWins = 'Player wins',\r\n    push = 'Push'\r\n}\r\n","import { Route } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { TrainingHand } from './training-hand';\r\n\r\nexport type AppNavigation = StackNavigationProp<RouteParams>;\r\n\r\nexport type AppRoute<T extends RouteNames> = Route<T, RouteParams[T]>;\r\n\r\nexport enum RouteNames {\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    configMenu = 'configMenu',\r\n    earningsChart = 'earningsChart',\r\n    handDecisions = 'handDecisions',\r\n    hitSplitAces = 'hitSplitAces',\r\n    holeCard = 'holeCard',\r\n    missedPairs = 'missedPairs',\r\n    onboarding = 'onboarding',\r\n    table = 'table',\r\n    trainingCompleted = 'trainingCompleted',\r\n    trainingPairs = 'trainingPairs',\r\n    untrainedPairsPriority = 'untrainedPairsPriority'\r\n}\r\n\r\nexport const initialRouteName = RouteNames.table;\r\n\r\nexport type RouteParams = {\r\n    [RouteNames.basicStrategyTable]: undefined;\r\n    [RouteNames.configMenu]: undefined;\r\n    [RouteNames.earningsChart]: undefined;\r\n    [RouteNames.handDecisions]: {\r\n        trainingHand: TrainingHand;\r\n    };\r\n    [RouteNames.hitSplitAces]: undefined;\r\n    [RouteNames.holeCard]: undefined;\r\n    [RouteNames.missedPairs]: undefined;\r\n    [RouteNames.onboarding]: undefined;\r\n    [RouteNames.table]: undefined;\r\n    [RouteNames.trainingCompleted]: undefined;\r\n    [RouteNames.trainingPairs]: undefined;\r\n    [RouteNames.untrainedPairsPriority]: undefined;\r\n};\r\n","import { AppNavigation } from './navigation';\r\n\r\nexport enum OnBoardingSections {\r\n    appSettings = 'appSettings',\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    casinoRules = 'casinoRules',\r\n    configMenuButton = 'configMenuButton',\r\n    earningsIndicator = 'earningsIndicator',\r\n    missedPairs = 'missedPairs',\r\n    precisionIndicator = 'precisionIndicator',\r\n    progressIndicator = 'progressIndicator',\r\n    resetTraining = 'resetTraining',\r\n    tableActions = 'tableActions',\r\n    tableDealerHand = 'tableDealerHand',\r\n    tableFeedback = 'tableFeedback',\r\n    tablePlayerHands = 'tablePlayerHands'\r\n}\r\n\r\nexport type OnBoardingStep = {\r\n    activeSection?: OnBoardingSections[];\r\n    event?: OnBoardingStepEvent;\r\n    hideNextButton?: boolean;\r\n    hidePreviousButton?: boolean;\r\n    load?: (navigation: AppNavigation) => void;\r\n    text: string;\r\n};\r\n\r\nexport enum OnBoardingStepEvent {\r\n    startRound = 0,\r\n    playerAction = 1\r\n}\r\n","export enum Phases {\r\n    dealer = 'dealer',\r\n    finished = 'finished',\r\n    player = 'player'\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\nimport { Hand, HandCode } from './hand';\r\n\r\nexport interface TrainingPair {\r\n    dealer: Hand;\r\n    player: Hand;\r\n}\r\n\r\nexport interface TrainingPairRepresentation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    handCode: HandCode;\r\n}\r\n\r\nexport enum TrainingPairStatus {\r\n    untrained = 0,\r\n    passed = 1,\r\n    missed = 2\r\n}\r\n","import AsyncStorage from '@react-native-community/async-storage';\r\nimport { CasinoRulesKeys, GameConfig, Player, TrainingProgress } from './types';\r\n\r\nconst gameConfigKey = 'gameConfig';\r\nconst hasCompletedOnboardingKey = 'hasCompletedOnboarding';\r\nconst playerEarningsKey = 'playerEarnings';\r\nconst playerEarningsHistoricalKey = 'playerEarningsHistorical';\r\nconst trainingProgressKey = 'trainedHands';\r\n\r\nexport const getGameConfig = (currentGameConfig: GameConfig) =>\r\n    AsyncStorage.getItem(gameConfigKey)\r\n        .then<GameConfig>((value) => {\r\n            const storedGameConfig: Partial<GameConfig> | undefined = value && JSON.parse(value);\r\n            return {\r\n                casinoRules:\r\n                    storedGameConfig && storedGameConfig.casinoRules !== undefined\r\n                        ? {\r\n                              [CasinoRulesKeys.blackjackPeek]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.blackjackPeek\r\n                                        ],\r\n                              [CasinoRulesKeys.dealerHitsSoft17]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.dealerHitsSoft17\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.dealerHitsSoft17\r\n                                        ],\r\n                              [CasinoRulesKeys.doubling]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.doubling]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.doubling],\r\n                              [CasinoRulesKeys.doublingAfterSplit]:\r\n                                  storedGameConfig.casinoRules[\r\n                                      CasinoRulesKeys.doublingAfterSplit\r\n                                  ] !== undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ],\r\n                              [CasinoRulesKeys.hitSplitAces]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces],\r\n                              [CasinoRulesKeys.holeCard]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.holeCard]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.holeCard],\r\n                              [CasinoRulesKeys.splitsNumber]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.splitsNumber],\r\n                              [CasinoRulesKeys.surrender]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                          }\r\n                        : currentGameConfig.casinoRules,\r\n                isDealerAnimationEnabled:\r\n                    storedGameConfig && storedGameConfig.isDealerAnimationEnabled !== undefined\r\n                        ? storedGameConfig.isDealerAnimationEnabled\r\n                        : currentGameConfig.isDealerAnimationEnabled,\r\n                isSoundEnabled:\r\n                    storedGameConfig && storedGameConfig.isSoundEnabled !== undefined\r\n                        ? storedGameConfig.isSoundEnabled\r\n                        : currentGameConfig.isSoundEnabled,\r\n                selectedHands:\r\n                    storedGameConfig && storedGameConfig.selectedHands !== undefined\r\n                        ? storedGameConfig.selectedHands\r\n                        : currentGameConfig.selectedHands,\r\n                selectedHandsOnly:\r\n                    storedGameConfig && storedGameConfig.selectedHandsOnly !== undefined\r\n                        ? storedGameConfig.selectedHandsOnly\r\n                        : currentGameConfig.selectedHandsOnly,\r\n                untrainedPairsPriority:\r\n                    storedGameConfig && storedGameConfig.untrainedPairsPriority !== undefined\r\n                        ? storedGameConfig.untrainedPairsPriority\r\n                        : currentGameConfig.untrainedPairsPriority\r\n            };\r\n        })\r\n        .catch(() => currentGameConfig);\r\n\r\nexport const getHasCompletedOnboarding = () =>\r\n    AsyncStorage.getItem(hasCompletedOnboardingKey)\r\n        .then<boolean>((value) => (value ? JSON.parse(value) : false))\r\n        .catch(() => false);\r\n\r\nexport const getPlayerEarnings = () =>\r\n    AsyncStorage.getItem(playerEarningsKey)\r\n        .then<Player['cash']>((value) => (value ? parseInt(value) : 0))\r\n        .catch(() => 0);\r\n\r\nexport const getPlayerEarningsHistorical = () =>\r\n    AsyncStorage.getItem(playerEarningsHistoricalKey)\r\n        .then<Player['earningsHistorical']>((value) => (value ? JSON.parse(value) : []))\r\n        .catch(() => []);\r\n\r\nexport const getTrainingProgress = () =>\r\n    AsyncStorage.getItem(trainingProgressKey)\r\n        .then<TrainingProgress>((value) => (value ? JSON.parse(value) : undefined))\r\n        .catch(() => undefined);\r\n\r\nexport const updateGameConfig = (gameConfig: GameConfig) => {\r\n    AsyncStorage.setItem(gameConfigKey, JSON.stringify(gameConfig)).catch(() => {});\r\n};\r\n\r\nexport const updateHasCompletedOnboarding = (hasCompletedOnboarding: boolean) => {\r\n    AsyncStorage.setItem(\r\n        hasCompletedOnboardingKey,\r\n        JSON.stringify(hasCompletedOnboarding)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarnings = (playerEarnings: Player['cash']) => {\r\n    AsyncStorage.setItem(playerEarningsKey, JSON.stringify(playerEarnings)).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarningsHistorical = (\r\n    playerEarningsHistorical: Player['earningsHistorical']\r\n) => {\r\n    AsyncStorage.setItem(\r\n        playerEarningsHistoricalKey,\r\n        JSON.stringify(playerEarningsHistorical)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updateTrainingProgress = (TrainingProgress: TrainingProgress) => {\r\n    AsyncStorage.setItem(trainingProgressKey, JSON.stringify(TrainingProgress)).catch(() => {});\r\n};\r\n","import { BaseDecisions, Dictionary, DynamicDecisions, PlayerDecisions } from './types';\r\n\r\nexport const doubleColor = '#a1a669';\r\nexport const hitColor = '#428bca';\r\nexport const splitColor = '#5cb85c';\r\nexport const standColor = '#46b8da';\r\nexport const surrenderColor = '#8f6088';\r\n\r\nexport const dangerColor = '#dc3545';\r\nexport const nonRandomColor = '#e5c100';\r\nexport const untrainedColor = '#333';\r\nexport const warningColor = '#ffc107';\r\n\r\nexport const tableColor = '#088446';\r\n\r\nexport const colors: Dictionary<string, BaseDecisions | DynamicDecisions | PlayerDecisions> = {\r\n    [BaseDecisions.hit]: hitColor,\r\n    [BaseDecisions.stand]: standColor,\r\n    [DynamicDecisions.double_hit]: doubleColor,\r\n    [DynamicDecisions.double_stand]: doubleColor,\r\n    [DynamicDecisions.split_hit]: splitColor,\r\n    [DynamicDecisions.split_stand]: splitColor,\r\n    [DynamicDecisions.split_surrender_hit]: splitColor,\r\n    [DynamicDecisions.surrender_hit]: surrenderColor,\r\n    [DynamicDecisions.surrender_split_hit]: surrenderColor,\r\n    [DynamicDecisions.surrender_stand]: surrenderColor,\r\n    [PlayerDecisions.double]: doubleColor,\r\n    [PlayerDecisions.split]: splitColor,\r\n    [PlayerDecisions.surrender]: surrenderColor\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { Dictionary } from './types';\r\n\r\nexport const cartesianProduct = <T, U, R>(\r\n    firstArray: T[],\r\n    secondArray: U[],\r\n    elementBuilder: (t: T, u: U) => R\r\n): R[] => {\r\n    return firstArray.reduce<R[]>((product, x) => {\r\n        return product.concat(secondArray.map((y) => elementBuilder(x, y)));\r\n    }, []);\r\n};\r\n\r\nexport const getAbsoluteMax = (numbers: number[]) =>\r\n    Math.ceil(\r\n        numbers.reduce((reduced, next) => Math.max(reduced, Math.abs(next)), Number.MIN_VALUE)\r\n    );\r\n\r\nexport const getObjectKeys = <T extends string | number | symbol>(object: { [key in T]: any }) =>\r\n    Object.keys(object) as T[];\r\n\r\nexport const getPrimeFactors = (number: number) => {\r\n    const factors: number[] = [];\r\n    let divisor = 2;\r\n\r\n    while (number >= 2) {\r\n        if (number % divisor == 0) {\r\n            factors.push(divisor);\r\n            number = number / divisor;\r\n        } else {\r\n            divisor++;\r\n        }\r\n    }\r\n    return factors.reverse();\r\n};\r\n\r\nexport const getRandomItem = <T>(items: T[]) =>\r\n    items[Math.round(Math.random() * (items.length - 1))];\r\n\r\nexport const playSound = (sound: Audio.Sound) =>\r\n    sound\r\n        .stopAsync() // In case is already playing and it hasn't finished yet\r\n        .catch(/* Failing to stop audio is not a critical issue */)\r\n        .then(() => sound.playAsync())\r\n        .catch(/* Failing to play audio is not a critical issue */);\r\n\r\nexport const removeDuplicates = (numbers: number[]): number[] => {\r\n    const numbersDictionary = numbers.reduce<Dictionary<number>>(\r\n        (dictionary, next) => ({ ...dictionary, [next]: next }),\r\n        {}\r\n    );\r\n    return Object.keys(numbersDictionary).map((x) => numbersDictionary[x]);\r\n};\r\n\r\nexport const shuffleArray = <T>(array: T[]) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n};\r\n","import { SimpleCardSymbol, TrainingHandStatus, TrainingPairStatus } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nexport const allDealerSymbols: SimpleCardSymbol[] = [\r\n    SimpleCardSymbol.Two,\r\n    SimpleCardSymbol.Three,\r\n    SimpleCardSymbol.Four,\r\n    SimpleCardSymbol.Five,\r\n    SimpleCardSymbol.Six,\r\n    SimpleCardSymbol.Seven,\r\n    SimpleCardSymbol.Eight,\r\n    SimpleCardSymbol.Nine,\r\n    SimpleCardSymbol.Ten,\r\n    SimpleCardSymbol.Ace\r\n];\r\n\r\nexport const getUntrainedDealerSymbols = (trainingHandStatus: TrainingHandStatus) =>\r\n    getObjectKeys(trainingHandStatus).filter(\r\n        (dealerSymbol) => trainingHandStatus[dealerSymbol] !== TrainingPairStatus.passed\r\n    );\r\n","import { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../types';\r\n\r\nexport const getDefaultCasinoRules = (): CasinoRules => ({\r\n    [CasinoRulesKeys.blackjackPeek]: false,\r\n    [CasinoRulesKeys.dealerHitsSoft17]: false,\r\n    [CasinoRulesKeys.doubling]: Doubling.nineToElevenSoft,\r\n    [CasinoRulesKeys.doublingAfterSplit]: true,\r\n    [CasinoRulesKeys.hitSplitAces]: false,\r\n    [CasinoRulesKeys.holeCard]: false,\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber.three,\r\n    [CasinoRulesKeys.surrender]: false\r\n});\r\n","import {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    HandDecisionSet,\r\n    HandDecisionSetGetters,\r\n    SimpleCardSymbol,\r\n    SplitsNumber\r\n} from '../types';\r\n\r\nconst alwaysHit: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n};\r\n\r\nconst alwaysStand: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n};\r\n\r\nexport const getHandRangesNumber = (decisionSet: HandDecisionSet) =>\r\n    Object.values(decisionSet).reduce<{\r\n        previousValue: string;\r\n        ranges: number;\r\n    }>(\r\n        (reduced, next) => {\r\n            return reduced.previousValue === next\r\n                ? reduced\r\n                : { previousValue: next, ranges: reduced.ranges + 1 };\r\n        },\r\n        {\r\n            previousValue: '',\r\n            ranges: 0\r\n        }\r\n    ).ranges;\r\n\r\nexport const handDecisionSetGetters: HandDecisionSetGetters = {\r\n    [HandCode.Split2s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            !casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split3s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split4s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split5s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split6s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split7s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split8s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                        ? DynamicDecisions.surrender_split_hit\r\n                        : DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split9s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Split10s]: () => alwaysStand,\r\n    [HandCode.SplitAs]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft18]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft19]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Soft20]: () => alwaysStand,\r\n    [HandCode.Hard5]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard6]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard7]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard8]: () => alwaysHit,\r\n    [HandCode.Hard9]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard10]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard11]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard12]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\r\n                ? DynamicDecisions.surrender_stand\r\n                : BaseDecisions.stand\r\n    }),\r\n    [HandCode.Hard18]: () => alwaysStand,\r\n    [HandCode.Hard19]: () => alwaysStand,\r\n    [HandCode.Hard20]: () => alwaysStand\r\n};\r\n","import {\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    HandCode,\r\n    SelectedHands,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\nimport { getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { handDecisionSetGetters } from './hand-decision-set';\r\n\r\nexport const getDefaultTrainingHands = () => getTrainingHands(getDefaultCasinoRules());\r\n\r\nexport const getSelectedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    selectedHands?: SelectedHands\r\n) =>\r\n    selectedHands\r\n        ? Object.values(trainingHands).filter((hand) => selectedHands[hand.code])\r\n        : Object.values(trainingHands);\r\n\r\nexport const getTrainingHands = (casinoRules: CasinoRules): TrainingHands => ({\r\n    [HandCode.Split2s]: {\r\n        code: HandCode.Split2s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split2s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.doublingAfterSplit,\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: '2,2'\r\n    },\r\n    [HandCode.Split3s]: {\r\n        code: HandCode.Split3s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split3s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.doublingAfterSplit,\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.blackjackPeek\r\n        ],\r\n        name: '3,3'\r\n    },\r\n    [HandCode.Split4s]: {\r\n        code: HandCode.Split4s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split4s](casinoRules),\r\n        dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n        name: '4,4'\r\n    },\r\n    [HandCode.Split5s]: {\r\n        code: HandCode.Split5s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split5s](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: '5,5'\r\n    },\r\n    [HandCode.Split6s]: {\r\n        code: HandCode.Split6s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split6s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.doublingAfterSplit,\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.blackjackPeek\r\n        ],\r\n        name: '6,6'\r\n    },\r\n    [HandCode.Split7s]: {\r\n        code: HandCode.Split7s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split7s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.blackjackPeek\r\n        ],\r\n        name: '7,7'\r\n    },\r\n    [HandCode.Split8s]: {\r\n        code: HandCode.Split8s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split8s](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.splitsNumber,\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: '8,8'\r\n    },\r\n    [HandCode.Split9s]: {\r\n        code: HandCode.Split9s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split9s](casinoRules),\r\n        dependencies: [CasinoRulesKeys.splitsNumber],\r\n        name: '9,9'\r\n    },\r\n    [HandCode.Split10s]: {\r\n        code: HandCode.Split10s,\r\n        decisionSet: handDecisionSetGetters[HandCode.Split10s](casinoRules),\r\n        dependencies: [],\r\n        name: '10,10'\r\n    },\r\n    [HandCode.SplitAs]: {\r\n        code: HandCode.SplitAs,\r\n        decisionSet: handDecisionSetGetters[HandCode.SplitAs](casinoRules),\r\n        dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.blackjackPeek],\r\n        name: 'A,A'\r\n    },\r\n    [HandCode.Soft13]: {\r\n        code: HandCode.Soft13,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft13](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 13'\r\n    },\r\n    [HandCode.Soft14]: {\r\n        code: HandCode.Soft14,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft14](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 14'\r\n    },\r\n    [HandCode.Soft15]: {\r\n        code: HandCode.Soft15,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft15](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 15'\r\n    },\r\n    [HandCode.Soft16]: {\r\n        code: HandCode.Soft16,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft16](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 16'\r\n    },\r\n    [HandCode.Soft17]: {\r\n        code: HandCode.Soft17,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft17](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Soft 17'\r\n    },\r\n    [HandCode.Soft18]: {\r\n        code: HandCode.Soft18,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft18](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\r\n        name: 'Soft 18'\r\n    },\r\n    [HandCode.Soft19]: {\r\n        code: HandCode.Soft19,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft19](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\r\n        name: 'Soft 19'\r\n    },\r\n    [HandCode.Soft20]: {\r\n        code: HandCode.Soft20,\r\n        decisionSet: handDecisionSetGetters[HandCode.Soft20](casinoRules),\r\n        dependencies: [],\r\n        name: 'Soft 20'\r\n    },\r\n    /* Soft 21 => Either Blackjack or maximum score! This hand doesn't need training */\r\n    /* Hard 4 => Only possible with 2,2. Covered in Split hands */\r\n    [HandCode.Hard5]: {\r\n        code: HandCode.Hard5,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard5](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 5'\r\n    },\r\n    [HandCode.Hard6]: {\r\n        code: HandCode.Hard6,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard6](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 6'\r\n    },\r\n    [HandCode.Hard7]: {\r\n        code: HandCode.Hard7,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard7](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 7'\r\n    },\r\n    [HandCode.Hard8]: {\r\n        code: HandCode.Hard8,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard8](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 8'\r\n    },\r\n    [HandCode.Hard9]: {\r\n        code: HandCode.Hard9,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard9](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Hard 9'\r\n    },\r\n    [HandCode.Hard10]: {\r\n        code: HandCode.Hard10,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard10](casinoRules),\r\n        dependencies: [CasinoRulesKeys.doubling],\r\n        name: 'Hard 10'\r\n    },\r\n    [HandCode.Hard11]: {\r\n        code: HandCode.Hard11,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard11](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.doubling,\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: 'Hard 11'\r\n    },\r\n    [HandCode.Hard12]: {\r\n        code: HandCode.Hard12,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard12](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 12'\r\n    },\r\n    [HandCode.Hard13]: {\r\n        code: HandCode.Hard13,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard13](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 13'\r\n    },\r\n    [HandCode.Hard14]: {\r\n        code: HandCode.Hard14,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard14](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n        name: 'Hard 14'\r\n    },\r\n    [HandCode.Hard15]: {\r\n        code: HandCode.Hard15,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard15](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: 'Hard 15'\r\n    },\r\n    [HandCode.Hard16]: {\r\n        code: HandCode.Hard16,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard16](casinoRules),\r\n        dependencies: [CasinoRulesKeys.surrender],\r\n        name: 'Hard 16'\r\n    },\r\n    [HandCode.Hard17]: {\r\n        code: HandCode.Hard17,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard17](casinoRules),\r\n        dependencies: [\r\n            CasinoRulesKeys.surrender,\r\n            CasinoRulesKeys.blackjackPeek,\r\n            CasinoRulesKeys.dealerHitsSoft17\r\n        ],\r\n        name: 'Hard 17'\r\n    },\r\n    [HandCode.Hard18]: {\r\n        code: HandCode.Hard18,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard18](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 18'\r\n    },\r\n    [HandCode.Hard19]: {\r\n        code: HandCode.Hard19,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard19](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 19'\r\n    },\r\n    [HandCode.Hard20]: {\r\n        code: HandCode.Hard20,\r\n        decisionSet: handDecisionSetGetters[HandCode.Hard20](casinoRules),\r\n        dependencies: [],\r\n        name: 'Hard 20'\r\n    }\r\n    /* Hard 21 => Maximum score! This hand doesn't need training */\r\n});\r\n\r\nexport const getUntrainedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    selectedHands?: SelectedHands\r\n) =>\r\n    getSelectedTrainingHands(trainingHands, selectedHands).filter(\r\n        (trainingHand) => getUntrainedDealerSymbols(trainingProgress[trainingHand.code]).length > 0\r\n    );\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CardValues,\r\n    SimpleCardSymbol,\r\n    SpecialCardSymbol,\r\n    TenPointsCardSymbol\r\n} from '../types';\r\nimport { cartesianProduct, getObjectKeys, getRandomItem, removeDuplicates } from '../utils';\r\n\r\nconst cardsValue: CardValues = {\r\n    [SimpleCardSymbol.Ace]: [1, 11],\r\n    [SimpleCardSymbol.Two]: [2],\r\n    [SimpleCardSymbol.Three]: [3],\r\n    [SimpleCardSymbol.Four]: [4],\r\n    [SimpleCardSymbol.Five]: [5],\r\n    [SimpleCardSymbol.Six]: [6],\r\n    [SimpleCardSymbol.Seven]: [7],\r\n    [SimpleCardSymbol.Eight]: [8],\r\n    [SimpleCardSymbol.Nine]: [9],\r\n    [SimpleCardSymbol.Ten]: [10],\r\n    [SpecialCardSymbol.Jack]: [10],\r\n    [SpecialCardSymbol.Queen]: [10],\r\n    [SpecialCardSymbol.King]: [10]\r\n};\r\n\r\nexport const createCard = (symbol: CardSymbol, suit?: CardSuit, isHoleCard?: boolean): Card => ({\r\n    isHoleCard,\r\n    isRandom: suit !== undefined,\r\n    suit: suit || getRandomSuit(),\r\n    symbol\r\n});\r\n\r\nconst suits = [CardSuit.clubs, CardSuit.diamonds, CardSuit.hearts, CardSuit.spades];\r\n\r\nconst symbols = getObjectKeys(cardsValue);\r\n\r\nconst deck = cartesianProduct(symbols, suits, createCard);\r\n\r\nexport const getCardEffectiveValue = (card: Card): number => {\r\n    const values = getCardValues(card);\r\n    return values[values.length - 1];\r\n};\r\n\r\nexport const getCardsValues = (cards: Card[], options?: { peeking?: boolean }) => {\r\n    const cardsValues = cards\r\n        .filter((card) => options?.peeking || !card.isHoleCard)\r\n        .map((card) => getCardValues(card));\r\n    const cardsAggregatedValues = cardsValues.reduce(\r\n        (reducedValues, currentValues) =>\r\n            cartesianProduct(reducedValues, currentValues, (x, y) => x + y),\r\n        [0]\r\n    );\r\n    return removeDuplicates(cardsAggregatedValues);\r\n};\r\n\r\nconst getCardValues = (card: Card): number[] => cardsValue[card.symbol];\r\n\r\nexport const getRandomCard = (options?: { isHoleCard?: boolean }) => {\r\n    let randomCard = getRandomItem(deck);\r\n    if (options?.isHoleCard) {\r\n        randomCard = { ...randomCard, isHoleCard: true };\r\n    }\r\n    return randomCard;\r\n};\r\n\r\nexport const getRandomSuit = () => getRandomItem(suits);\r\n\r\nexport const revealHoleCard = (card: Card) => {\r\n    card.isHoleCard = false;\r\n};\r\n\r\nexport const simpleSymbolToSymbol = (simpleSymbol: SimpleCardSymbol): CardSymbol =>\r\n    simpleSymbol === SimpleCardSymbol.Ten ? getRandomItem(tenPointsSymbols) : simpleSymbol;\r\n\r\nexport const symbolToSimpleSymbol = (symbol: CardSymbol): SimpleCardSymbol =>\r\n    tenPointsSymbols.indexOf(symbol as SpecialCardSymbol) > -1\r\n        ? SimpleCardSymbol.Ten\r\n        : (symbol as SimpleCardSymbol);\r\n\r\nconst tenPointsSymbols: TenPointsCardSymbol[] = [\r\n    SimpleCardSymbol.Ten,\r\n    SpecialCardSymbol.Jack,\r\n    SpecialCardSymbol.Queen,\r\n    SpecialCardSymbol.King\r\n];\r\n\r\nexport const valueToSymbol = (number: number): CardSymbol =>\r\n    number === 10\r\n        ? getRandomItem(tenPointsSymbols)\r\n        : number === 1\r\n        ? SimpleCardSymbol.Ace\r\n        : (String(number) as CardSymbol);\r\n","import { CardSymbol, HandCode, SimpleCardSymbol } from '../types';\r\nimport { valueToSymbol, simpleSymbolToSymbol } from './card';\r\n\r\nexport const getHardHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const value = parseInt(handCode, 10);\r\n\r\n    const minValue = Math.max(2, value - 10);\r\n    const maxValue = Math.min(value - minValue, 10);\r\n\r\n    let firstValue = Math.floor(Math.random() * (maxValue - minValue) + minValue);\r\n    let secondValue = value - firstValue;\r\n\r\n    // If numbers are equal, we would be training a splittable hand. Change them when possible\r\n    // E.g. Transform a 7,7 (for 14) into a 6,8. Do not transform a 10,10 for 20\r\n    if (firstValue === secondValue && firstValue > minValue && firstValue < maxValue) {\r\n        firstValue++;\r\n        secondValue--;\r\n    }\r\n\r\n    return [valueToSymbol(firstValue), valueToSymbol(secondValue)];\r\n};\r\n\r\nexport const getSoftHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const handValues = handCode.split('/').map((s) => parseInt(s, 10));\r\n    const complementarySymbol = valueToSymbol(handValues[0] - 1);\r\n\r\n    // Make Ace the second card sometimes by randomly reversing the symbols\r\n    return Math.floor(Math.random() * 100) % 2\r\n        ? [complementarySymbol, SimpleCardSymbol.Ace]\r\n        : [SimpleCardSymbol.Ace, complementarySymbol];\r\n};\r\n\r\nexport const getSplitHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const splitSymbols = handCode.split(',') as SimpleCardSymbol[];\r\n    return splitSymbols.map(simpleSymbolToSymbol);\r\n};\r\n\r\nexport const isSoftHandCode = (handCode: HandCode) => handCode.includes('/');\r\n\r\nexport const isSplitHandCode = (handCode: HandCode) => handCode.includes(',');\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    Hand,\r\n    HandCode,\r\n    HandOutcome,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomItem } from '../utils';\r\nimport {\r\n    createCard,\r\n    getCardEffectiveValue,\r\n    getCardsValues,\r\n    getRandomCard,\r\n    revealHoleCard,\r\n    symbolToSimpleSymbol,\r\n    valueToSymbol\r\n} from './card';\r\nimport {\r\n    getHardHandSymbols,\r\n    getSoftHandSymbols,\r\n    getSplitHandSymbols,\r\n    isSoftHandCode,\r\n    isSplitHandCode\r\n} from './hand-code';\r\n\r\nexport const areHandsSplitAces = (hands: Hand[]) =>\r\n    hands.length > 1 &&\r\n    hands[0].cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hands[1].cards[0].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const canBeDealerBlackjack = (hand: Hand) => {\r\n    const visibleCard = hand.cards[0];\r\n    const cardSymbol = symbolToSimpleSymbol(visibleCard.symbol);\r\n    return cardSymbol === SimpleCardSymbol.Ace || cardSymbol === SimpleCardSymbol.Ten;\r\n};\r\n\r\nexport const canDouble = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(hand);\r\n    const isHandWithTwoCards = hand.cards.length === 2;\r\n    const isSingleHand = hands.length === 1;\r\n\r\n    const contains9To11 = hand.values.some((handValue) => [9, 10, 11].indexOf(handValue) > -1);\r\n    const is10To11 = handEffectiveValue === 10 || handEffectiveValue === 11;\r\n    const is9To11 = handEffectiveValue === 9 || is10To11;\r\n\r\n    return (\r\n        isHandWithTwoCards &&\r\n        (casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft && contains9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven && is9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven && is10To11)) &&\r\n        (isSingleHand || casinoRules[CasinoRulesKeys.doublingAfterSplit]) &&\r\n        (!areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces])\r\n    );\r\n};\r\n\r\nexport const canHit = (hands: Hand[], casinoRules: CasinoRules) =>\r\n    !areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces];\r\n\r\nexport const canSplit = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    hand.cards.length === 2 &&\r\n    getCardEffectiveValue(hand.cards[0]) === getCardEffectiveValue(hand.cards[1]) &&\r\n    casinoRules[CasinoRulesKeys.splitsNumber] >= handsNumber;\r\n\r\nexport const canSurrender = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    handsNumber === 1 && hand.cards.length === 2 && casinoRules[CasinoRulesKeys.surrender];\r\n\r\nexport const createDealerHand = (\r\n    casinoRules: CasinoRules,\r\n    dealerSymbol?: CardSymbol,\r\n    dealerSuit?: CardSuit\r\n) => {\r\n    const dealerCards: Card[] = [\r\n        dealerSymbol ? createCard(dealerSymbol, dealerSuit) : getRandomCard()\r\n    ];\r\n\r\n    if (casinoRules[CasinoRulesKeys.holeCard]) {\r\n        dealerCards.push(getRandomCard({ isHoleCard: true }));\r\n    }\r\n\r\n    return createHand(dealerCards);\r\n};\r\n\r\nexport const createHand = (cards: Card[], bet = 1): Hand => ({\r\n    bet,\r\n    cards: cards,\r\n    values: getCardsValues(cards)\r\n});\r\n\r\nexport const dealCard = (hand: Hand, card: Card) => {\r\n    hand.cards.push(card);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n\r\n// Called after player hitting, splitting or starting a split hand. It returns a card that\r\n// turns the current player hand into another untrained hand (against the current dealer card).\r\n// If there are no untrained hands (against the current dealer card) or no untrained hands can\r\n// be reached from the current player hand (e.g. a Hard 20), returns a random card\r\nexport const getCardForUntrainedHand = (\r\n    playerHand: Hand,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n): Card => {\r\n    const isPlayerHandSoft = playerHand.values.length > 1;\r\n    const playerHandValues = getCardsValues(playerHand.cards);\r\n\r\n    const valuesToUntrainedHands = Object.values(trainingHands)\r\n        .map((trainingHand) => {\r\n            const isHandUntrainedForDealerSymbol =\r\n                trainingProgress[trainingHand.code][dealerSymbol] === TrainingPairStatus.untrained;\r\n\r\n            let valueToReachThisHand: number;\r\n\r\n            if (isSplitHandCode(trainingHand.code)) {\r\n                // Untrained split hands can never be reached after user action\r\n                valueToReachThisHand = -1;\r\n            } else if (isSoftHandCode(trainingHand.code)) {\r\n                const currentHandMinValue = parseInt(trainingHand.code.split('/')[0], 10);\r\n                const softDifference = currentHandMinValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 3/13. Can reach 4/14+ but not 3/13- (equal or lower)\r\n                    valueToReachThisHand = softDifference > 0 ? softDifference : -1;\r\n                } else {\r\n                    // E.g. Player hand = 8. Can only 9/19 (soft hand)\r\n                    valueToReachThisHand = softDifference === 1 ? softDifference : -1;\r\n                }\r\n            } else {\r\n                const currentHandHardValue = parseInt(trainingHand.code, 10);\r\n                const hardDifference = currentHandHardValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 5/15. Can reach 12-15 but not 11- (soft hand) neither\r\n                    // 16+ (soft hand)\r\n                    const makesSoftHand = playerHandValues[1] + hardDifference <= 21;\r\n                    valueToReachThisHand =\r\n                        !makesSoftHand && hardDifference > 1 && hardDifference <= 10\r\n                            ? hardDifference\r\n                            : -1;\r\n                } else {\r\n                    // E.g. Player hand = 7. Can reach 9-17 but not 7- (equal or lower),\r\n                    // 8 (soft hand), 14 (split hand) neither 18+ (out of scope)\r\n                    valueToReachThisHand =\r\n                        hardDifference > 1 && // Lower & Soft hand\r\n                        hardDifference <= 10 && // Out of scope\r\n                        hardDifference !== playerHandValues[0] // Split hand\r\n                            ? hardDifference\r\n                            : -1;\r\n                }\r\n            }\r\n\r\n            return isHandUntrainedForDealerSymbol && valueToReachThisHand > -1\r\n                ? valueToReachThisHand\r\n                : -1;\r\n        })\r\n        .filter((value) => value > -1);\r\n\r\n    const nextCard: Card =\r\n        valuesToUntrainedHands.length > 0\r\n            ? createCard(valueToSymbol(getRandomItem(valuesToUntrainedHands)))\r\n            : getRandomCard();\r\n\r\n    return nextCard;\r\n};\r\n\r\nexport const getHandEffectiveValue = (hand: Hand) => {\r\n    let effectiveValue = hand.values[0];\r\n    if (hand.values.some((v) => v < 22)) {\r\n        effectiveValue = [...hand.values].reverse().find((v) => v < 22)!;\r\n    }\r\n    return effectiveValue;\r\n};\r\n\r\nexport const getHandValidValues = (hand: Hand): number[] => {\r\n    return hand.values.some((v) => v < 22) ? hand.values.filter((v) => v < 22) : [hand.values[0]];\r\n};\r\n\r\nexport const handCodeToHand = (handCode: HandCode): Hand => {\r\n    const handSymbols = isSplitHandCode(handCode)\r\n        ? getSplitHandSymbols(handCode)\r\n        : isSoftHandCode(handCode)\r\n        ? getSoftHandSymbols(handCode)\r\n        : getHardHandSymbols(handCode);\r\n\r\n    return createHand(handSymbols.map((symbol) => createCard(symbol)));\r\n};\r\n\r\nexport const handToHandCode = (hand: Hand): HandCode => {\r\n    const handSymbols = hand.cards.map((c) => symbolToSimpleSymbol(c.symbol));\r\n    const isSplitHand = handSymbols.length === 2 && handSymbols[0] === handSymbols[1];\r\n\r\n    return isSplitHand\r\n        ? (handSymbols.join(',') as HandCode)\r\n        : (getHandValidValues(hand).join('/') as HandCode);\r\n};\r\n\r\nexport const hasHoleCard = (hand: Hand) => hand.cards.length > 1 && hand.cards[1].isHoleCard;\r\n\r\nconst isAcesPair = (hand: Hand) =>\r\n    hand.cards.length === 2 &&\r\n    hand.cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hand.cards[1].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const isBlackjack = (hand: Hand, handsNumber: number) => {\r\n    return (\r\n        handsNumber === 1 &&\r\n        hand.cards.length === 2 &&\r\n        hand.values.length === 2 &&\r\n        hand.values[0] === 11 &&\r\n        hand.values[1] === 21\r\n    );\r\n};\r\n\r\nconst isBust = (hand: Hand) => {\r\n    return getHandEffectiveValue(hand) > 21;\r\n};\r\n\r\nexport const isDealerBlackjack = (hand: Hand) => {\r\n    const cardValues = getCardsValues(hand.cards, { peeking: true });\r\n    return (\r\n        hand.cards.length === 2 &&\r\n        cardValues.length === 2 &&\r\n        cardValues[0] === 11 &&\r\n        cardValues[1] === 21\r\n    );\r\n};\r\n\r\nexport const isFinished = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const isAcesPairHand = isAcesPair(hand);\r\n    return (\r\n        getHandEffectiveValue(hand) >= 21 ||\r\n        (areHandsSplitAces(hands) &&\r\n            ((isAcesPairHand && !canSplit(hand, hands.length, casinoRules)) ||\r\n                (!isAcesPairHand && !casinoRules[CasinoRulesKeys.hitSplitAces])))\r\n    );\r\n};\r\n\r\nexport const resolveHand = (\r\n    playerHand: Hand,\r\n    handsNumber: number,\r\n    dealerHand: Hand\r\n): HandOutcome => {\r\n    const playerHandValue = getHandEffectiveValue(playerHand);\r\n    const dealerHandValue = getHandEffectiveValue(dealerHand!);\r\n    const handOutcome = isBust(playerHand)\r\n        ? HandOutcome.bust\r\n        : isBlackjack(playerHand, handsNumber) && isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.push\r\n        : isBlackjack(playerHand, handsNumber)\r\n        ? HandOutcome.blackjack\r\n        : isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.dealerWins\r\n        : isBust(dealerHand!)\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue > dealerHandValue\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue === dealerHandValue\r\n        ? HandOutcome.push\r\n        : HandOutcome.dealerWins;\r\n\r\n    playerHand.outcome = handOutcome;\r\n    return handOutcome;\r\n};\r\n\r\nexport const revealDealerHoleCard = (hand: Hand) => {\r\n    revealHoleCard(hand.cards[1]);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n","import {\r\n    CasinoRules,\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPair,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys, getRandomItem } from '../utils';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { createDealerHand, handCodeToHand } from './hand';\r\nimport { getSelectedTrainingHands, getUntrainedTrainingHands } from './training-hand';\r\n\r\nexport const allTrainingPairsNumber = allDealerSymbols.length * Object.keys(HandCode).length;\r\n\r\nexport const getSpecificTrainingPair = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    casinoRules: CasinoRules\r\n): TrainingPair => {\r\n    return {\r\n        dealer: createDealerHand(casinoRules, dealerSymbol),\r\n        player: handCodeToHand(handCode)\r\n    };\r\n};\r\n\r\nexport const getUntrainedTrainingPair = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    gameConfig: GameConfig\r\n): TrainingPair => {\r\n    const untrainedTrainingHands = getUntrainedTrainingHands(\r\n        trainingHands,\r\n        trainingProgress,\r\n        gameConfig.selectedHandsOnly ? gameConfig.selectedHands : undefined\r\n    );\r\n\r\n    const randomTrainingHand =\r\n        untrainedTrainingHands.length > 0\r\n            ? getRandomItem(untrainedTrainingHands)\r\n            : getRandomItem(\r\n                  getSelectedTrainingHands(\r\n                      trainingHands,\r\n                      gameConfig.selectedHandsOnly ? gameConfig.selectedHands : undefined\r\n                  )\r\n              ); // In case all hands have been passed\r\n\r\n    const trainingHandStatus = trainingProgress[randomTrainingHand.code];\r\n    const untrainedDealerSymbols = getUntrainedDealerSymbols(trainingHandStatus);\r\n\r\n    const randomDealerSymbol =\r\n        untrainedDealerSymbols.length > 0\r\n            ? getRandomItem(untrainedDealerSymbols)\r\n            : getRandomItem(getObjectKeys(trainingHandStatus)); // In case all hands have been passed\r\n\r\n    return {\r\n        dealer: createDealerHand(gameConfig.casinoRules, randomDealerSymbol),\r\n        player: handCodeToHand(randomTrainingHand.code)\r\n    };\r\n};\r\n","import {\r\n    GameConfig,\r\n    HandCode,\r\n    SelectedHands,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingHandStatus,\r\n    TrainingPairRepresentation,\r\n    TrainingPairStatus,\r\n    TrainingProgress,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\nimport { allDealerSymbols } from './dealer-symbols';\r\nimport { getUntrainedTrainingHands } from './training-hand';\r\nimport { allTrainingPairsNumber } from './training-pair';\r\n\r\nexport const getDefaultTrainingStatus = (): TrainingStatus => ({\r\n    attemptedTrainingPairs: 0,\r\n    isCompleted: false,\r\n    isProgressBlocked: false,\r\n    missedTrainingPairs: [],\r\n    passedTrainingPairs: 0,\r\n    trainingProgress: Object.values(HandCode).reduce<TrainingProgress>(\r\n        (reducedTrainingProgress, handCode) => ({\r\n            ...reducedTrainingProgress,\r\n            [handCode]: allDealerSymbols.reduce<TrainingHandStatus>(\r\n                (reducedDealerSymbols, dealerSymbol) => ({\r\n                    ...reducedDealerSymbols,\r\n                    [dealerSymbol]: TrainingPairStatus.untrained\r\n                }),\r\n                {} as TrainingHandStatus\r\n            )\r\n        }),\r\n        {} as TrainingProgress\r\n    )\r\n});\r\n\r\nexport const getIsProgressBlocked = (\r\n    trainingStatus: TrainingStatus,\r\n    trainingHands: TrainingHands,\r\n    selectedHandsOnly: boolean,\r\n    selectedHands: SelectedHands\r\n) =>\r\n    selectedHandsOnly &&\r\n    getProgressPercentage(trainingStatus.attemptedTrainingPairs) < 100 &&\r\n    getUntrainedTrainingHands(trainingHands, trainingStatus.trainingProgress, selectedHands)\r\n        .length === 0;\r\n\r\nconst getNextMissedTrainingPairs = (\r\n    missedTrainingPairs: TrainingPairRepresentation[],\r\n    isHit: boolean,\r\n    handCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingPairRepresentation[] => {\r\n    return isHit\r\n        ? missedTrainingPairs.filter(\r\n              (missedTrainingPair) =>\r\n                  missedTrainingPair.dealerSymbol !== currentDealerSymbol ||\r\n                  missedTrainingPair.handCode !== handCode\r\n          )\r\n        : missedTrainingPairs.some(\r\n              (missedTrainingPair) =>\r\n                  missedTrainingPair.dealerSymbol === currentDealerSymbol &&\r\n                  missedTrainingPair.handCode === handCode\r\n          )\r\n        ? missedTrainingPairs\r\n        : [{ dealerSymbol: currentDealerSymbol, handCode }].concat(missedTrainingPairs);\r\n};\r\n\r\nexport const getNextTrainingStatus = (\r\n    trainingStatus: TrainingStatus,\r\n    trainingHands: TrainingHands,\r\n    gameConfig: GameConfig,\r\n    isHit: boolean,\r\n    currentHandCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingStatus => {\r\n    // The current trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol]\r\n    // value must be kept to update attemptedTrainingPairs and passedTrainingPairs\r\n    const currentHandTrainingStatus =\r\n        trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol];\r\n\r\n    trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol] = isHit\r\n        ? TrainingPairStatus.passed\r\n        : TrainingPairStatus.missed;\r\n\r\n    const nextAttemptedTrainingPairs =\r\n        trainingStatus.attemptedTrainingPairs +\r\n        (currentHandTrainingStatus === TrainingPairStatus.untrained ? 1 : 0);\r\n\r\n    const nextMissedTrainingPairs = getNextMissedTrainingPairs(\r\n        trainingStatus.missedTrainingPairs,\r\n        isHit,\r\n        currentHandCode,\r\n        currentDealerSymbol\r\n    );\r\n\r\n    const nextPassedTrainingHands =\r\n        trainingStatus.passedTrainingPairs +\r\n        (isHit && currentHandTrainingStatus !== TrainingPairStatus.passed\r\n            ? 1\r\n            : !isHit && currentHandTrainingStatus === TrainingPairStatus.passed\r\n            ? -1\r\n            : 0);\r\n\r\n    const nextTrainingStatus = {\r\n        attemptedTrainingPairs: nextAttemptedTrainingPairs,\r\n        isCompleted: isTrainingCompleted(nextPassedTrainingHands),\r\n        isProgressBlocked: false,\r\n        missedTrainingPairs: nextMissedTrainingPairs,\r\n        passedTrainingPairs: nextPassedTrainingHands,\r\n        trainingProgress: trainingStatus.trainingProgress\r\n    };\r\n\r\n    nextTrainingStatus.isProgressBlocked = getIsProgressBlocked(\r\n        nextTrainingStatus,\r\n        trainingHands,\r\n        gameConfig.selectedHandsOnly,\r\n        gameConfig.selectedHands\r\n    );\r\n\r\n    return nextTrainingStatus;\r\n};\r\n\r\nexport const getProgressPercentage = (attemptedTrainingPairs: number) =>\r\n    Math.floor((attemptedTrainingPairs * 1000) / allTrainingPairsNumber) / 10;\r\n\r\nexport const isTrainingCompleted = (passedTrainingPairs: number) =>\r\n    passedTrainingPairs === allTrainingPairsNumber;\r\n\r\nconst reduceTrainingHandProgress = (\r\n    handCode: HandCode,\r\n    trainingHandStatus: TrainingHandStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus =>\r\n    getObjectKeys(trainingHandStatus).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, dealerSymbol) =>\r\n            reduceTrainingPairProgress(\r\n                handCode,\r\n                dealerSymbol,\r\n                trainingHandStatus[dealerSymbol],\r\n                reducedTrainingStatus\r\n            ),\r\n        reducedTrainingStatus\r\n    );\r\n\r\nconst reduceTrainingPairProgress = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingPairStatus: TrainingPairStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus => {\r\n    return {\r\n        attemptedTrainingPairs:\r\n            reducedTrainingStatus.attemptedTrainingPairs +\r\n            (trainingPairStatus !== TrainingPairStatus.untrained ? 1 : 0),\r\n        isCompleted: false,\r\n        isProgressBlocked: false,\r\n        missedTrainingPairs:\r\n            trainingPairStatus === TrainingPairStatus.missed\r\n                ? reducedTrainingStatus.missedTrainingPairs.concat([\r\n                      {\r\n                          dealerSymbol,\r\n                          handCode\r\n                      }\r\n                  ])\r\n                : reducedTrainingStatus.missedTrainingPairs,\r\n        passedTrainingPairs:\r\n            reducedTrainingStatus.passedTrainingPairs +\r\n            (trainingPairStatus === TrainingPairStatus.passed ? 1 : 0),\r\n        trainingProgress: reducedTrainingStatus.trainingProgress\r\n    };\r\n};\r\n\r\nexport const retrieveTrainingStatus = (\r\n    trainingProgress: TrainingProgress,\r\n    trainingHands: TrainingHands,\r\n    gameConfig: GameConfig\r\n): TrainingStatus => {\r\n    const trainingStatus = getObjectKeys(trainingProgress).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, handCode) =>\r\n            reduceTrainingHandProgress(handCode, trainingProgress[handCode], reducedTrainingStatus),\r\n        {\r\n            attemptedTrainingPairs: 0,\r\n            isCompleted: false,\r\n            isProgressBlocked: false,\r\n            missedTrainingPairs: [],\r\n            passedTrainingPairs: 0,\r\n            trainingProgress: trainingProgress\r\n        } as TrainingStatus\r\n    );\r\n\r\n    trainingStatus.isCompleted = isTrainingCompleted(trainingStatus.passedTrainingPairs);\r\n    trainingStatus.isProgressBlocked = getIsProgressBlocked(\r\n        trainingStatus,\r\n        trainingHands,\r\n        gameConfig.selectedHandsOnly,\r\n        gameConfig.selectedHands\r\n    );\r\n\r\n    return trainingStatus;\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, initialRouteName, RouteNames } from '../../types';\r\n\r\nexport interface ConfigButtonProps {\r\n    isEnabled: boolean;\r\n    isProgressBlocked: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nexport const ConfigButton: React.FC<ConfigButtonProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          if (props.routeName === initialRouteName) {\r\n                              props.navigation.navigate(RouteNames.configMenu);\r\n                          } else {\r\n                              props.navigation.goBack();\r\n                          }\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {props.routeName === initialRouteName ? (\r\n                <React.Fragment>\r\n                    <Svg height={24} viewBox=\"340 140 280 279.416\" width={24}>\r\n                        <Path\r\n                            fill=\"white\"\r\n                            d=\"M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083\r\n\tc-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333\r\n\tL362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25\r\n\tc2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916\r\n\th51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25\r\n\tc4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667\r\n\tS533.667,250.25,533.667,280S509.75,333.666,480,333.666z\"\r\n                        />\r\n                    </Svg>\r\n                    {props.isProgressBlocked && props.progress < 100 && (\r\n                        <View\r\n                            style={{\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                bottom: 8\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'black', fontWeight: 'bold' }}>⚠️</Text>\r\n                        </View>\r\n                    )}\r\n                </React.Fragment>\r\n            ) : (\r\n                <Svg height={24} viewBox=\"0 0 352 512\" width={24}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n                    />\r\n                </Svg>\r\n            )}\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { G, Path } from 'react-native-svg';\r\nimport { dangerColor, splitColor } from '../../constants';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface EarningsIndicatorProps {\r\n    earnings: number;\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n}\r\n\r\nexport const EarningsIndicator: React.FC<EarningsIndicatorProps> = (props) => {\r\n    const earningsColor =\r\n        props.earnings > 0 ? splitColor : props.earnings < 0 ? dangerColor : 'white';\r\n\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.earningsChart);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: earningsColor, fontSize: 20 }}>\r\n                    {`${props.earnings > 0 ? '+' : ''}${props.earnings}`}\r\n                </Text>\r\n                <Svg height={24} viewBox=\"0 0 468 468\" width={24} style={{ marginTop: 2 }}>\r\n                    <G transform=\"translate(0,468) scale(0.078000,-0.078000)\">\r\n                        <Path\r\n                            fill={earningsColor}\r\n                            d=\"M2600 5595 c0 -237 -3 -305 -12 -305 -7 0 -63 -5 -125 -10 -140 -12\r\n                    -299 -49 -398 -91 -11 -4 -49 -20 -85 -35 -304 -124 -635 -421 -789 -706 -33\r\n                    -63 -80 -169 -88 -202 -35 -143 -41 -258 -23 -421 37 -323 180 -591 420 -785\r\n                    77 -62 83 -66 116 -87 28 -18 244 -126 279 -140 27 -10 103 -36 115 -38 19 -5\r\n                    100 -27 120 -35 59 -20 254 -55 418 -75 l52 -7 0 -515 0 -516 -82 6 c-76 5\r\n                    -198 30 -223 45 -5 4 -12 7 -15 8 -71 14 -269 163 -285 215 -4 11 -10 19 -14\r\n                    19 -12 0 -75 133 -95 200 l-17 55 -410 -3 -410 -2 6 -63 c17 -165 65 -343 132\r\n                    -487 26 -54 99 -185 115 -205 4 -5 27 -35 51 -65 72 -93 202 -215 327 -306 60\r\n                    -44 244 -154 257 -154 5 0 25 -9 44 -19 34 -18 167 -63 264 -90 62 -17 188\r\n                    -31 276 -31 l79 0 0 -325 0 -325 375 0 375 0 2 332 3 333 85 6 c121 9 341 58\r\n                    430 96 8 3 18 7 22 7 3 1 10 4 14 8 4 5 13 8 20 8 16 0 162 70 249 119 39 22\r\n                    77 44 85 48 8 4 20 12 27 17 7 6 36 27 64 46 70 47 221 181 267 237 20 24 47\r\n                    57 60 71 36 42 132 200 162 267 104 232 133 496 79 720 -11 44 -21 89 -24 100\r\n                    -7 28 -110 235 -132 264 -193 254 -402 410 -708 524 -138 51 -348 95 -495 102\r\n                    -58 3 -129 8 -158 11 l-52 5 2 502 3 502 58 -2 c154 -5 367 -94 455 -188 66\r\n                    -71 103 -148 110 -230 l5 -65 431 0 432 0 -4 38 c-4 47 -29 151 -52 222 -141\r\n                    430 -441 791 -800 962 -133 63 -169 78 -235 94 -5 2 -44 12 -86 23 -42 11\r\n                    -123 25 -180 31 -57 6 -112 13 -121 16 -17 5 -18 28 -18 290 l0 284 -375 0\r\n                    -375 0 0 -305z m0 -1585 l0 -450 -57 0 c-52 1 -84 6 -159 23 -30 7 -158 59\r\n                    -164 66 -3 3 -18 13 -35 21 -54 28 -151 128 -186 192 -32 59 -34 69 -34 158 0\r\n                    69 6 111 20 154 56 167 269 281 528 285 l87 1 0 -450z m975 -1485 c219 -17\r\n                    399 -118 472 -266 46 -93 48 -281 3 -367 -80 -153 -329 -259 -612 -261 l-88\r\n                    -1 0 448 c0 247 3 452 7 456 4 4 37 4 73 2 36 -3 101 -8 145 -11z\"\r\n                        />\r\n                    </G>\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface PrecisionIndicatorProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    precision: number;\r\n}\r\n\r\nexport const PrecisionIndicator: React.FC<PrecisionIndicatorProps> = (props) => {\r\n    const precision = Math.floor(props.precision * 1000) / 10;\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.missedPairs);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{precision}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M784.5,368.7L990,163.2l-166.9,11.6L834.7,7.9L629.2,213.4l-9,128.5L499.6,462.6c-10.1,0.1-20.1,3.9-27.8,11.6c-15.5,15.5-15.5,40.6,0,56.1c15.5,15.5,40.6,15.5,56.1,0c9.6-9.6,13.3-23,10.9-35.4L656,377.7L784.5,368.7z M671.4,232.6l112-112l-7.1,101l101-7l-112,112l-101,7L671.4,232.6z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M967.8,357.1l-35.6,33.2c10.7,41.4,15.4,84.1,13.9,127.5c-8.6,246-215.7,439.2-461.7,430.6c-246-8.6-439.2-215.7-430.6-461.7c8.6-246,215.7-439.2,461.7-430.6c28.6,1,56.9,5,84.6,11.4l37.7-35.2c-39.3-11.5-79.9-18.2-120.9-19.6C247,3.3,19.7,215.2,10.3,485.2C0.9,755.1,212.8,982.3,482.7,991.8c269.9,9.4,497.2-202.5,506.6-472.4C991.3,463.9,984,409.5,967.8,357.1z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M698.1,426.1c7,18.4,11.6,37.7,13.3,57.6c10.2,116.6-76.4,219.9-193.1,230.1C401.7,724,298.5,637.4,288.3,520.8c-10.2-116.6,76.4-219.9,193-230.1c25.8-2.3,51.7,0.3,76.3,7.3l-4-45.6c-24.8-5.3-50.5-7.1-76.1-4.8C337.1,259.8,232.8,384.1,245,524.5C257.3,665,381.6,769.3,522.1,757C662.6,744.7,766.9,620.5,754.6,480c-1.7-19.8-5.8-39.1-11.9-57.7L698.1,426.1z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface NavBarProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n}\r\n\r\nexport const ProgressIndicator: React.FC<NavBarProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.trainingPairs);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{props.progress}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M819.5,386.3h-2.5c-18.4,0-33.4,5.3-48,14.3c-12.7-37.1-45-63.7-86.6-63.7c-18.4,0-35.9,5.3-50.4,14.3c-12.7-37-45-63.7-86.6-63.7c-16.2,0-31.3,4.1-44.7,11.2v-95.3c0-51.9-39.3-94-91.6-94s-94.7,42.1-94.7,94v365l-57.5-57.3c-37-36.7-102.4-31.5-133.9,0s-52.1,94.9-7,140l264.5,262.7c5.5,5.4,11.5,9.9,17.8,13.8c48.2,39.3,103.5,62.6,220.3,62.6c266.9,0,291.6-144,291.6-321.6v-188C910.1,428.4,871.8,386.3,819.5,386.3z M860.3,668.4c0,150.3-0.7,272.1-241.8,272.1c-102.1,0-163.4-22.8-209.9-68.9L158.3,622.9c-22.2-22.2-16.6-50.5,1.6-68.6c18.1-18.1,51.4-18.8,68.9-1.4c0,0,43.9,43.7,81.8,81.3c28.6,28.5,53.8,53.5,53.8,53.5V213.2c0-24.6,20.1-44.5,44.9-44.5c24.8,0,41.7,19.9,41.7,44.5V515h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.4-0.5-5h0.5V391.3c0-24.6,17.9-44.5,42.7-44.5c0,0,43.9-0.6,43.9,44.5v163.3h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.3-0.5-5h0.5V440.8c0-24.6,17.6-44.5,42.4-44.5c0,0,44.8,2.8,44.8,44.5v143.5h0.5c-0.3,1.6-0.5,3.3-0.5,4.9c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.3-11.1,24.3-24.7c0-1.7-0.2-3.3-0.5-4.9h0.5v-98c0-24.6,18.5-44.5,43.3-44.5c0,0,43.4-1.8,43.4,44.5C860.3,486.3,860.3,628.4,860.3,668.4z M277.5,343.4v-83.1c-7.9-17.7-12.4-37.3-12.4-58c0-78.8,63.9-142.7,142.7-142.7s142.7,63.9,142.7,142.7c0,10.8-1.3,21.2-3.6,31.3c17.9,0.7,34.1,8.1,45.9,20.1c4.6-16.4,7.3-33.5,7.3-51.4C600,96.1,513.9,10,407.7,10S215.4,96.1,215.4,202.3C215.4,258.1,239.4,308.3,277.5,343.4z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import { OnBoardingSections, OnBoardingStep, OnBoardingStepEvent, RouteNames } from '../types';\r\n\r\nexport const onBoardingSteps: OnBoardingStep[] = [\r\n    {\r\n        activeSection: [OnBoardingSections.tableActions],\r\n        event: OnBoardingStepEvent.startRound,\r\n        hideNextButton: true,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click Random to start training a random pair'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tablePlayerHands],\r\n        hidePreviousButton: true,\r\n        text: 'This is your hand'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableDealerHand],\r\n        text: \"This is the dealer's hand\"\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableDealerHand, OnBoardingSections.tablePlayerHands],\r\n        text: 'training pair = player hand vs dealer up card'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableActions],\r\n        event: OnBoardingStepEvent.playerAction,\r\n        hideNextButton: true,\r\n        hidePreviousButton: true,\r\n        text: 'Chose an action for each of your hands'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableFeedback],\r\n        hidePreviousButton: true,\r\n        text: 'Confirm whether you chose the right action'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.progressIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of trained pairs'\r\n    },\r\n    {\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.trainingPairs);\r\n        },\r\n        text: 'Click on it to train pairs or view their status'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.precisionIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of passed pairs'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.missedPairs],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.missedPairs);\r\n        },\r\n        text: \"Click on it to see the pairs you've missed\"\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.earningsIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows your cash status'\r\n    },\r\n    {\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.earningsChart);\r\n        },\r\n        text: 'Click on it to see your earnings historical'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.configMenuButton],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click here to access the configuration menu'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.basicStrategyTable],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.configMenu);\r\n        },\r\n        text: 'View and memorize the basic strategy table'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.casinoRules],\r\n        text: 'Chose the casino rules you want to train with'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.appSettings],\r\n        text: 'Speed up your training with additional options'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.resetTraining],\r\n        text: 'Start training over and master basic strategy'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { StyleProp, View, ViewStyle } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { OnBoardingSections } from '../types';\r\n\r\nexport interface OnBoardingSectionProps {\r\n    isHighlighted?: OnBoardingSections | boolean;\r\n    onBoardingStep: number;\r\n    style?: StyleProp<ViewStyle> | ((isHighlighted: boolean) => StyleProp<ViewStyle>);\r\n}\r\n\r\nexport const OnBoardingSection: React.FC<OnBoardingSectionProps> = (props) => {\r\n    const isOnboardingActive = props.onBoardingStep > -1;\r\n    const isHighlighted =\r\n        isOnboardingActive &&\r\n        (typeof props.isHighlighted === 'boolean'\r\n            ? props.isHighlighted\r\n            : props.isHighlighted !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep] &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection!.indexOf(props.isHighlighted) >\r\n                  -1);\r\n    const style =\r\n        props.style && typeof props.style === 'function' ? props.style(isHighlighted) : props.style;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                width: '100%',\r\n                ...(style as {})\r\n            }}\r\n        >\r\n            {props.children}\r\n            {isOnboardingActive && !isHighlighted && (\r\n                <View\r\n                    style={{\r\n                        backgroundColor: 'black',\r\n                        opacity: 0.5,\r\n                        top: 0,\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        right: 0,\r\n                        left: 0\r\n                    }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { Animated, View } from 'react-native';\r\nimport { tableColor } from '../constants';\r\nimport { getProgressPercentage } from '../logic/training-status';\r\nimport { AppNavigation, OnBoardingSections, Player, TrainingStatus } from '../types';\r\nimport { ConfigButton } from './nav-bar-items/config-button';\r\nimport { EarningsIndicator } from './nav-bar-items/earnings-indicator';\r\nimport { PrecisionIndicator } from './nav-bar-items/precision-indicator';\r\nimport { ProgressIndicator } from './nav-bar-items/progress-indicator';\r\nimport { OnBoardingSection } from './onboarding-section';\r\n\r\nexport interface NavBarProps {\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    player: Player;\r\n    routeName?: string;\r\n    trainingStatus: TrainingStatus;\r\n}\r\n\r\nconst shakeAmplitude = 6;\r\nconst shakeDuration = 40;\r\nconst useNativeDriver = true;\r\n\r\nconst animateIndicator = (position: Animated.Value) => {\r\n    Animated.sequence([\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: 0,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        })\r\n    ]).start();\r\n};\r\n\r\nexport const NavBar: React.FC<NavBarProps> = (props) => {\r\n    const precision =\r\n        props.trainingStatus.attemptedTrainingPairs > 0\r\n            ? props.trainingStatus.passedTrainingPairs / props.trainingStatus.attemptedTrainingPairs\r\n            : 0;\r\n\r\n    const earningsPosition = useMemo(() => new Animated.Value(0), []);\r\n    const precisionPosition = useMemo(() => new Animated.Value(0), []);\r\n    const progressPosition = useMemo(() => new Animated.Value(0), []);\r\n\r\n    const progressPercentage = getProgressPercentage(props.trainingStatus.attemptedTrainingPairs);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(earningsPosition);\r\n    }, [props.player.cash]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(precisionPosition);\r\n    }, [precision]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(progressPosition);\r\n    }, [progressPercentage]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                height: 48,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.earningsIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '25%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: earningsPosition }]\r\n                    }}\r\n                >\r\n                    <EarningsIndicator\r\n                        earnings={props.player.cash}\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.precisionIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: precisionPosition }]\r\n                    }}\r\n                >\r\n                    <PrecisionIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        precision={precision}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.progressIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: progressPosition }]\r\n                    }}\r\n                >\r\n                    <ProgressIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        progress={progressPercentage}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.configMenuButton}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    alignItems: 'center',\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '15%'\r\n                })}\r\n            >\r\n                <ConfigButton\r\n                    isEnabled={props.onBoardingStep === -1}\r\n                    isProgressBlocked={props.trainingStatus.isProgressBlocked}\r\n                    navigation={props.navigation}\r\n                    progress={progressPercentage}\r\n                    routeName={props.routeName}\r\n                />\r\n            </OnBoardingSection>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\n\r\ninterface ButtonProps {\r\n    backgroundColor?: string;\r\n    height: number | string;\r\n    isEnabled: boolean;\r\n    marginBottom?: number;\r\n    marginTop?: number;\r\n    onPress: () => void;\r\n    text: string;\r\n    textColor?: string;\r\n    textSize?: number;\r\n    width: number | string;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = (props) => (\r\n    <TouchableOpacity\r\n        style={{\r\n            height: props.height,\r\n            marginBottom: props.marginBottom,\r\n            marginTop: props.marginTop,\r\n            width: props.width\r\n        }}\r\n        onPress={props.isEnabled ? props.onPress : undefined}\r\n    >\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                backgroundColor: props.backgroundColor,\r\n                height: '100%',\r\n                justifyContent: 'center',\r\n                opacity: props.isEnabled ? 1 : 0.4,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: props.textColor || 'white',\r\n                    fontSize: props.textSize || 20,\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                {props.text}\r\n            </Text>\r\n        </View>\r\n    </TouchableOpacity>\r\n);\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { Button } from './button';\r\n\r\ninterface OnboardingBarProps {\r\n    exitOnboarding: () => void;\r\n    nextStepHandler: () => void;\r\n    onBoardingStep: number;\r\n    previousStepHandler: () => void;\r\n}\r\n\r\nexport const OnboardingBar: React.FC<OnboardingBarProps> = (props) => {\r\n    const currentStep = onBoardingSteps[props.onBoardingStep];\r\n\r\n    return (\r\n        <View style={{ alignItems: 'center', backgroundColor: 'white', flexDirection: 'row' }}>\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep > 0 && !currentStep.hidePreviousButton && (\r\n                    <Button\r\n                        height={56}\r\n                        isEnabled={true}\r\n                        onPress={props.previousStepHandler}\r\n                        text=\"⬅️\"\r\n                        textColor=\"black\"\r\n                        textSize={24}\r\n                        width=\"100%\"\r\n                    />\r\n                )}\r\n            </View>\r\n\r\n            <View style={{ width: '70%' }}>\r\n                <Text style={{ color: 'black', fontSize: 20, padding: 16 }}>\r\n                    {currentStep.text}\r\n                </Text>\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep < onBoardingSteps.length - 1 &&\r\n                    !currentStep.hideNextButton && (\r\n                        <Button\r\n                            height={56}\r\n                            isEnabled={true}\r\n                            onPress={props.nextStepHandler}\r\n                            text=\"➡️\"\r\n                            textColor=\"black\"\r\n                            textSize={24}\r\n                            width=\"100%\"\r\n                        />\r\n                    )}\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                <Button\r\n                    height={56}\r\n                    isEnabled={true}\r\n                    onPress={props.exitOnboarding}\r\n                    text=\"❌\"\r\n                    textColor=\"black\"\r\n                    textSize={20}\r\n                    width=\"100%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import {\r\n    Card,\r\n    Hand,\r\n    HandOutcome,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { createHand, dealCard, getCardForUntrainedHand, handToHandCode, resolveHand } from './hand';\r\n\r\nexport const createPlayer = (): Player => ({\r\n    cash: 0,\r\n    earningsHistorical: [0],\r\n    handIndex: 0,\r\n    hands: [],\r\n    lastActionHand: undefined\r\n});\r\n\r\nexport const hitCurrentHand = (\r\n    player: Player,\r\n    untrainedPairsPriority: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const nextCard = untrainedPairsPriority\r\n        ? getCardForUntrainedHand(currentHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(currentHand, nextCard);\r\n};\r\n\r\nexport const doubleCurrentHand = (player: Player, card: Card) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    dealCard(currentHand, card);\r\n    player.cash -= currentHand.bet;\r\n    currentHand.bet *= 2;\r\n};\r\n\r\nexport const getCurrentHand = (player: Player): Hand => player.hands[player.handIndex];\r\n\r\nexport const initializeHands = (player: Player, initialHand: Hand) => {\r\n    player.cash -= initialHand.bet;\r\n    player.hands = [initialHand];\r\n    player.handIndex = 0;\r\n    player.lastActionHand = undefined;\r\n};\r\n\r\nexport const isLastHand = (player: Player) => player.hands.length - 1 <= player.handIndex;\r\n\r\nexport const resolvePlayerEarnings = (player: Player, dealerHand: Hand) =>\r\n    player.hands.reduce((earnings, hand) => {\r\n        const handOutcome = resolveHand(hand, player.hands.length, dealerHand);\r\n        return (\r\n            earnings +\r\n            (handOutcome === HandOutcome.blackjack\r\n                ? hand.bet * 2.5\r\n                : handOutcome === HandOutcome.playerWins\r\n                ? hand.bet * 2\r\n                : handOutcome === HandOutcome.push\r\n                ? hand.bet\r\n                : 0)\r\n        );\r\n    }, 0);\r\n\r\nexport const splitCurrentHand = (\r\n    player: Player,\r\n    untrainedPairsPriority: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const firstHand = createHand([currentHand.cards[0]]);\r\n    const secondHand = createHand([currentHand.cards[1]]);\r\n    player.cash -= secondHand.bet;\r\n    const nextCard = untrainedPairsPriority\r\n        ? getCardForUntrainedHand(firstHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(firstHand, nextCard);\r\n    player.hands.splice(player.handIndex, 1, firstHand, secondHand);\r\n};\r\n\r\nexport const startNextHand = (\r\n    player: Player,\r\n    untrainedPairsPriority: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    player.handIndex++;\r\n    const nextHand = player.hands[player.handIndex];\r\n    const nextCard = untrainedPairsPriority\r\n        ? getCardForUntrainedHand(nextHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(nextHand, nextCard);\r\n};\r\n\r\nexport const standCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n};\r\n\r\nexport const surrenderCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    player.cash += currentHand.bet / 2;\r\n    player.hands.splice(player.handIndex, 1);\r\n};\r\n","import { updatePlayerEarnings, updatePlayerEarningsHistorical } from '../async-storage';\r\nimport { CasinoRules, CasinoRulesKeys, GameConfig, Hand, Phases, Player } from '../types';\r\nimport { getRandomCard } from './card';\r\nimport {\r\n    dealCard,\r\n    getHandEffectiveValue,\r\n    getHandValidValues,\r\n    hasHoleCard,\r\n    revealDealerHoleCard\r\n} from './hand';\r\nimport { resolvePlayerEarnings } from './player';\r\n\r\nexport const handleDealerTurn = (\r\n    dealerHand: Hand,\r\n    gameConfig: GameConfig,\r\n    player: Player,\r\n    setDealerHand: (dealerHand: Hand) => void,\r\n    setPhase: (phase: Phases) => void,\r\n    setPlayer: (player: Player) => void\r\n) => {\r\n    let nextDealerHand = { ...dealerHand };\r\n\r\n    if (\r\n        gameConfig.isDealerAnimationEnabled &&\r\n        mustDealerDraw(nextDealerHand, gameConfig.casinoRules)\r\n    ) {\r\n        setTimeout(() => {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            } else {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n            // Setting the dealerHand will trigger this handler again, through useEffect\r\n        }, 1000);\r\n    } else {\r\n        if (!gameConfig.isDealerAnimationEnabled) {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            }\r\n\r\n            while (mustDealerDraw(nextDealerHand, gameConfig.casinoRules)) {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n        }\r\n\r\n        const playerEarnings = resolvePlayerEarnings(player, nextDealerHand);\r\n        const nextCash = player.cash + playerEarnings;\r\n        const nextEarningsHistorical = player.earningsHistorical.concat([nextCash]);\r\n        const nextPlayer: Player = {\r\n            ...player,\r\n            cash: nextCash,\r\n            earningsHistorical: nextEarningsHistorical\r\n        };\r\n\r\n        setPlayer(nextPlayer);\r\n        setPhase(Phases.finished);\r\n\r\n        updatePlayerEarnings(nextCash);\r\n        updatePlayerEarningsHistorical(nextEarningsHistorical);\r\n    }\r\n};\r\n\r\nconst mustDealerDraw = (dealerHand: Hand, casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(dealerHand);\r\n    return (\r\n        handEffectiveValue < 17 ||\r\n        (casinoRules[CasinoRulesKeys.dealerHitsSoft17] &&\r\n            getHandValidValues(dealerHand).length > 1 &&\r\n            handEffectiveValue === 17)\r\n    );\r\n};\r\n","import {\r\n    BaseDecisions,\r\n    DecisionEvaluation,\r\n    DynamicConditions,\r\n    DynamicDecision,\r\n    DynamicDecisions,\r\n    Hand,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    TrainingHands\r\n} from '../types';\r\nimport { symbolToSimpleSymbol } from './card';\r\nimport { handToHandCode } from './hand';\r\n\r\nexport const evaluateDecision = (\r\n    playerHand: Hand,\r\n    dealerHand: Hand,\r\n    trainingHands: TrainingHands,\r\n    dynamicConditions: DynamicConditions,\r\n    playerDecision: PlayerDecision\r\n): DecisionEvaluation => {\r\n    const handCode = handToHandCode(playerHand);\r\n    const trainingHand = trainingHands[handCode];\r\n    const dealerSymbol = symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const dynamicDecision = trainingHand.decisionSet[dealerSymbol];\r\n    const optimalDecision = evaluateDynamicDecision(dynamicDecision, dynamicConditions);\r\n\r\n    return {\r\n        dealerSymbol,\r\n        dynamicDecision,\r\n        handName: trainingHand.name,\r\n        isHit: playerDecision === optimalDecision\r\n    };\r\n};\r\n\r\nconst evaluateDynamicDecision = (\r\n    dynamicDecision: DynamicDecision,\r\n    dynamicConditions: DynamicConditions\r\n): PlayerDecision =>\r\n    dynamicDecision === DynamicDecisions.double_hit\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.double_stand\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.split_stand\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_surrender_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_split_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_stand\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.stand\r\n        : dynamicDecision;\r\n","import { Dictionary, GameConfig, HandCode } from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\n\r\nexport const getDefaultGameConfig = (): GameConfig => ({\r\n    casinoRules: getDefaultCasinoRules(),\r\n    isDealerAnimationEnabled: true,\r\n    isSoundEnabled: true,\r\n    selectedHands: Object.values(HandCode).reduce(\r\n        (hands, handCode) => ({ ...hands, [handCode]: true }),\r\n        {}\r\n    ) as Dictionary<boolean, HandCode>,\r\n    selectedHandsOnly: false,\r\n    untrainedPairsPriority: false\r\n});\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, Doubling } from '../../types';\r\n\r\ninterface DoublingPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const DoublingPicker: React.FC<DoublingPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.doubling}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.doubling]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextDoubling = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextDoubling > 0,\r\n                            [CasinoRulesKeys.doubling]: nextDoubling\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"Any pair\" value={Doubling.anyPair} />\r\n                    <Picker.Item label=\"9, 10, 11, S19, S20\" value={Doubling.nineToElevenSoft} />\r\n                    <Picker.Item label=\"9, 10, 11\" value={Doubling.nineToEleven} />\r\n                    <Picker.Item label=\"10, 11\" value={Doubling.tenToEleven} />\r\n                    <Picker.Item label=\"None\" value={Doubling.none} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Text, View } from 'react-native';\r\nimport { hitColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys } from '../../types';\r\n\r\ninterface RuleSwitcherProps {\r\n    casinoRules: CasinoRules;\r\n    fullWidth?: boolean;\r\n    hideLabel?: boolean;\r\n    isDisabled?: boolean;\r\n    paddingTop?: number;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    ruleName:\r\n        | CasinoRulesKeys.blackjackPeek\r\n        | CasinoRulesKeys.dealerHitsSoft17\r\n        | CasinoRulesKeys.doublingAfterSplit\r\n        | CasinoRulesKeys.hitSplitAces\r\n        | CasinoRulesKeys.holeCard\r\n        | CasinoRulesKeys.surrender;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const RuleSwitcher: React.FC<RuleSwitcherProps> = (props) => {\r\n    const SwitchCore = (\r\n        <Switch\r\n            onValueChange={\r\n                props.isDisabled\r\n                    ? undefined\r\n                    : (newValue) => {\r\n                          const nextCasinoRules = {\r\n                              ...props.casinoRules,\r\n                              [props.ruleName]: newValue\r\n                          };\r\n                          if (props.ruleName === CasinoRulesKeys.holeCard && !newValue) {\r\n                              nextCasinoRules[CasinoRulesKeys.blackjackPeek] = false;\r\n                          }\r\n                          props.setCasinoRules(nextCasinoRules);\r\n                          props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                      }\r\n            }\r\n            style={{ marginRight: 8 }}\r\n            trackColor={{ true: hitColor, false: 'white' }}\r\n            value={props.casinoRules[props.ruleName]}\r\n        />\r\n    );\r\n\r\n    return props.hideLabel ? (\r\n        SwitchCore\r\n    ) : (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                opacity: props.isDisabled ? 0.3 : undefined,\r\n                paddingTop: props.paddingTop !== undefined ? props.paddingTop : 16,\r\n                width: props.fullWidth === undefined || props.fullWidth ? '100%' : undefined\r\n            }}\r\n        >\r\n            {SwitchCore}\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {props.ruleName}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, SplitsNumber } from '../../types';\r\n\r\ninterface SplitsNumberPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const SplitsNumberPicker: React.FC<SplitsNumberPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.splitsNumber}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.splitsNumber]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextSplitsNumber = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.hitSplitAces]:\r\n                                props.casinoRules[CasinoRulesKeys.hitSplitAces] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.splitsNumber]: nextSplitsNumber\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"None\" value={SplitsNumber.none} />\r\n                    <Picker.Item label=\"1\" value={SplitsNumber.one} />\r\n                    <Picker.Item label=\"2\" value={SplitsNumber.two} />\r\n                    <Picker.Item label=\"3\" value={SplitsNumber.three} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import * as Linking from 'expo-linking';\r\nimport React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { colors } from '../constants';\r\nimport { allDealerSymbols } from '../logic/dealer-symbols';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    BaseDecisions,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    SplitsNumber\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nconst actionsAbbreviationMap: Dictionary<string, BaseDecisions | DynamicDecisions> = {\r\n    [BaseDecisions.hit]: 'H',\r\n    [BaseDecisions.stand]: 'S',\r\n    [DynamicDecisions.double_hit]: 'Dh',\r\n    [DynamicDecisions.double_stand]: 'Ds',\r\n    [DynamicDecisions.split_hit]: 'Ph',\r\n    [DynamicDecisions.split_stand]: 'Ps',\r\n    [DynamicDecisions.split_surrender_hit]: 'Pr',\r\n    [DynamicDecisions.surrender_hit]: 'Rh',\r\n    [DynamicDecisions.surrender_split_hit]: 'Rp',\r\n    [DynamicDecisions.surrender_stand]: 'Rs'\r\n};\r\n\r\nconst handCodesAbbreviationMap: Partial<Dictionary<string, HandCode>> = {\r\n    [HandCode.Split2s]: '2s',\r\n    [HandCode.Split3s]: '3s',\r\n    [HandCode.Split4s]: '4s',\r\n    [HandCode.Split5s]: '5s',\r\n    [HandCode.Split6s]: '6s',\r\n    [HandCode.Split7s]: '7s',\r\n    [HandCode.Split8s]: '8s',\r\n    [HandCode.Split9s]: '9s',\r\n    [HandCode.Split10s]: 'Xs',\r\n    [HandCode.SplitAs]: 'As',\r\n    [HandCode.Soft13]: 'A2',\r\n    [HandCode.Soft14]: 'A3',\r\n    [HandCode.Soft15]: 'A4',\r\n    [HandCode.Soft16]: 'A5',\r\n    [HandCode.Soft17]: 'A6',\r\n    [HandCode.Soft18]: 'A7',\r\n    [HandCode.Soft19]: 'A8',\r\n    [HandCode.Soft20]: 'A9'\r\n};\r\n\r\nconst cellWidth = Math.floor((100 * 100) / (allDealerSymbols.length + 1)) / 100;\r\n\r\ninterface TextCellProps {\r\n    backgroundColor?: string;\r\n}\r\n\r\nconst TextCell: React.FC<TextCellProps> = (props) => (\r\n    <Text\r\n        style={{\r\n            backgroundColor: props.backgroundColor,\r\n            color: 'white',\r\n            fontSize: 16,\r\n            marginVertical: 1,\r\n            paddingVertical: 2,\r\n            textAlign: 'center',\r\n            width: `${cellWidth}%`\r\n        }}\r\n    >\r\n        {props.children}\r\n    </Text>\r\n);\r\n\r\ninterface BasicStrategyTableProps {\r\n    casinoRules: CasinoRules;\r\n}\r\n\r\nexport const BasicStrategyTable: React.FC<BasicStrategyTableProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    return (\r\n        <ScrollView style={{ width: '100%' }}>\r\n            <Text\r\n                onPress={() => {\r\n                    Linking.openURL(\r\n                        'https://wizardofodds.com/games/blackjack/strategy/calculator/'\r\n                    );\r\n                }}\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20,\r\n                    fontStyle: 'italic',\r\n                    marginVertical: 16,\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                This basic strategy table is based on the data available at the Wizard of Odds basic\r\n                strategy calculator\r\n            </Text>\r\n\r\n            <View style={{ paddingHorizontal: 16, marginBottom: 16 }}>\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.blackjackPeek}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <DoublingPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={\r\n                        props.casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                        props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                    }\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <SplitsNumberPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </View>\r\n\r\n            <View style={{ flexDirection: 'row', width: '100%' }}>\r\n                {[''].concat(Object.values(allDealerSymbols)).map((dealerSymbol) => (\r\n                    <TextCell key={dealerSymbol}>{dealerSymbol}</TextCell>\r\n                ))}\r\n            </View>\r\n\r\n            {Object.values(HandCode).map((handCode) => {\r\n                const trainingHand = trainingHands[handCode];\r\n                return (\r\n                    <View key={handCode} style={{ flexDirection: 'row', width: '100%' }}>\r\n                        <TextCell>{handCodesAbbreviationMap[handCode] || handCode}</TextCell>\r\n                        {getObjectKeys(trainingHand.decisionSet).map((cardSymbol) => (\r\n                            <TextCell\r\n                                key={cardSymbol}\r\n                                backgroundColor={colors[trainingHand.decisionSet[cardSymbol]]}\r\n                            >\r\n                                {actionsAbbreviationMap[trainingHand.decisionSet[cardSymbol]]}\r\n                            </TextCell>\r\n                        ))}\r\n                    </View>\r\n                );\r\n            })}\r\n\r\n            <View style={{ paddingHorizontal: 16, marginVertical: 16 }}>\r\n                {getObjectKeys(actionsAbbreviationMap).map((action) => (\r\n                    <Text\r\n                        key={action}\r\n                        style={{\r\n                            backgroundColor: colors[action],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 8,\r\n                            paddingVertical: 4,\r\n                            marginBottom: 4\r\n                        }}\r\n                    >\r\n                        {actionsAbbreviationMap[action]} = {action}\r\n                    </Text>\r\n                ))}\r\n            </View>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\nexport const Divider: React.FC = () => (\r\n    <View\r\n        style={{\r\n            backgroundColor: 'white',\r\n            height: 2,\r\n            width: '100%'\r\n        }}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity } from 'react-native';\r\nimport { tableColor } from '../constants';\r\n\r\ninterface HelpIconProps {\r\n    onPress: () => void;\r\n}\r\n\r\nexport const HelpIcon: React.FC<HelpIconProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity onPress={props.onPress}>\r\n            <Text\r\n                style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: 16,\r\n                    color: tableColor,\r\n                    fontSize: 18,\r\n                    fontWeight: 'bold',\r\n                    marginLeft: 8,\r\n                    marginTop: 2,\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                ?\r\n            </Text>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Alert, Platform, ScrollView, Switch, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { Divider } from '../components/divider';\r\nimport { HelpIcon } from '../components/help-icon';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport {\r\n    dangerColor,\r\n    doubleColor,\r\n    hitColor,\r\n    splitColor,\r\n    standColor,\r\n    warningColor\r\n} from '../constants';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\nimport { getIsProgressBlocked } from '../logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    GameConfig,\r\n    HandCode,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    SelectedHands,\r\n    SplitsNumber,\r\n    TrainingHands,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype ConfigMenuProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    resetTrainingStatus: () => void;\r\n    setGameConfig: (gameConfig: GameConfig) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingStatus: TrainingStatus;\r\n};\r\n\r\nexport const ConfigMenu: React.FC<ConfigMenuProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n    const [isDealerAnimationEnabled, setIsDealerAnimationEnabled] = useState(\r\n        props.gameConfig.isDealerAnimationEnabled\r\n    );\r\n    const [isProgressBlocked, setIsProgressBlocked] = useState(\r\n        props.trainingStatus.isProgressBlocked\r\n    );\r\n    const [isSoundEnabled, setIsSoundEnabled] = useState(props.gameConfig.isSoundEnabled);\r\n    const [selectedHands, setSelectedHands] = useState(props.gameConfig.selectedHands);\r\n    const [selectedHandsOnly, setSelectedHandsOnly] = useState(props.gameConfig.selectedHandsOnly);\r\n    const [trainingHands, setTrainingHands] = useState(props.trainingHands);\r\n    const [untrainedPairsPriority, setUntrainedPairsPriority] = useState(\r\n        props.gameConfig.untrainedPairsPriority\r\n    );\r\n\r\n    const isSomeHandSelected = (_selectedHandsOnly: boolean, _selectedHands: SelectedHands) =>\r\n        !_selectedHandsOnly || Object.values(_selectedHands).some((x) => x);\r\n\r\n    const isProgressBlockedHandler = (options: {\r\n        nextSelectedHands?: SelectedHands;\r\n        nextSelectedHandsOnly?: boolean;\r\n        nextTrainingHands?: TrainingHands;\r\n    }) => {\r\n        const _selectedHandsOnly =\r\n            options.nextSelectedHandsOnly !== undefined\r\n                ? options.nextSelectedHandsOnly\r\n                : selectedHandsOnly;\r\n        const _selectedHands = options.nextSelectedHands || selectedHands;\r\n\r\n        setIsProgressBlocked(\r\n            isSomeHandSelected(_selectedHandsOnly, _selectedHands) &&\r\n                getIsProgressBlocked(\r\n                    props.trainingStatus,\r\n                    options.nextTrainingHands || trainingHands,\r\n                    _selectedHandsOnly,\r\n                    _selectedHands\r\n                )\r\n        );\r\n    };\r\n\r\n    const casinoRuleChangeHandler = (nextCasinoRules: CasinoRules) => {\r\n        const nextTrainingHands = getTrainingHands(nextCasinoRules);\r\n        setTrainingHands(nextTrainingHands);\r\n    };\r\n\r\n    const saveHandler = () => {\r\n        props.setGameConfig({\r\n            casinoRules,\r\n            isDealerAnimationEnabled,\r\n            isSoundEnabled,\r\n            selectedHands,\r\n            selectedHandsOnly,\r\n            untrainedPairsPriority\r\n        });\r\n        props.navigation.navigate(RouteNames.table);\r\n    };\r\n\r\n    const isSaveButtonEnabled =\r\n        isSomeHandSelected(selectedHandsOnly, selectedHands) &&\r\n        (props.gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doublingAfterSplit] !==\r\n                casinoRules[CasinoRulesKeys.doublingAfterSplit] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                casinoRules[CasinoRulesKeys.doubling] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                casinoRules[CasinoRulesKeys.hitSplitAces] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                casinoRules[CasinoRulesKeys.holeCard] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                casinoRules[CasinoRulesKeys.splitsNumber] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                casinoRules[CasinoRulesKeys.surrender] ||\r\n            props.gameConfig.isDealerAnimationEnabled !== isDealerAnimationEnabled ||\r\n            props.gameConfig.isSoundEnabled !== isSoundEnabled ||\r\n            getObjectKeys(props.gameConfig.selectedHands).some(\r\n                (key) => props.gameConfig.selectedHands[key] !== selectedHands[key]\r\n            ) ||\r\n            props.gameConfig.selectedHandsOnly !== selectedHandsOnly ||\r\n            props.gameConfig.untrainedPairsPriority !== untrainedPairsPriority);\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            style={{\r\n                flexGrow: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.basicStrategyTable}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 8,\r\n                    paddingHorizontal: 16,\r\n                    paddingVertical: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={splitColor}\r\n                    isEnabled={true}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.basicStrategyTable);\r\n                    }}\r\n                    text=\"Basic strategy table\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                {isProgressBlocked && (\r\n                    <Text\r\n                        style={{\r\n                            color: warningColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingTop: 16\r\n                        }}\r\n                    >\r\n                        ⚠️ Selected hands are blocking progress. Modify the selection or disable\r\n                        Selected hands to complete your training\r\n                    </Text>\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.casinoRules}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Casino rules\r\n                </Text>\r\n                <Divider />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <DoublingPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={\r\n                        casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                        casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                    }\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        fullWidth={false}\r\n                        isDisabled={casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none}\r\n                        onValueChange={casinoRuleChangeHandler}\r\n                        paddingTop={0}\r\n                        ruleName={CasinoRulesKeys.hitSplitAces}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.hitSplitAces);\r\n                        }}\r\n                    />\r\n                </View>\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        hideLabel={true}\r\n                        onValueChange={casinoRuleChangeHandler}\r\n                        ruleName={CasinoRulesKeys.holeCard}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <View>\r\n                        <View style={{ flexDirection: 'row', width: '100%' }}>\r\n                            <Text\r\n                                style={{\r\n                                    color: 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                {CasinoRulesKeys.holeCard}\r\n                            </Text>\r\n\r\n                            <HelpIcon\r\n                                onPress={() => {\r\n                                    props.navigation.navigate(RouteNames.holeCard);\r\n                                }}\r\n                            />\r\n                        </View>\r\n\r\n                        <RuleSwitcher\r\n                            casinoRules={casinoRules}\r\n                            isDisabled={!casinoRules[CasinoRulesKeys.holeCard]}\r\n                            onValueChange={casinoRuleChangeHandler}\r\n                            ruleName={CasinoRulesKeys.blackjackPeek}\r\n                            setCasinoRules={setCasinoRules}\r\n                        />\r\n                    </View>\r\n                </View>\r\n\r\n                <SplitsNumberPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.appSettings}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    App settings\r\n                </Text>\r\n                <Divider />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsDealerAnimationEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isDealerAnimationEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Dealer cards animation\r\n                    </Text>\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        disabled={props.trainingStatus.isCompleted}\r\n                        onValueChange={setUntrainedPairsPriority}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={!props.trainingStatus.isCompleted && untrainedPairsPriority}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Untrained pairs priority\r\n                    </Text>\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.untrainedPairsPriority);\r\n                        }}\r\n                    />\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={(value) => {\r\n                            setSelectedHandsOnly(value);\r\n                            isProgressBlockedHandler({\r\n                                nextSelectedHandsOnly: value\r\n                            });\r\n                        }}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={selectedHandsOnly}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Selected hands only\r\n                    </Text>\r\n                </View>\r\n\r\n                {selectedHandsOnly && (\r\n                    <View\r\n                        style={{\r\n                            borderLeftColor: 'white',\r\n                            borderLeftWidth: 2,\r\n                            flexDirection: 'row',\r\n                            flexWrap: 'wrap',\r\n                            marginLeft: 16,\r\n                            marginTop: 16\r\n                        }}\r\n                    >\r\n                        <TouchableOpacity\r\n                            onPress={() => {\r\n                                const nextSelectedHands = Object.values(HandCode).reduce(\r\n                                    (hands, handCode) => ({ ...hands, [handCode]: true }),\r\n                                    {}\r\n                                ) as Dictionary<boolean, HandCode>;\r\n                                setSelectedHands(nextSelectedHands);\r\n                                isProgressBlockedHandler({\r\n                                    nextSelectedHands\r\n                                });\r\n                            }}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                backgroundColor: doubleColor,\r\n                                marginBottom: 8,\r\n                                marginLeft: '2%',\r\n                                paddingVertical: 4,\r\n                                width: '48%'\r\n                            }}\r\n                        >\r\n                            <Text\r\n                                style={{\r\n                                    color: 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Select all\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n\r\n                        <TouchableOpacity\r\n                            onPress={() => {\r\n                                const nextSelectedHands = Object.values(HandCode).reduce(\r\n                                    (hands, handCode) => ({ ...hands, [handCode]: false }),\r\n                                    {}\r\n                                ) as Dictionary<boolean, HandCode>;\r\n                                setSelectedHands(nextSelectedHands);\r\n                                isProgressBlockedHandler({\r\n                                    nextSelectedHands\r\n                                });\r\n                            }}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                backgroundColor: doubleColor,\r\n                                marginBottom: 8,\r\n                                marginLeft: '2%',\r\n                                paddingVertical: 4,\r\n                                width: '48%'\r\n                            }}\r\n                        >\r\n                            <Text\r\n                                style={{\r\n                                    color: 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Unselect all\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n\r\n                        {Object.values(trainingHands).map((trainingHand) => (\r\n                            <TouchableOpacity\r\n                                key={trainingHand.name}\r\n                                onPress={() => {\r\n                                    const nextSelectedHands = {\r\n                                        ...selectedHands,\r\n                                        [trainingHand.code]: !selectedHands[trainingHand.code]\r\n                                    };\r\n                                    setSelectedHands(nextSelectedHands);\r\n                                    isProgressBlockedHandler({\r\n                                        nextSelectedHands\r\n                                    });\r\n                                }}\r\n                                style={{\r\n                                    alignItems: 'center',\r\n                                    backgroundColor: selectedHands[trainingHand.code]\r\n                                        ? standColor\r\n                                        : undefined,\r\n                                    paddingVertical: 4,\r\n                                    width: '33.33%'\r\n                                }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20\r\n                                    }}\r\n                                >\r\n                                    {trainingHand.name}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                )}\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsSoundEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isSoundEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Sound effects 🔊\r\n                    </Text>\r\n                </View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16,\r\n                    paddingTop: 24\r\n                }}\r\n            >\r\n                {!isSomeHandSelected(selectedHandsOnly, selectedHands) && (\r\n                    <Text\r\n                        style={{\r\n                            color: warningColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingBottom: 16\r\n                        }}\r\n                    >\r\n                        Some hand must be selected to save the changes\r\n                    </Text>\r\n                )}\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={isSaveButtonEnabled}\r\n                    marginBottom={40}\r\n                    onPress={saveHandler}\r\n                    text=\"Save\"\r\n                    width=\"100%\"\r\n                />\r\n\r\n                <Divider />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={props.phase === Phases.finished}\r\n                    marginTop={40}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.onboarding);\r\n                    }}\r\n                    text=\"Onboarding\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.resetTraining}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 16,\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={dangerColor}\r\n                    isEnabled={true}\r\n                    marginTop={8}\r\n                    onPress={() => {\r\n                        const title = 'Reset training';\r\n                        const body =\r\n                            'Resetting the training will mark all hands as untrained, ' +\r\n                            'setting the progress and precision indicators to 0%, ' +\r\n                            'and set the player earnings to 0$ as well. ' +\r\n                            'Are you sure you want to reset the training?';\r\n\r\n                        if (Platform.OS === 'web') {\r\n                            const response = window.confirm(body);\r\n                            if (response) {\r\n                                props.resetTrainingStatus();\r\n                            }\r\n                        } else {\r\n                            Alert.alert(title, body, [\r\n                                {\r\n                                    text: 'Cancel',\r\n                                    style: 'cancel'\r\n                                },\r\n                                {\r\n                                    text: 'Reset',\r\n                                    onPress: props.resetTrainingStatus\r\n                                }\r\n                            ]);\r\n                        }\r\n                    }}\r\n                    text=\"Reset training\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport { Dimensions, View } from 'react-native';\r\nimport { LineChart } from 'react-native-chart-kit';\r\nimport { Button } from '../components/button';\r\nimport { colors, tableColor } from '../constants';\r\nimport { BaseDecisions, Player } from '../types';\r\nimport { getAbsoluteMax, getPrimeFactors } from '../utils';\r\n\r\ntype ChartDimensions = {\r\n    boundaries: number;\r\n    scale: number;\r\n    width: number;\r\n};\r\n\r\ntype ChartPage = {\r\n    index: number;\r\n    data: number[];\r\n};\r\n\r\ninterface EarningsChartProps {\r\n    earningsHistorical: Player['earningsHistorical'];\r\n}\r\n\r\nconst chartDeadSpace = 16;\r\nconst pageSize = 20;\r\nconst screenHorizontalMargin = 8;\r\n\r\nconst getChartDimensions = (data: number[]): ChartDimensions => {\r\n    const absoluteMax = getAbsoluteMax(data);\r\n    const primeFactors = data.length > 0 ? getPrimeFactors(absoluteMax) : [2];\r\n    const scale = 2 * Math.min(primeFactors[0], 6);\r\n    const windowWidth = Dimensions.get('window').width;\r\n\r\n    return {\r\n        boundaries: absoluteMax,\r\n        scale,\r\n        width: windowWidth - screenHorizontalMargin * 2\r\n    };\r\n};\r\n\r\nconst getCurrentPage = (data: number[], nextIndex: number | undefined): ChartPage => {\r\n    nextIndex = nextIndex === undefined ? (data.length > 0 ? data.length - 1 : 0) : nextIndex;\r\n    const nextData = data.slice(\r\n        Math.max(0, nextIndex - pageSize),\r\n        Math.min(Math.max(0, nextIndex + 1), data.length)\r\n    );\r\n\r\n    return {\r\n        data: nextData,\r\n        index: nextIndex\r\n    };\r\n};\r\n\r\nconst getFormattedData = (data: number[], dimensions: ChartDimensions) => {\r\n    const boundaryDots =\r\n        data.length > 0\r\n            ? [data[data.length - 1], dimensions.boundaries, -dimensions.boundaries]\r\n            : [];\r\n\r\n    const dotWidth = data.length > 0 ? dimensions.width / data.length : dimensions.width;\r\n    const boundaryDotsWidth = dotWidth * boundaryDots.length;\r\n\r\n    return {\r\n        chartWidth: dimensions.width + boundaryDotsWidth + chartDeadSpace,\r\n        source: data.length > 0 ? data.concat(boundaryDots) : [0]\r\n    };\r\n};\r\n\r\nexport const EarningsChart: React.FC<EarningsChartProps> = (props) => {\r\n    const dimensions = useMemo(() => getChartDimensions(props.earningsHistorical), [\r\n        props.earningsHistorical\r\n    ]);\r\n    const [page, setPage] = useState(() => getCurrentPage(props.earningsHistorical, undefined));\r\n    const formattedData = useMemo(() => getFormattedData(page.data, dimensions), [\r\n        dimensions,\r\n        page\r\n    ]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                marginHorizontal: screenHorizontalMargin,\r\n                overflow: 'hidden'\r\n            }}\r\n        >\r\n            <LineChart\r\n                chartConfig={{\r\n                    backgroundGradientFrom: tableColor,\r\n                    backgroundGradientTo: tableColor,\r\n                    color: () => `rgb(255, 255, 255)`,\r\n                    decimalPlaces: 1,\r\n                    linejoinType: 'bevel',\r\n                    propsForLabels: {\r\n                        fontSize: 16\r\n                    }\r\n                }}\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: formattedData.source\r\n                        }\r\n                    ],\r\n                    labels: []\r\n                }}\r\n                height={300}\r\n                segments={dimensions.scale}\r\n                style={{ marginLeft: -chartDeadSpace }}\r\n                width={formattedData.chartWidth}\r\n                withVerticalLines={false}\r\n            />\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={page.index >= pageSize}\r\n                    onPress={() => {\r\n                        if (page.index >= pageSize) {\r\n                            setPage(\r\n                                getCurrentPage(props.earningsHistorical, page.index - pageSize)\r\n                            );\r\n                        }\r\n                    }}\r\n                    text=\"Previous\"\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={page.index < props.earningsHistorical.length - 1}\r\n                    onPress={() => {\r\n                        if (page.index < props.earningsHistorical.length - 1) {\r\n                            setPage(\r\n                                getCurrentPage(props.earningsHistorical, page.index + pageSize)\r\n                            );\r\n                        }\r\n                    }}\r\n                    text=\"Next\"\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { HandDecisionSet } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ninterface HandDecisionsTableProps {\r\n    handDecisionSet: HandDecisionSet;\r\n}\r\n\r\nexport const HandDecisionsTable: React.FC<HandDecisionsTableProps> = (props) => (\r\n    <View style={{ width: '100%' }}>\r\n        {getObjectKeys(props.handDecisionSet).map((simpleCardSymbol) => {\r\n            return (\r\n                <View key={simpleCardSymbol} style={{ flexDirection: 'row', width: '100%' }}>\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            paddingTop: 12,\r\n                            textAlign: 'center',\r\n                            width: '15%'\r\n                        }}\r\n                    >\r\n                        {simpleCardSymbol}\r\n                    </Text>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: colors[props.handDecisionSet[simpleCardSymbol]],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            marginTop: 8,\r\n                            paddingVertical: 4,\r\n                            paddingHorizontal: 8,\r\n                            textAlign: 'center',\r\n                            width: '85%'\r\n                        }}\r\n                    >\r\n                        {props.handDecisionSet[simpleCardSymbol]}\r\n                    </Text>\r\n                </View>\r\n            );\r\n        })}\r\n    </View>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getHandRangesNumber, handDecisionSetGetters } from '../logic/hand-decision-set';\r\nimport { AppRoute, CasinoRules, CasinoRulesKeys, RouteNames } from '../types';\r\n\r\ntype HandDecisionsProps = {\r\n    casinoRules: CasinoRules;\r\n    route: AppRoute<RouteNames.handDecisions>;\r\n};\r\n\r\nexport const HandDecisions: React.FC<HandDecisionsProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n\r\n    const trainingHand = props.route.params['trainingHand'];\r\n    const handDecisionSet = handDecisionSetGetters[trainingHand.code](casinoRules);\r\n\r\n    return (\r\n        <ScrollView\r\n            style={{\r\n                flex: 1,\r\n                paddingHorizontal: 16,\r\n                marginVertical: 16,\r\n                width: '100%'\r\n            }}\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between',\r\n                    paddingBottom: 16,\r\n                    width: '100%'\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 24 }}>{trainingHand.name} decisions</Text>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20\r\n                    }}\r\n                >\r\n                    Ranges: {getHandRangesNumber(handDecisionSet)}\r\n                </Text>\r\n            </View>\r\n\r\n            <HandDecisionsTable handDecisionSet={handDecisionSet} />\r\n\r\n            {trainingHand.dependencies.map((dependency) => {\r\n                return dependency === CasinoRulesKeys.doubling ? (\r\n                    <DoublingPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : dependency === CasinoRulesKeys.splitsNumber ? (\r\n                    <SplitsNumberPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : (\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        ruleName={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                );\r\n            })}\r\n        </ScrollView>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { playSound } from '../utils';\r\n\r\ntype SoundQueue = { isActive: boolean; sounds: Audio.Sound[] };\r\n\r\nexport const createSoundQueue = (): SoundQueue => ({\r\n    isActive: false,\r\n    sounds: []\r\n});\r\n\r\nconst playNextSound = (soundQueue: SoundQueue) => {\r\n    const nextSound = soundQueue.sounds.pop();\r\n    if (nextSound) {\r\n        playSound(nextSound).then(() => {\r\n            setTimeout(() => playNextSound(soundQueue), 250);\r\n        });\r\n    } else {\r\n        soundQueue.isActive = false;\r\n    }\r\n};\r\n\r\nexport const pushSound = (soundQueue: SoundQueue, sound: Audio.Sound) => {\r\n    soundQueue.sounds.push(sound);\r\n    if (!soundQueue.isActive) {\r\n        soundQueue.isActive = true;\r\n        playNextSound(soundQueue);\r\n    }\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\r\nimport cardSlideSoundMp3 from '../../assets/card-slide.mp3';\r\nimport { nonRandomColor } from '../constants';\r\nimport { createSoundQueue, pushSound } from '../logic/sound-queue';\r\nimport { AppNavigation, Card, RouteNames, SimpleCardSymbol } from '../types';\r\n\r\ninterface CardComponentProps {\r\n    card: Card;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nconst animationsDuration = 400;\r\nconst initialOpacity = 0;\r\nconst initialPosition = -20;\r\n\r\nconst soundQueue = createSoundQueue();\r\n\r\nexport const CardComponent: React.FC<CardComponentProps> = (props) => {\r\n    const opacity = useMemo(() => new Animated.Value(initialOpacity), []);\r\n    const position = useMemo(() => new Animated.Value(initialPosition), []);\r\n    const [cardSlideSound, setCardSlideSound] = useState<Audio.Sound | false>();\r\n\r\n    const animateCard = (sound?: Audio.Sound | false) => {\r\n        if (!props.skipAnimation) {\r\n            Animated.parallel([\r\n                Animated.timing(opacity, {\r\n                    useNativeDriver: true,\r\n                    toValue: 1,\r\n                    duration: animationsDuration * 2\r\n                }),\r\n                Animated.timing(position, {\r\n                    useNativeDriver: true,\r\n                    toValue: 0,\r\n                    duration: animationsDuration\r\n                })\r\n            ]).start();\r\n        }\r\n\r\n        if (props.isSoundEnabled && sound) {\r\n            pushSound(soundQueue, sound);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cardSlideSound === undefined) {\r\n            Audio.Sound.createAsync(cardSlideSoundMp3, { volume: 0.5 })\r\n                .then((result) => {\r\n                    animateCard(result.sound);\r\n                    setCardSlideSound(result.sound);\r\n                })\r\n                .catch(() => {\r\n                    /* Failing to load audio is not a critical issue */\r\n                    animateCard();\r\n                    setCardSlideSound(false);\r\n                });\r\n        } else {\r\n            if (!props.skipAnimation) {\r\n                opacity.setValue(initialOpacity);\r\n                position.setValue(initialPosition);\r\n            }\r\n\r\n            animateCard(cardSlideSound);\r\n        }\r\n    }, [props.card]);\r\n\r\n    const cardColor = props.card.isRandom\r\n        ? props.card.suit === '♦' || props.card.suit === '♥'\r\n            ? 'red'\r\n            : 'black'\r\n        : nonRandomColor;\r\n\r\n    const backgroundColor = props.card.isHoleCard ? 'lightgrey' : 'white';\r\n\r\n    return (\r\n        <Animated.View\r\n            style={{\r\n                backgroundColor,\r\n                borderRadius: 8,\r\n                height: 66,\r\n                marginBottom: 8,\r\n                marginRight: 8,\r\n                opacity: props.skipAnimation ? undefined : opacity,\r\n                transform: props.skipAnimation ? undefined : [{ translateY: position }],\r\n                width: 56\r\n            }}\r\n        >\r\n            {!props.card.isHoleCard && (\r\n                <TouchableOpacity\r\n                    onPress={\r\n                        props.navigation && !props.card.isRandom\r\n                            ? () => {\r\n                                  props.navigation!.navigate(RouteNames.untrainedPairsPriority);\r\n                              }\r\n                            : undefined\r\n                    }\r\n                >\r\n                    {props.card.isRandom ? (\r\n                        <Text\r\n                            style={{\r\n                                color: cardColor,\r\n                                fontSize: 16,\r\n                                position: 'absolute',\r\n                                right: 4,\r\n                                top: 4\r\n                            }}\r\n                        >\r\n                            {props.card.suit}\r\n                        </Text>\r\n                    ) : (\r\n                        <View\r\n                            style={{\r\n                                backgroundColor: cardColor,\r\n                                height: 12,\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                top: 8,\r\n                                width: 12\r\n                            }}\r\n                        />\r\n                    )}\r\n                    <Text\r\n                        style={{\r\n                            color: cardColor,\r\n                            fontSize: 40,\r\n                            marginRight: props.card.symbol === SimpleCardSymbol.Ten ? 0 : 8,\r\n                            marginTop: 12,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.card.symbol}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            )}\r\n        </Animated.View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { getHandValidValues, isBlackjack } from '../logic/hand';\r\nimport { AppNavigation, Hand } from '../types';\r\nimport { CardComponent } from './card-component';\r\n\r\ninterface HandComponentProps {\r\n    hand: Hand;\r\n    handsNumber: number;\r\n    isCurrentHand: boolean;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    peeking?: boolean;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nexport const HandComponent: React.FC<HandComponentProps> = (props) => {\r\n    const handValues = getHandValidValues(props.hand).join('/');\r\n    const displayValues = isBlackjack(props.hand, props.handsNumber)\r\n        ? 'Blackjack'\r\n        : handValues.indexOf('21') > -1\r\n        ? '21'\r\n        : handValues;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                backgroundColor: props.isCurrentHand ? 'rgba(255, 255, 255, 0.2)' : undefined,\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'center',\r\n                maxWidth: '100%',\r\n                paddingTop: 8,\r\n                paddingHorizontal: 8\r\n            }}\r\n        >\r\n            {props.hand.cards.map((card, index) => (\r\n                <CardComponent\r\n                    card={card}\r\n                    isSoundEnabled={props.isSoundEnabled}\r\n                    key={index}\r\n                    navigation={props.navigation}\r\n                    skipAnimation={props.skipAnimation}\r\n                />\r\n            ))}\r\n            <View style={{ alignItems: 'center', justifyContent: 'center', marginBottom: 8 }}>\r\n                {props.peeking ? (\r\n                    <Text style={{ color: 'black', fontSize: 32, height: '100%' }}>👁️</Text>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Text style={{ color: 'white', fontSize: 25 }}> {displayValues}</Text>\r\n                        {props.hand.outcome && (\r\n                            <Text style={{ color: 'white', fontSize: 25, fontWeight: 'bold' }}>\r\n                                {props.hand.outcome}\r\n                            </Text>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { createCard } from '../logic/card';\r\nimport { CardSuit, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const HitSplitAces: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Hit split aces\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Hitting split aces is usually not allowed. On this scenario, one single card\r\n                    will be dealt to each hand after splitting the aces and player's turn will be\r\n                    terminated.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    If another ace is dealt to any of the hands and re-splitting aces is allowed,\r\n                    the player can decide to split aces again or to stand.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.diamonds)\r\n                        ],\r\n                        values: [2, 12]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={true}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [createCard(SimpleCardSymbol.Ace, CardSuit.hearts)],\r\n                        values: [1, 11]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Note that an ace and ten value card after a split are counted as a non-blackjack\r\n                    21:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.spades)\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.hearts),\r\n                            createCard(SpecialCardSymbol.King, CardSuit.diamonds)\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { createCard } from '../logic/card';\r\nimport { CardSuit, SimpleCardSymbol } from '../types';\r\n\r\nexport const HoleCard: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Hole card\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    In Hole card games the dealer's hand immediately receives its second card face\r\n                    down (the hole card) after receiving its first card face up.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds, true)\r\n                        ],\r\n                        values: [1, 11]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 16 }}>\r\n                    Additionally, when Blackjack Peek is enabled, the dealer peeks at the hole card\r\n                    and reveals it if it makes the dealer's hand a blackjack, winning over all\r\n                    players' non blackjack hands.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds, true)\r\n                        ],\r\n                        values: [1, 11]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    peeking={true}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\r\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds)\r\n                        ],\r\n                        values: [11, 21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairRepresentation\r\n} from '../types';\r\n\r\ntype MissedPairsProps = {\r\n    gameConfig: GameConfig;\r\n    missedTrainingPairs: TrainingPairRepresentation[];\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nconst boldTextProperties: StyleProp<TextStyle> = {\r\n    ...textProperties,\r\n    fontWeight: 'bold'\r\n};\r\n\r\nexport const MissedPairs: React.FC<MissedPairsProps> = (props) => {\r\n    return (\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.missedPairs}\r\n            onBoardingStep={props.onBoardingStep}\r\n            style={{ alignItems: undefined, flex: 1 }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Missed pairs\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{ flexGrow: 1 }}\r\n            >\r\n                {props.missedTrainingPairs.length === 0 ? (\r\n                    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>\r\n                        <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                            No missed pairs so far. Nice job!\r\n                        </Text>\r\n                    </View>\r\n                ) : (\r\n                    Object.values(props.missedTrainingPairs).map((missedTrainingPair) => {\r\n                        const handName = props.trainingHands[missedTrainingPair.handCode].name;\r\n\r\n                        return (\r\n                            <View\r\n                                key={\r\n                                    missedTrainingPair.handCode +\r\n                                    '-' +\r\n                                    missedTrainingPair.dealerSymbol\r\n                                }\r\n                                style={{ marginBottom: 16, width: '100%' }}\r\n                            >\r\n                                <View\r\n                                    style={{\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row',\r\n                                        justifyContent: 'space-between'\r\n                                    }}\r\n                                >\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            marginBottom: 16\r\n                                        }}\r\n                                    >\r\n                                        <Text style={boldTextProperties}>{handName}</Text>\r\n                                        <Text style={textProperties}> vs </Text>\r\n                                        <Text style={boldTextProperties}>\r\n                                            {missedTrainingPair.dealerSymbol}\r\n                                        </Text>\r\n                                    </View>\r\n                                    <View\r\n                                        style={{\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        <TouchableOpacity\r\n                                            onPress={\r\n                                                props.onBoardingStep > -1 ||\r\n                                                props.phase !== Phases.finished\r\n                                                    ? undefined\r\n                                                    : () => {\r\n                                                          const trainingPair = getSpecificTrainingPair(\r\n                                                              missedTrainingPair.handCode,\r\n                                                              missedTrainingPair.dealerSymbol,\r\n                                                              props.gameConfig.casinoRules\r\n                                                          );\r\n                                                          props.startTrainingRound(\r\n                                                              trainingPair.player,\r\n                                                              trainingPair.dealer\r\n                                                          );\r\n                                                          props.navigation.navigate(\r\n                                                              RouteNames.table\r\n                                                          );\r\n                                                      }\r\n                                            }\r\n                                        >\r\n                                            <Text\r\n                                                style={{\r\n                                                    backgroundColor: doubleColor,\r\n                                                    borderRadius: 16,\r\n                                                    color: 'white',\r\n                                                    fontSize: 20,\r\n                                                    marginBottom: 16,\r\n                                                    paddingHorizontal: 16,\r\n                                                    paddingVertical: 4,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                Train ➡️\r\n                                            </Text>\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                </View>\r\n                                <Divider />\r\n                            </View>\r\n                        );\r\n                    })\r\n                )}\r\n            </ScrollView>\r\n        </OnBoardingSection>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { doubleColor, hitColor } from '../constants';\r\nimport { CardSuit } from '../types';\r\n\r\ninterface OnboardingProps {\r\n    skipOnboardingHandler: () => void;\r\n    startOnboardingHandler: () => void;\r\n}\r\n\r\nexport const Onboarding: React.FC<OnboardingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Welcome to\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 30,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    {CardSuit.clubs}\r\n                    {CardSuit.hearts} Blackjump {CardSuit.diamonds}\r\n                    {CardSuit.spades}\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        paddingBottom: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    The app that will help you master Blackjack basic strategy\r\n                </Text>\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={true}\r\n                    onPress={props.startOnboardingHandler}\r\n                    text=\"Start onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={true}\r\n                    marginTop={16}\r\n                    onPress={props.skipOnboardingHandler}\r\n                    text=\"Skip onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { createCard, getRandomCard, getRandomSuit } from '../logic/card';\r\nimport { createDealerHand, createHand } from '../logic/hand';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { getUntrainedTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingStepEvent,\r\n    Phases,\r\n    PlayerDecisions,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { Button } from './button';\r\n\r\nexport interface ActionsProps {\r\n    gameConfig: GameConfig;\r\n    handlers: {\r\n        double: () => void;\r\n        hit: () => void;\r\n        split: () => void;\r\n        stand: () => void;\r\n        surrender: () => void;\r\n    };\r\n    isDoubleEnabled: boolean;\r\n    isHitEnabled: boolean;\r\n    isSplitEnabled: boolean;\r\n    isSurrenderEnabled: boolean;\r\n    phase: Phases;\r\n    onBoardingStep: number;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n}\r\n\r\nexport const Actions: React.FC<ActionsProps> = (props) => {\r\n    const isPlayerTurn = props.phase === Phases.player;\r\n\r\n    const isDoublingAvailable =\r\n        props.gameConfig.casinoRules[CasinoRulesKeys.doubling] > Doubling.none;\r\n    const isSurrenderAvailable = props.gameConfig.casinoRules[CasinoRulesKeys.surrender];\r\n\r\n    const activeOptionalButtons = 1 + Number(isDoublingAvailable) + Number(isSurrenderAvailable);\r\n    const optionalButtonsWidth = Math.floor((100 * 100) / activeOptionalButtons) / 100;\r\n\r\n    return props.phase === Phases.finished ? (\r\n        <Button\r\n            height={112}\r\n            backgroundColor={colors[BaseDecisions.hit]}\r\n            isEnabled={true}\r\n            onPress={() => {\r\n                let dealerHand: Hand;\r\n                let playerHand: Hand;\r\n\r\n                if (\r\n                    onBoardingSteps[props.onBoardingStep] &&\r\n                    onBoardingSteps[props.onBoardingStep].event === OnBoardingStepEvent.startRound\r\n                ) {\r\n                    /* Prevent dealing a Blackjack as initial hand when onboarding is active */\r\n                    playerHand = createHand([\r\n                        createCard(SimpleCardSymbol.Seven, getRandomSuit()),\r\n                        getRandomCard()\r\n                    ]);\r\n                    dealerHand = createDealerHand(\r\n                        props.gameConfig.casinoRules,\r\n                        SimpleCardSymbol.Six,\r\n                        getRandomSuit()\r\n                    );\r\n                } else if (\r\n                    props.gameConfig.untrainedPairsPriority ||\r\n                    props.gameConfig.selectedHandsOnly\r\n                ) {\r\n                    const trainingPair = getUntrainedTrainingPair(\r\n                        props.trainingHands,\r\n                        props.trainingProgress,\r\n                        props.gameConfig\r\n                    );\r\n                    playerHand = trainingPair.player;\r\n                    dealerHand = trainingPair.dealer;\r\n                } else {\r\n                    playerHand = createHand([getRandomCard(), getRandomCard()]);\r\n                    dealerHand = createDealerHand(props.gameConfig.casinoRules);\r\n                }\r\n\r\n                props.startTrainingRound(playerHand, dealerHand);\r\n            }}\r\n            text=\"Random\"\r\n            width=\"100%\"\r\n        />\r\n    ) : (\r\n        <React.Fragment>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={isPlayerTurn && props.isHitEnabled}\r\n                    onPress={props.handlers.hit}\r\n                    text={BaseDecisions.hit}\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={isPlayerTurn}\r\n                    onPress={props.handlers.stand}\r\n                    text={BaseDecisions.stand}\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[PlayerDecisions.split]}\r\n                    isEnabled={isPlayerTurn && props.isSplitEnabled}\r\n                    onPress={props.handlers.split}\r\n                    text={PlayerDecisions.split}\r\n                    width={`${optionalButtonsWidth}%`}\r\n                />\r\n                {isDoublingAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.double]}\r\n                        isEnabled={isPlayerTurn && props.isDoubleEnabled}\r\n                        onPress={props.handlers.double}\r\n                        text={PlayerDecisions.double}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n                {isSurrenderAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.surrender]}\r\n                        isEnabled={isPlayerTurn && props.isSurrenderEnabled}\r\n                        onPress={props.handlers.surrender}\r\n                        text={PlayerDecisions.surrender}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n            </View>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { dangerColor, splitColor } from '../constants';\r\nimport { DecisionEvaluation } from '../types';\r\n\r\ninterface DecisionEvaluationProps {\r\n    decisionEvaluation: DecisionEvaluation;\r\n    showDecisionsHandler?: () => void;\r\n}\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nconst boldTextProperties: StyleProp<TextStyle> = {\r\n    ...textProperties,\r\n    fontWeight: 'bold'\r\n};\r\n\r\nexport const DecisionEvaluationComponent: React.FC<DecisionEvaluationProps> = (props) => (\r\n    <View\r\n        style={{\r\n            alignItems: 'center',\r\n            backgroundColor: props.decisionEvaluation.isHit ? splitColor : dangerColor,\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            width: '100%'\r\n        }}\r\n    >\r\n        {props.decisionEvaluation.isHit ? (\r\n            <Text style={textProperties}>Well done</Text>\r\n        ) : (\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'center',\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                <Text style={boldTextProperties}>{props.decisionEvaluation.handName}</Text>\r\n                <Text style={textProperties}> vs </Text>\r\n                <Text style={boldTextProperties}>{props.decisionEvaluation.dealerSymbol}</Text>\r\n                <Text style={textProperties}> = </Text>\r\n                <Text style={boldTextProperties}>{props.decisionEvaluation.dynamicDecision}</Text>\r\n\r\n                <TouchableOpacity onPress={props.showDecisionsHandler} style={{ marginTop: 8 }}>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: 'white',\r\n                            borderRadius: 16,\r\n                            color: dangerColor,\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 16,\r\n                            paddingVertical: 2,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.decisionEvaluation.handName} decisions ➡️\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )}\r\n    </View>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { Actions, ActionsProps } from '../components/actions';\r\nimport { DecisionEvaluationComponent } from '../components/decision-evaluation';\r\nimport { Divider } from '../components/divider';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    Player,\r\n    RouteNames,\r\n    TrainingHands\r\n} from '../types';\r\n\r\ntype TableProps = ActionsProps & {\r\n    dealerHand?: Hand;\r\n    decisionEvaluation?: DecisionEvaluation;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    peeking: boolean;\r\n    phase: Phases;\r\n    player: Player;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const Table: React.FC<TableProps> = (props) => (\r\n    <React.Fragment>\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableDealerHand}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ minHeight: 128, justifyContent: 'center' }}\r\n            >\r\n                {props.dealerHand && (\r\n                    <HandComponent\r\n                        hand={props.dealerHand}\r\n                        handsNumber={1}\r\n                        isCurrentHand={props.phase === Phases.dealer}\r\n                        isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                        navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\r\n                        peeking={props.peeking}\r\n                    />\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableFeedback}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ height: 80, justifyContent: 'center', width: '100%' }}\r\n            >\r\n                <Divider />\r\n                {props.decisionEvaluation ? (\r\n                    <DecisionEvaluationComponent\r\n                        decisionEvaluation={props.decisionEvaluation}\r\n                        showDecisionsHandler={\r\n                            props.onBoardingStep > -1\r\n                                ? undefined\r\n                                : () => {\r\n                                      props.navigation.navigate(RouteNames.handDecisions, {\r\n                                          trainingHand:\r\n                                              props.trainingHands[props.player.lastActionHand!]\r\n                                      });\r\n                                  }\r\n                        }\r\n                    />\r\n                ) : (\r\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingHorizontal: 8,\r\n                                paddingTop: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            Dealer must draw to 16\r\n                        </Text>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingBottom: 8,\r\n                                paddingHorizontal: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            and stand on{' '}\r\n                            {props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                                ? 'hard 17'\r\n                                : 'all 17s'}\r\n                        </Text>\r\n                    </View>\r\n                )}\r\n                <Divider />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tablePlayerHands}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ flex: 1 }}\r\n            >\r\n                <ScrollView\r\n                    contentContainerStyle={{\r\n                        flexGrow: 1,\r\n                        justifyContent: 'space-evenly'\r\n                    }}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {props.player.hands.map((hand, index) => (\r\n                        <HandComponent\r\n                            hand={hand}\r\n                            handsNumber={props.player.hands.length}\r\n                            isCurrentHand={\r\n                                props.phase === Phases.player && index === props.player.handIndex\r\n                            }\r\n                            isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                            key={index}\r\n                            navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\r\n                        />\r\n                    ))}\r\n                </ScrollView>\r\n            </OnBoardingSection>\r\n        </View>\r\n\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.tableActions}\r\n            onBoardingStep={props.onBoardingStep}\r\n        >\r\n            <Actions\r\n                gameConfig={props.gameConfig}\r\n                handlers={props.handlers}\r\n                isDoubleEnabled={props.isDoubleEnabled}\r\n                isHitEnabled={props.isHitEnabled}\r\n                isSplitEnabled={props.isSplitEnabled}\r\n                isSurrenderEnabled={props.isSurrenderEnabled}\r\n                phase={props.phase}\r\n                onBoardingStep={props.onBoardingStep}\r\n                startTrainingRound={props.startTrainingRound}\r\n                trainingHands={props.trainingHands}\r\n                trainingProgress={props.trainingProgress}\r\n            />\r\n        </OnBoardingSection>\r\n    </React.Fragment>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\n\r\nexport const TrainingCompleted: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingTop: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training completed\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 64, marginVertical: 32 }}>🎉🍾</Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 24, marginBottom: 32 }}>\r\n                    Congratulations! You have trained every possible training pair. You can now test\r\n                    your skills in a real casino 💸💸\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, fontStyle: 'italic' }}>\r\n                    Master the Basic Strategy: reset the training stats from the configuration menu\r\n                    and keep practicing until you miss no pairs at all\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor, untrainedColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype TrainingPairsProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n};\r\n\r\nexport const TrainingPairs: React.FC<TrainingPairsProps> = (props) => {\r\n    const [unfoldedHand, setUnfoldedHand] = useState<HandCode | undefined>(HandCode.Hard5);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training pairs\r\n                </Text>\r\n            </OnBoardingSection>\r\n            <ScrollView\r\n                style={{\r\n                    flex: 1\r\n                }}\r\n                contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            >\r\n                {getObjectKeys(props.trainingProgress).map((handCode) => {\r\n                    const trainingHandStatus = props.trainingProgress[handCode];\r\n                    const handName = props.trainingHands[handCode].name;\r\n\r\n                    return (\r\n                        <OnBoardingSection\r\n                            isHighlighted={unfoldedHand === handCode}\r\n                            key={handCode}\r\n                            onBoardingStep={props.onBoardingStep}\r\n                            style={{ paddingVertical: 8, paddingHorizontal: 16, width: '100%' }}\r\n                        >\r\n                            <TouchableOpacity\r\n                                onPress={() => {\r\n                                    setUnfoldedHand(\r\n                                        unfoldedHand !== handCode ? handCode : undefined\r\n                                    );\r\n                                }}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20,\r\n                                        marginBottom: 16,\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {handName}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            {unfoldedHand && unfoldedHand === handCode && (\r\n                                <React.Fragment>\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            justifyContent: 'space-around',\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        {getObjectKeys(trainingHandStatus).map((dealerSymbol) => {\r\n                                            const backgroundColor =\r\n                                                trainingHandStatus[dealerSymbol] ===\r\n                                                TrainingPairStatus.untrained\r\n                                                    ? untrainedColor\r\n                                                    : trainingHandStatus[dealerSymbol] ===\r\n                                                      TrainingPairStatus.passed\r\n                                                    ? 'lightgreen'\r\n                                                    : 'lightcoral';\r\n\r\n                                            return (\r\n                                                <TouchableOpacity\r\n                                                    key={dealerSymbol}\r\n                                                    onPress={\r\n                                                        props.onBoardingStep > -1 ||\r\n                                                        props.phase !== Phases.finished\r\n                                                            ? undefined\r\n                                                            : () => {\r\n                                                                  const trainingPair = getSpecificTrainingPair(\r\n                                                                      handCode,\r\n                                                                      dealerSymbol,\r\n                                                                      props.gameConfig.casinoRules\r\n                                                                  );\r\n                                                                  props.startTrainingRound(\r\n                                                                      trainingPair.player,\r\n                                                                      trainingPair.dealer\r\n                                                                  );\r\n                                                                  props.navigation.navigate(\r\n                                                                      RouteNames.table\r\n                                                                  );\r\n                                                              }\r\n                                                    }\r\n                                                    style={{\r\n                                                        alignItems: 'center',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        borderRadius: 8,\r\n                                                        marginBottom: 8,\r\n                                                        paddingVertical: 4,\r\n                                                        width: '18%'\r\n                                                    }}\r\n                                                >\r\n                                                    <Text\r\n                                                        style={{\r\n                                                            color: 'white',\r\n                                                            fontSize: 20,\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        {dealerSymbol}\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                            );\r\n                                        })}\r\n                                    </View>\r\n                                    <TouchableOpacity\r\n                                        onPress={\r\n                                            props.onBoardingStep > -1\r\n                                                ? undefined\r\n                                                : () => {\r\n                                                      props.navigation.navigate(\r\n                                                          RouteNames.handDecisions,\r\n                                                          {\r\n                                                              trainingHand:\r\n                                                                  props.trainingHands[handCode]\r\n                                                          }\r\n                                                      );\r\n                                                  }\r\n                                        }\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                backgroundColor: doubleColor,\r\n                                                borderRadius: 16,\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginVertical: 16,\r\n                                                marginHorizontal: 24,\r\n                                                paddingVertical: 4,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName} decisions ➡️\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                </React.Fragment>\r\n                            )}\r\n                            <Divider />\r\n                        </OnBoardingSection>\r\n                    );\r\n                })}\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { CardComponent } from '../components/card-component';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { createCard } from '../logic/card';\r\nimport { CardSuit, Hand, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const UntrainedPairsPriority: React.FC = () => {\r\n    const hardFourteen: Hand = {\r\n        bet: 1,\r\n        cards: [createCard(SimpleCardSymbol.Five), createCard(SimpleCardSymbol.Nine)],\r\n        values: [14]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Untrained pairs priority\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20 }}>\r\n                    Prioritizes untrained/missed pairs instead of dealing random cards (a training\r\n                    pair consists of a player hand and a dealer up card). When enabling Untrained\r\n                    pairs priority:\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • Non-random cards will be dealt. Non-random cards are golden and have a square\r\n                    instead of a suit\r\n                </Text>\r\n\r\n                <View style={{ alignItems: 'center', marginTop: 16 }}>\r\n                    <CardComponent\r\n                        card={createCard(SimpleCardSymbol.Eight)}\r\n                        isSoundEnabled={false}\r\n                        skipAnimation={true}\r\n                    />\r\n                </View>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • Each time you start training a random pair you will be dealt an\r\n                    untrained/missed hand against the corresponding dealer up card\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 24 }}>\r\n                    • Each time you Hit or Split a hand you will be dealt a card that turns your\r\n                    current hand into an untrained/missed pair\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardFourteen}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    Hit\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [...hardFourteen.cards, createCard(SimpleCardSymbol.Ace)],\r\n                        values: [15]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [...hardFourteen.cards, createCard(SimpleCardSymbol.Six)],\r\n                        values: [20]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    (In case you have already trained all pairs reachable from the current hand, you\r\n                    will be dealt a random card)\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • Your are likely to win more, since you will be dealt infrequent hands and you\r\n                    won't get as busted as you would when being dealt random cards\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • You will never be dealt a hand that requires no actions (i.e. a Blackjack or\r\n                    21)\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            createCard(SimpleCardSymbol.Ace, CardSuit.spades),\r\n                            createCard(SpecialCardSymbol.Jack, CardSuit.hearts)\r\n                        ],\r\n                        values: [11, 21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\r\n                    • When you complete the training (i.e. reach 100% progress), Untrained pairs\r\n                    priority will be automatically disabled\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Audio } from 'expo-av';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport hitSoundMp3 from './assets/hit.mp3';\r\nimport missSoundMp3 from './assets/miss.mp3';\r\nimport {\r\n    getGameConfig,\r\n    getHasCompletedOnboarding,\r\n    getPlayerEarnings,\r\n    getPlayerEarningsHistorical,\r\n    getTrainingProgress,\r\n    updateGameConfig,\r\n    updateHasCompletedOnboarding,\r\n    updatePlayerEarnings,\r\n    updatePlayerEarningsHistorical,\r\n    updateTrainingProgress\r\n} from './src/async-storage';\r\nimport { NavBar } from './src/components/nav-bar';\r\nimport { OnboardingBar } from './src/components/onboarding-bar';\r\nimport { tableColor } from './src/constants';\r\nimport { handleDealerTurn } from './src/logic/app-state';\r\nimport { evaluateDecision } from './src/logic/basic-strategy';\r\nimport { getRandomCard, symbolToSimpleSymbol } from './src/logic/card';\r\nimport { getDefaultGameConfig } from './src/logic/game-config';\r\nimport {\r\n    canBeDealerBlackjack,\r\n    canDouble,\r\n    canHit,\r\n    canSplit,\r\n    canSurrender,\r\n    isDealerBlackjack,\r\n    isFinished,\r\n    revealDealerHoleCard\r\n} from './src/logic/hand';\r\nimport { handToHandCode } from './src/logic/hand';\r\nimport { onBoardingSteps } from './src/logic/onboarding';\r\nimport {\r\n    createPlayer,\r\n    doubleCurrentHand,\r\n    getCurrentHand,\r\n    hitCurrentHand,\r\n    initializeHands,\r\n    isLastHand,\r\n    splitCurrentHand,\r\n    standCurrentHand,\r\n    startNextHand,\r\n    surrenderCurrentHand\r\n} from './src/logic/player';\r\nimport { getDefaultTrainingHands, getTrainingHands } from './src/logic/training-hand';\r\nimport {\r\n    getDefaultTrainingStatus,\r\n    getIsProgressBlocked,\r\n    getNextTrainingStatus,\r\n    retrieveTrainingStatus\r\n} from './src/logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    initialRouteName,\r\n    OnBoardingStepEvent,\r\n    Phases,\r\n    Player,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    RouteNames,\r\n    RouteParams,\r\n    TrainingStatus\r\n} from './src/types';\r\nimport { playSound } from './src/utils';\r\nimport { BasicStrategyTable } from './src/views/basic-strategy-table';\r\nimport { ConfigMenu } from './src/views/config-menu';\r\nimport { EarningsChart } from './src/views/earnings-chart';\r\nimport { HandDecisions } from './src/views/hand-decisions';\r\nimport { HitSplitAces } from './src/views/hit-split-aces';\r\nimport { HoleCard } from './src/views/hole-card';\r\nimport { MissedPairs } from './src/views/missed-pairs';\r\nimport { Onboarding } from './src/views/onboarding';\r\nimport { Table } from './src/views/table';\r\nimport { TrainingCompleted } from './src/views/training-completed';\r\nimport { TrainingPairs } from './src/views/training-pairs';\r\nimport { UntrainedPairsPriority } from './src/views/untrained-pairs-priority';\r\n\r\nconst Stack = createStackNavigator<RouteParams>();\r\nlet navigationListener: Function | undefined;\r\n\r\nconst initializeSounds = () =>\r\n    Promise.all([Audio.Sound.createAsync(hitSoundMp3), Audio.Sound.createAsync(missSoundMp3)])\r\n        .then((results) => ({\r\n            hit: results[0].sound,\r\n            miss: results[1].sound\r\n        }))\r\n        .catch((errors) => {\r\n            console.log(errors);\r\n            /* Failing to load audio is not a critical issue */\r\n            return undefined;\r\n        });\r\n\r\nexport default function App() {\r\n    const [currentRoute, setCurrentRoute] = useState<string>(initialRouteName);\r\n    const [dealerHand, setDealerHand] = useState<Hand>();\r\n    const [decisionEvaluation, setDecisionEvaluation] = useState<DecisionEvaluation>();\r\n    const [decisionEvaluationTimeout, setDecisionEvaluationTimeout] = useState(0);\r\n    const [gameConfig, setGameConfig] = useState(getDefaultGameConfig());\r\n    const [onBoardingStep, setOnBoardingStep] = useState(-1);\r\n    const [peeking, setPeeking] = useState(false);\r\n    const [phase, setPhase] = useState<Phases>(Phases.finished);\r\n    const [player, setPlayer] = useState<Player>(createPlayer());\r\n    const [trainingHands, setTrainingHands] = useState(getDefaultTrainingHands());\r\n    const [sounds, setSounds] = useState<{ hit: Audio.Sound; miss: Audio.Sound }>();\r\n    const [trainingStatus, setTrainingStatus] = useState(getDefaultTrainingStatus());\r\n\r\n    const navigationRef = useRef<NavigationContainerRef>(null);\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            getGameConfig(gameConfig),\r\n            getHasCompletedOnboarding(),\r\n            getPlayerEarnings(),\r\n            getPlayerEarningsHistorical(),\r\n            getTrainingProgress(),\r\n            initializeSounds()\r\n        ]).then((results) => {\r\n            const _gameConfig = results[0];\r\n            const hasCompletedOnboarding = results[1];\r\n            const playerEarnings = results[2];\r\n            const playerEarningsHistorical = results[3];\r\n            const trainingProgress = results[4];\r\n            const _sounds = results[5];\r\n\r\n            setGameConfig(_gameConfig);\r\n            const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\r\n            setTrainingHands(nextTrainingHands);\r\n\r\n            if (!hasCompletedOnboarding) {\r\n                ((navigationRef.current as unknown) as AppNavigation).navigate(\r\n                    RouteNames.onboarding\r\n                );\r\n            }\r\n\r\n            setPlayer({\r\n                ...player,\r\n                cash: playerEarnings,\r\n                earningsHistorical: playerEarningsHistorical\r\n            });\r\n\r\n            if (trainingProgress) {\r\n                const nextTrainingStatus = retrieveTrainingStatus(\r\n                    trainingProgress,\r\n                    nextTrainingHands,\r\n                    _gameConfig\r\n                );\r\n                setTrainingStatus(nextTrainingStatus);\r\n            }\r\n\r\n            setSounds(_sounds);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (navigationRef.current && !navigationListener) {\r\n            navigationListener = navigationRef.current.addListener('state', (event) => {\r\n                setCurrentRoute(event.data.state!.routes[event.data.state!.index!].name);\r\n            });\r\n        }\r\n    }, [navigationRef.current]);\r\n\r\n    const currentHand = getCurrentHand(player);\r\n    const isDoubleEnabled =\r\n        currentHand !== undefined && canDouble(currentHand, player.hands, gameConfig.casinoRules);\r\n    const isHitEnabled = currentHand !== undefined && canHit(player.hands, gameConfig.casinoRules);\r\n    const isSplitEnabled =\r\n        currentHand !== undefined &&\r\n        canSplit(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const isSurrenderEnabled =\r\n        currentHand !== undefined &&\r\n        canSurrender(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const currentDealerSymbol = dealerHand && symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const updateOnBoardingStep = (direction: 'forward' | 'backward') => {\r\n        const nextStep = onBoardingStep + (direction === 'forward' ? 1 : -1);\r\n        onBoardingSteps[nextStep] &&\r\n            onBoardingSteps[nextStep].load &&\r\n            onBoardingSteps[nextStep].load!((navigationRef.current as unknown) as AppNavigation);\r\n        setOnBoardingStep(nextStep);\r\n    };\r\n\r\n    const exitOnboarding = () => {\r\n        setOnBoardingStep(-1);\r\n        updateHasCompletedOnboarding(true);\r\n        ((navigationRef.current as unknown) as AppNavigation).navigate(RouteNames.table);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (decisionEvaluationTimeout) {\r\n            clearTimeout(decisionEvaluationTimeout);\r\n        }\r\n        if (decisionEvaluation && decisionEvaluation.isHit) {\r\n            const nextTimeout = setTimeout(() => {\r\n                setDecisionEvaluation(undefined);\r\n            }, 1000);\r\n            setDecisionEvaluationTimeout(nextTimeout);\r\n        }\r\n    }, [decisionEvaluation]);\r\n\r\n    useEffect(() => {\r\n        if (phase === 'dealer') {\r\n            handleDealerTurn(dealerHand!, gameConfig, player, setDealerHand, setPhase, setPlayer);\r\n        }\r\n    }, [phase, dealerHand]);\r\n\r\n    const saveGameConfig = (nextGameConfig: GameConfig) => {\r\n        setGameConfig(nextGameConfig);\r\n        updateGameConfig(nextGameConfig);\r\n    };\r\n\r\n    const startTrainingRound = (playerHand: Hand, dealerHand: Hand) => {\r\n        const nextPlayer = { ...player };\r\n        initializeHands(nextPlayer, playerHand);\r\n\r\n        if (\r\n            gameConfig.casinoRules[CasinoRulesKeys.holeCard] &&\r\n            gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            canBeDealerBlackjack(dealerHand)\r\n        ) {\r\n            setPeeking(true);\r\n            setTimeout(() => {\r\n                setPeeking(false);\r\n                if (isDealerBlackjack(dealerHand)) {\r\n                    revealDealerHoleCard(dealerHand);\r\n                    setPhase(Phases.dealer);\r\n                } else {\r\n                    setPhase(Phases.player);\r\n                }\r\n            }, 1500);\r\n        } else {\r\n            setPhase(\r\n                isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)\r\n                    ? Phases.dealer\r\n                    : Phases.player\r\n            );\r\n        }\r\n\r\n        setDealerHand(dealerHand);\r\n        setPlayer(nextPlayer);\r\n        setDecisionEvaluation(undefined);\r\n\r\n        if (\r\n            onBoardingSteps[onBoardingStep] &&\r\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.startRound\r\n        ) {\r\n            updateOnBoardingStep('forward');\r\n        }\r\n    };\r\n\r\n    const finishCurrentHand = (player: Player) => {\r\n        if (isLastHand(player)) {\r\n            setPhase(Phases.dealer);\r\n            // By setting the phase to dealer, the corresponding useEffect hook will be executed\r\n        } else {\r\n            const nextPlayer = { ...player };\r\n            startNextHand(\r\n                nextPlayer,\r\n                gameConfig.untrainedPairsPriority,\r\n                currentDealerSymbol!,\r\n                trainingHands,\r\n                trainingStatus.trainingProgress\r\n            );\r\n            setPlayer(nextPlayer);\r\n            if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n                finishCurrentHand(nextPlayer);\r\n            }\r\n        }\r\n    };\r\n\r\n    const evaluatePlayerDecision = (playerDecision: PlayerDecision, hand: Hand) => {\r\n        const nextDecisionEvaluation = evaluateDecision(\r\n            hand,\r\n            dealerHand!,\r\n            trainingHands,\r\n            {\r\n                canDouble: isDoubleEnabled,\r\n                canSplit: isSplitEnabled,\r\n                canSurrender: isSurrenderEnabled\r\n            },\r\n            playerDecision\r\n        );\r\n\r\n        if (gameConfig.isSoundEnabled && sounds) {\r\n            playSound(nextDecisionEvaluation.isHit ? sounds.hit : sounds.miss);\r\n        }\r\n\r\n        setDecisionEvaluation(nextDecisionEvaluation);\r\n\r\n        const handCode = handToHandCode(currentHand);\r\n        let nextTrainingStatus = getNextTrainingStatus(\r\n            trainingStatus,\r\n            trainingHands,\r\n            gameConfig,\r\n            nextDecisionEvaluation.isHit,\r\n            handCode,\r\n            currentDealerSymbol!\r\n        );\r\n\r\n        if (handCode === HandCode.Split5s) {\r\n            // A 5,5 must also set the corresponding state for Hard 10\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                trainingHands,\r\n                gameConfig,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard10,\r\n                currentDealerSymbol!\r\n            );\r\n        } else if (handCode === HandCode.Split10s) {\r\n            // A 10,10 must also set the corresponding state for Hard 20\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                trainingHands,\r\n                gameConfig,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard20,\r\n                currentDealerSymbol!\r\n            );\r\n        }\r\n\r\n        setTrainingStatus(nextTrainingStatus);\r\n        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n\r\n        if (\r\n            onBoardingSteps[onBoardingStep] &&\r\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.playerAction\r\n        ) {\r\n            updateOnBoardingStep('forward');\r\n        }\r\n\r\n        if (nextTrainingStatus.isCompleted && !trainingStatus.isCompleted) {\r\n            navigationRef.current?.navigate(RouteNames.trainingCompleted);\r\n            saveGameConfig({ ...gameConfig, untrainedPairsPriority: false });\r\n        }\r\n    };\r\n\r\n    const doubleHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.double, currentHand);\r\n        doubleCurrentHand(nextPlayer, getRandomCard());\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const hitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.hit, currentHand);\r\n        hitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.untrainedPairsPriority,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(currentHand, nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const standHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.stand, currentHand);\r\n        standCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const splitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.split, currentHand);\r\n        splitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.untrainedPairsPriority,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const surrenderHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.surrender, currentHand);\r\n        surrenderCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    return (\r\n        <NavigationContainer ref={navigationRef}>\r\n            <StatusBar hidden={true} />\r\n            <NavBar\r\n                navigation={(navigationRef.current as unknown) as AppNavigation}\r\n                onBoardingStep={onBoardingStep}\r\n                player={player}\r\n                routeName={currentRoute}\r\n                trainingStatus={trainingStatus}\r\n            />\r\n            <Stack.Navigator\r\n                initialRouteName={initialRouteName}\r\n                screenOptions={{\r\n                    headerShown: false,\r\n                    cardStyle: {\r\n                        backgroundColor: tableColor\r\n                    }\r\n                }}\r\n            >\r\n                <Stack.Screen name={RouteNames.basicStrategyTable}>\r\n                    {() => <BasicStrategyTable casinoRules={gameConfig.casinoRules} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.configMenu}>\r\n                    {(props) => (\r\n                        <ConfigMenu\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            resetTrainingStatus={() => {\r\n                                const nextTrainingStatus = getDefaultTrainingStatus();\r\n                                const nextPlayer: Player = {\r\n                                    ...player,\r\n                                    cash: 0,\r\n                                    earningsHistorical: [0]\r\n                                };\r\n\r\n                                updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n                                updatePlayerEarnings(nextPlayer.cash);\r\n                                updatePlayerEarningsHistorical(nextPlayer.earningsHistorical);\r\n\r\n                                setPlayer(nextPlayer);\r\n                                setTrainingStatus(nextTrainingStatus);\r\n\r\n                                props.navigation.navigate(RouteNames.table);\r\n                            }}\r\n                            setGameConfig={(_gameConfig) => {\r\n                                const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\r\n                                const nextTrainingStatus: TrainingStatus = {\r\n                                    ...trainingStatus,\r\n                                    isProgressBlocked: getIsProgressBlocked(\r\n                                        trainingStatus,\r\n                                        trainingHands,\r\n                                        _gameConfig.selectedHandsOnly,\r\n                                        _gameConfig.selectedHands\r\n                                    )\r\n                                };\r\n\r\n                                saveGameConfig(_gameConfig);\r\n                                setTrainingHands(nextTrainingHands);\r\n                                setTrainingStatus(nextTrainingStatus);\r\n                            }}\r\n                            trainingHands={trainingHands}\r\n                            trainingStatus={trainingStatus}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.earningsChart}>\r\n                    {() => <EarningsChart earningsHistorical={player.earningsHistorical} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.handDecisions}>\r\n                    {(props) => (\r\n                        <HandDecisions casinoRules={gameConfig.casinoRules} route={props.route} />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.hitSplitAces} component={HitSplitAces} />\r\n                <Stack.Screen name={RouteNames.holeCard} component={HoleCard} />\r\n                <Stack.Screen name={RouteNames.missedPairs}>\r\n                    {(props) => (\r\n                        <MissedPairs\r\n                            gameConfig={gameConfig}\r\n                            missedTrainingPairs={trainingStatus.missedTrainingPairs}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.onboarding}>\r\n                    {() => (\r\n                        <Onboarding\r\n                            skipOnboardingHandler={exitOnboarding}\r\n                            startOnboardingHandler={() => updateOnBoardingStep('forward')}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.table}>\r\n                    {(props) => (\r\n                        <Table\r\n                            dealerHand={dealerHand}\r\n                            decisionEvaluation={decisionEvaluation}\r\n                            gameConfig={gameConfig}\r\n                            handlers={{\r\n                                double: doubleHandler,\r\n                                hit: hitHandler,\r\n                                split: splitHandler,\r\n                                stand: standHandler,\r\n                                surrender: surrenderHandler\r\n                            }}\r\n                            isDoubleEnabled={isDoubleEnabled}\r\n                            isHitEnabled={isHitEnabled}\r\n                            isSplitEnabled={isSplitEnabled}\r\n                            isSurrenderEnabled={isSurrenderEnabled}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            peeking={peeking}\r\n                            phase={phase}\r\n                            player={player}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.trainingCompleted} component={TrainingCompleted} />\r\n                <Stack.Screen name={RouteNames.trainingPairs}>\r\n                    {(props) => (\r\n                        <TrainingPairs\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen\r\n                    name={RouteNames.untrainedPairsPriority}\r\n                    component={UntrainedPairsPriority}\r\n                />\r\n            </Stack.Navigator>\r\n\r\n            {onBoardingStep > -1 && (\r\n                <OnboardingBar\r\n                    exitOnboarding={exitOnboarding}\r\n                    nextStepHandler={() => updateOnBoardingStep('forward')}\r\n                    onBoardingStep={onBoardingStep}\r\n                    previousStepHandler={() => updateOnBoardingStep('backward')}\r\n                />\r\n            )}\r\n        </NavigationContainer>\r\n    );\r\n}\r\n"],"sourceRoot":""}