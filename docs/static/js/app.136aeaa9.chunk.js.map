{"version":3,"sources":["assets/failure.mp3","assets/success.mp3","assets/card-slide.mp3","src/types/card.ts","src/types/casino-rules.ts","src/types/decisions.ts","src/types/hand.ts","src/types/navigation.ts","src/types/onboarding.ts","src/types/phases.ts","src/types/training-pair.ts","src/async-storage.ts","src/constants.ts","src/components/nav-bar-items/config-button.tsx","src/components/nav-bar-items/earnings-indicator.tsx","src/components/nav-bar-items/precision-indicator.tsx","src/components/nav-bar-items/progress-indicator.tsx","src/logic/onboarding.ts","src/components/onboarding-section.tsx","src/components/nav-bar.tsx","src/components/button.tsx","src/components/onboarding-bar.tsx","src/utils.ts","src/logic/card.ts","src/logic/hand-code.ts","src/logic/hand.ts","src/logic/player.ts","src/logic/dealer-symbols.ts","src/logic/casino-rules.ts","src/logic/hand-decision-set.ts","src/logic/training-hand.ts","src/logic/training-pair.ts","src/logic/training-status.ts","src/logic/app-state.ts","src/logic/basic-strategy.ts","src/logic/sound-queue.ts","src/components/card-component.tsx","src/components/hand-component.tsx","src/views/blue-cards-info.tsx","src/components/casino-rules/doubling-picker.tsx","src/components/casino-rules/rule-switcher.tsx","src/components/divider.tsx","src/components/help-icon.tsx","src/views/config-menu.tsx","src/views/failed-hands.tsx","src/views/gold-hands-info.tsx","src/components/hand-decisions-table.tsx","src/views/gold-hands-levels-info.tsx","src/views/hand-decisions.tsx","src/views/onboarding.tsx","src/components/actions.tsx","src/components/decision-evaluation.tsx","src/views/table.tsx","src/views/training-completed.tsx","src/views/training-hands.tsx","App.tsx","src/logic/game-config.ts"],"names":["module","exports","CardSuit","SimpleCardSymbol","SpecialCardSymbol","CasinoRulesKeys","Doubling","BaseDecisions","DynamicDecisions","PlayerDecisions","HandCode","HandOutcome","RouteNames","OnBoardingSections","Phases","initialRouteName","table","TrainingPairStatus","updatePlayerEarnings","playerEarnings","AsyncStorage","setItem","JSON","stringify","catch","updateTrainingProgress","TrainingProgress","colors","hit","split","stand","double_hit","double_stand","surrender_hit","double","surrender","ConfigButton","props","TouchableOpacity","onPress","isEnabled","routeName","navigation","navigate","configMenu","goBack","undefined","style","alignItems","flexGrow","justifyContent","width","Fragment","height","viewBox","fill","d","areGoldHandsBlockingProgress","progress","View","position","right","bottom","Text","color","fontWeight","EarningsIndicator","earningsColor","earnings","fontSize","marginTop","transform","PrecisionIndicator","precision","Math","floor","failedHands","flexDirection","marginLeft","ProgressIndicator","trainingHands","onBoardingSteps","activeSection","tableActions","hideNextButton","id","load","text","tablePlayerHands","hidePreviousButton","tableDealerHand","tableFeedback","progressIndicator","precisionIndicator","configMenuButton","casinoRules","appSettings","OnBoardingSection","isOnboardingActive","onBoardingStep","isHighlighted","children","backgroundColor","opacity","top","left","animateIndicator","Animated","sequence","timing","toValue","duration","useNativeDriver","start","NavBar","attemptedTrainingPairs","passedTrainingPairs","earningsPosition","useMemo","Value","precisionPosition","progressPosition","useEffect","player","cash","translateX","Button","marginBottom","textColor","textSize","OnboardingBar","currentStep","previousStepHandler","padding","length","nextStepHandler","exitOnboarding","cartesianProduct","firstArray","secondArray","elementBuilder","reduce","product","x","concat","map","y","getObjectKeys","object","Object","keys","getRandomItem","items","round","random","playSound","sound","stopAsync","then","playAsync","cardsValue","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","suits","clubs","diamonds","hearts","spades","symbols","deck","suit","symbol","isBlueCard","isGoldCard","getCardEffectiveValue","card","values","getCardValues","getCardsValues","cards","options","numbers","numbersDictionary","dictionary","next","removeDuplicates","filter","peeking","isHoleCard","reducedValues","currentValues","getRandomCard","randomCard","getRandomSuit","simpleSymbolToSymbol","simpleSymbol","tenPointsSymbols","symbolToSimpleSymbol","indexOf","valueToSymbol","number","String","isSoftHandCode","handCode","includes","isSplitHandCode","areHandsSplitAces","hands","createDealerHand","dealerSymbol","dealerCards","holeCard","push","createHand","bet","dealCard","hand","getCardForUntrainedHand","playerHand","trainingProgress","isPlayerHandSoft","playerHandValues","valuesToUntrainedHands","trainingHand","valueToReachThisHand","isHandUntrainedForDealerSymbol","code","untrained","softDifference","parseInt","hardDifference","value","getHandEffectiveValue","effectiveValue","some","v","reverse","find","getHandValidValues","handCodeToHand","handSymbols","getSplitHandSymbols","handValues","s","complementarySymbol","getSoftHandSymbols","minValue","max","maxValue","min","firstValue","secondValue","getHardHandSymbols","handToHandCode","c","join","hasHoleCard","isBlackjack","handsNumber","isBust","isFinished","hitSplitAces","revealDealerHoleCard","getCurrentHand","handIndex","resolveHands","dealerHand","handOutcome","playerHandValue","dealerHandValue","bust","blackjack","dealerWins","playerWins","outcome","resolveHand","allDealerSymbols","getUntrainedDealerSymbols","trainingHandStatus","passed","getDefaultCasinoRules","blackjackPeek","doubleAfterSplit","doubling","nineToElevenSoft","alwaysHit","alwaysStand","getHandDecisionSetLevel","decisionSet","reduced","previousValue","level","handDecisionSetGetters","Hard5","Hard6","Hard7","Hard8","Hard9","nineToEleven","Hard10","tenToEleven","Hard11","Hard12","Hard13","Hard14","Hard15","Hard16","Hard17","Hard18","Hard19","Hard20","Soft13","anyPair","Soft14","Soft15","Soft16","Soft17","Soft18","Soft19","Soft20","Split2s","Split3s","Split4s","Split5s","Split6s","Split7s","Split8s","Split9s","Split10s","SplitAs","getActiveTrainingHands","goldHandsLevels","getGoldHandsNumber","getTrainingHands","dependencies","name","forEach","getUntrainedTrainingHands","allTrainingPairsNumber","getSpecificTrainingPair","dealer","getAreGoldHandsBlockingProgress","gameConfig","useGoldHands","getDefaultTrainingStatus","failedTrainingPairs","isCompleted","reducedTrainingProgress","reducedDealerSymbols","isTrainingCompleted","reduceTrainingPairProgress","trainingPairStatus","reducedTrainingStatus","failed","retrieveTrainingStatus","trainingStatus","reduceTrainingHandProgress","getNextTrainingStatus","isHit","currentHandCode","currentDealerSymbol","currentHandTrainingStatus","nextAttemptedTrainingPairs","nextFailedTrainingPairs","currentFailedTrainingPairs","failedTrainingPair","getNextFailedTrainingPairs","nextPassedTrainingHands","evaluateDynamicDecision","dynamicDecision","dynamicConditions","canDouble","canSurrender","pushSound","soundQueue","sounds","isActive","playNextSound","nextSound","pop","setTimeout","CardComponent","useState","cardSlideSound","setCardSlideSound","animateCard","skipAnimation","parallel","animationsDuration","isSoundEnabled","Audio","Sound","createAsync","cardSlideSoundMp3","volume","result","setValue","cardColor","borderRadius","marginRight","translateY","blueCardsInfo","goldHandsInfo","textAlign","HandComponent","displayValues","isCurrentHand","flexWrap","maxWidth","paddingTop","paddingHorizontal","index","key","BlueCardsInfo","hardFourteen","splitFour","ScrollView","margin","fontStyle","marginVertical","DoublingPicker","flex","Picker","selectedValue","onValueChange","newValue","nextDoubling","nextCasinoRules","setCasinoRules","Item","label","none","RuleSwitcher","SwitchCore","Switch","isDisabled","ruleName","trackColor","true","false","hideLabel","Divider","HelpIcon","textStyle","ConfigMenu","setAreGoldHandsBlockingProgress","setGoldHandsLevels","goldHandsNumber","setGoldHandsNumber","isDealerAnimationEnabled","setIsDealerAnimationEnabled","setIsSoundEnabled","setTrainingHands","useBlueCards","setUseBlueCards","setUseGoldHands","isSomeLevelSelected","_goldHandsLevels","areGoldHandsBlockingProgressHandler","nextGoldHandsLevels","nextUseGoldHands","nextTrainingHands","casinoRuleChangeHandler","nextGoldHandsNumber","isSaveButtonEnabled","contentContainerStyle","paddingVertical","goldHandsLevelsInfo","numberKey","disabled","paddingLeft","paddingBottom","nextGameConfig","setGameConfig","Linking","phase","finished","onboarding","Alert","alert","nextTrainingStatus","setTrainingStatus","FailedHands","handName","trainingPair","startTrainingRound","GoldHandsInfo","HandDecisionsTable","handDecisionSet","simpleCardSymbol","levelsColor","1","2","3","4","GoldHandsLevelsInfo","hardEight","splitNine","marginHorizontal","HandDecisions","route","params","dependency","Onboarding","startOnboardingHandler","skipOnboardingHandler","Actions","isPlayerTurn","isDoublingAvailable","isSurrenderAvailable","activeOptionalButtons","Number","optionalButtonsWidth","untrainedTrainingHands","randomTrainingHand","untrainedDealerSymbols","randomDealerSymbol","getRandomTrainingPair","isHitEnabled","handlers","isSplitEnabled","isDoubleEnabled","isSurrenderEnabled","textProperties","DecisionEvaluationComponent","decisionEvaluation","showDecisionsHandler","Table","minHeight","handDecisions","lastActionHand","TrainingCompleted","TrainingHands","unfoldedHand","setUnfoldedHand","navigationListener","Stack","createStackNavigator","App","currentRoute","setCurrentRoute","setDealerHand","setDecisionEvaluation","decisionEvaluationTimeout","setDecisionEvaluationTimeout","setOnBoardingStep","setPeeking","setPhase","createPlayer","setPlayer","setSounds","navigationRef","useRef","currentGameConfig","Promise","all","getItem","storedGameConfig","parse","failureSoundMp3","successSoundMp3","results","failure","success","errors","console","log","current","getProgress","addListener","event","data","state","routes","currentHand","handEffectiveValue","isHandWithTwoCards","isSingleHand","contains9To11","handValue","is10To11","is9To11","updateOnBoardingStep","direction","nextStep","hasCompletedOnboarding","_trainingStatus","clearTimeout","nextTimeout","nextDealerHand","handleDealerTurn","nextPlayer","initialHand","initializeHands","visibleCard","cardSymbol","canBeDealerBlackjack","cardValues","isDealerBlackjack","finishCurrentHand","isLastHand","nextHand","nextCard","startNextHand","evaluatePlayerDecision","playerDecision","nextDecisionEvaluation","optimalDecision","evaluateDecision","trainingCompleted","doubleHandler","doubleCurrentHand","hitHandler","hitCurrentHand","standHandler","standCurrentHand","splitHandler","firstHand","secondHand","splice","splitCurrentHand","surrenderHandler","surrenderCurrentHand","NavigationContainer","ref","StatusBar","hidden","Navigator","screenOptions","headerShown","cardStyle","Screen","component","_gameConfig"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,wECU/BC,EAWAC,EAaAC,ECzBAC,EASAC,EChBAC,EAoBAC,EAQAC,E,kJFpBAP,K,eAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAWAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,E,SAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,SAAAA,E,UAAAA,M,cAaAC,K,SAAAA,E,UAAAA,E,UAAAA,M,cCzBAC,K,+BAAAA,E,sCAAAA,E,oBAAAA,E,8BAAAA,E,qBAAAA,E,uBAAAA,M,cASAC,O,eAAAA,I,6BAAAA,I,+BAAAA,I,uCAAAA,I,sBAAAA,M,cChBAC,K,UAAAA,E,cAAAA,E,eAAAA,M,cAoBAC,K,0BAAAA,E,8BAAAA,E,iCAAAA,M,cAQAC,K,gBAAAA,E,uBAAAA,M,SCrBAC,EAqCAC,ECtCAC,E,wBDCAF,K,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,E,eAAAA,M,cAqCAC,K,sBAAAA,E,YAAAA,E,yBAAAA,E,yBAAAA,E,aAAAA,M,cCtCAC,K,8BAAAA,E,wBAAAA,E,0BAAAA,E,8BAAAA,E,0CAAAA,E,8BAAAA,E,wBAAAA,E,cAAAA,E,sCAAAA,E,+BAAAA,M,KAaL,ICnBKC,ECFAC,EFqBCC,EAAmBH,EAAWI,O,SCnB/BH,K,0BAAAA,E,0BAAAA,E,oCAAAA,E,wCAAAA,E,sCAAAA,E,4BAAAA,E,kCAAAA,E,8BAAAA,E,qCAAAA,M,cCFAC,K,gBAAAA,E,oBAAAA,E,iBAAAA,M,SCaAG,E,uBAAAA,O,yBAAAA,I,mBAAAA,I,oBAAAA,M,kBC2FCC,EAAuB,SAACC,GA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","file":"static/js/app.136aeaa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/failure.497d59f1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/success.dc863917.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-slide.d80ce25b.mp3\";","import { Dictionary } from './dictionary';\r\n\r\nexport interface Card {\r\n    isBlueCard: boolean;\r\n    isGoldCard: boolean;\r\n    isHoleCard?: boolean;\r\n    suit: CardSuit;\r\n    symbol: CardSymbol;\r\n}\r\n\r\nexport enum CardSuit {\r\n    clubs = '\\u2663',\r\n    diamonds = '\\u2666',\r\n    hearts = '\\u2665',\r\n    spades = '\\u2660'\r\n}\r\n\r\nexport type CardSymbol = SimpleCardSymbol | SpecialCardSymbol;\r\n\r\nexport type CardValues = Dictionary<number[], CardSymbol>;\r\n\r\nexport enum SimpleCardSymbol {\r\n    Ace = 'A',\r\n    Two = '2',\r\n    Three = '3',\r\n    Four = '4',\r\n    Five = '5',\r\n    Six = '6',\r\n    Seven = '7',\r\n    Eight = '8',\r\n    Nine = '9',\r\n    Ten = '10'\r\n}\r\n\r\nexport enum SpecialCardSymbol {\r\n    Jack = 'J',\r\n    Queen = 'Q',\r\n    King = 'K'\r\n}\r\n\r\nexport type TenPointsCardSymbol = SimpleCardSymbol.Ten | SpecialCardSymbol;\r\n","export interface CasinoRules {\r\n    [CasinoRulesKeys.blackjackPeek]: boolean;\r\n    [CasinoRulesKeys.doubleAfterSplit]: boolean;\r\n    [CasinoRulesKeys.doubling]: Doubling;\r\n    [CasinoRulesKeys.hitSplitAces]: boolean;\r\n    [CasinoRulesKeys.holeCard]: boolean;\r\n    [CasinoRulesKeys.surrender]: boolean;\r\n}\r\n\r\nexport enum CasinoRulesKeys {\r\n    blackjackPeek = 'Blackjack Peek',\r\n    doubleAfterSplit = 'Double after split',\r\n    doubling = 'Doubling',\r\n    hitSplitAces = 'Hit split aces',\r\n    holeCard = 'Hole card',\r\n    surrender = 'Surrender'\r\n}\r\n\r\nexport enum Doubling {\r\n    none = 0,\r\n    tenToEleven = 1,\r\n    nineToEleven = 2,\r\n    nineToElevenSoft = 3,\r\n    anyPair = 4\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\n\r\nexport enum BaseDecisions {\r\n    hit = 'Hit',\r\n    split = 'Split',\r\n    stand = 'Stand'\r\n}\r\n\r\nexport interface DecisionEvaluation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    dynamicDecision: DynamicDecision;\r\n    handName: string;\r\n    isHit: boolean;\r\n}\r\n\r\nexport interface DynamicConditions {\r\n    canDouble: boolean;\r\n    canSurrender: boolean;\r\n}\r\n\r\nexport type DynamicDecision = BaseDecisions | DynamicDecisions;\r\n\r\nexport enum DynamicDecisions {\r\n    double_hit = 'Double / Hit',\r\n    double_stand = 'Double / Stand',\r\n    surrender_hit = 'Surrender / Hit'\r\n}\r\n\r\nexport type PlayerDecision = BaseDecisions | PlayerDecisions;\r\n\r\nexport enum PlayerDecisions {\r\n    double = 'Double',\r\n    surrender = 'Surrender'\r\n}\r\n","import { Card } from './card';\r\n\r\nexport interface Hand {\r\n    bet: number;\r\n    cards: Card[];\r\n    outcome?: string;\r\n    values: number[];\r\n}\r\n\r\nexport enum HandCode {\r\n    Hard5 = '5',\r\n    Hard6 = '6',\r\n    Hard7 = '7',\r\n    Hard8 = '8',\r\n    Hard9 = '9',\r\n    Hard10 = '10',\r\n    Hard11 = '11',\r\n    Hard12 = '12',\r\n    Hard13 = '13',\r\n    Hard14 = '14',\r\n    Hard15 = '15',\r\n    Hard16 = '16',\r\n    Hard17 = '17',\r\n    Hard18 = '18',\r\n    Hard19 = '19',\r\n    Hard20 = '20',\r\n    Soft13 = '3/13',\r\n    Soft14 = '4/14',\r\n    Soft15 = '5/15',\r\n    Soft16 = '6/16',\r\n    Soft17 = '7/17',\r\n    Soft18 = '8/18',\r\n    Soft19 = '9/19',\r\n    Soft20 = '10/20',\r\n    Split2s = '2,2',\r\n    Split3s = '3,3',\r\n    Split4s = '4,4',\r\n    Split5s = '5,5',\r\n    Split6s = '6,6',\r\n    Split7s = '7,7',\r\n    Split8s = '8,8',\r\n    Split9s = '9,9',\r\n    Split10s = '10,10',\r\n    SplitAs = 'A,A'\r\n}\r\n\r\nexport enum HandOutcome {\r\n    blackjack = 'Blackjack',\r\n    bust = 'Bust',\r\n    dealerWins = 'Dealer wins',\r\n    playerWins = 'Player wins',\r\n    push = 'Push'\r\n}\r\n","import { Route } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { TrainingHand } from './training-hand';\r\n\r\nexport type AppNavigation = StackNavigationProp<RouteParams>;\r\n\r\nexport type AppRoute<T extends RouteNames> = Route<T, RouteParams[T]>;\r\n\r\nexport enum RouteNames {\r\n    blueCardsInfo = 'blueCardsInfo',\r\n    configMenu = 'configMenu',\r\n    failedHands = 'failedHands',\r\n    goldHandsInfo = 'goldHandsInfo',\r\n    goldHandsLevelsInfo = 'goldHandsLevelsInfo',\r\n    handDecisions = 'handDecisions',\r\n    onboarding = 'onboarding',\r\n    table = 'table',\r\n    trainingCompleted = 'trainingCompleted',\r\n    trainingHands = 'trainingHands'\r\n}\r\n\r\nexport const initialRouteName = RouteNames.table;\r\n\r\nexport type RouteParams = {\r\n    [RouteNames.blueCardsInfo]: undefined;\r\n    [RouteNames.configMenu]: undefined;\r\n    [RouteNames.failedHands]: undefined;\r\n    [RouteNames.goldHandsInfo]: undefined;\r\n    [RouteNames.goldHandsLevelsInfo]: undefined;\r\n    [RouteNames.handDecisions]: {\r\n        trainingHand: TrainingHand;\r\n    };\r\n    [RouteNames.onboarding]: undefined;\r\n    [RouteNames.table]: undefined;\r\n    [RouteNames.trainingCompleted]: undefined;\r\n    [RouteNames.trainingHands]: undefined;\r\n};\r\n","import { AppNavigation } from './navigation';\r\n\r\nexport enum OnBoardingSections {\r\n    appSettings = 'appSettings',\r\n    casinoRules = 'casinoRules',\r\n    configMenuButton = 'configMenuButton',\r\n    precisionIndicator = 'precisionIndicator',\r\n    progressIndicator = 'progressIndicator',\r\n    tableActions = 'tableActions',\r\n    tableDealerHand = 'tableDealerHand',\r\n    tableFeedback = 'tableFeedback',\r\n    tablePlayerHands = 'tablePlayerHands'\r\n}\r\n\r\nexport type OnBoardingStep = {\r\n    activeSection?: OnBoardingSections;\r\n    hideNextButton?: boolean;\r\n    hidePreviousButton?: boolean;\r\n    id: number;\r\n    load: (navigation: AppNavigation) => void;\r\n    text: string;\r\n};\r\n","export enum Phases {\r\n    dealer = 'dealer',\r\n    finished = 'finished',\r\n    player = 'player'\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\nimport { Hand, HandCode } from './hand';\r\n\r\nexport interface TrainingPair {\r\n    dealer: Hand;\r\n    player: Hand;\r\n}\r\n\r\nexport interface TrainingPairRepresentation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    handCode: HandCode;\r\n}\r\n\r\nexport enum TrainingPairStatus {\r\n    untrained = 0,\r\n    passed = 1,\r\n    failed = 2\r\n}\r\n","import AsyncStorage from '@react-native-community/async-storage';\r\nimport { CasinoRulesKeys, GameConfig, TrainingProgress } from './types';\r\n\r\nconst gameConfigKey = 'gameConfig';\r\nconst hasCompletedOnboardingKey = 'hasCompletedOnboarding';\r\nconst playerEarningsKey = 'playerEarnings';\r\nconst trainingProgressKey = 'trainedHands';\r\n\r\nexport const getGameConfig = (currentGameConfig: GameConfig) =>\r\n    AsyncStorage.getItem(gameConfigKey)\r\n        .then<GameConfig>((value) => {\r\n            const storedGameConfig: Partial<GameConfig> | undefined = value && JSON.parse(value);\r\n            return {\r\n                casinoRules:\r\n                    storedGameConfig && storedGameConfig.casinoRules !== undefined\r\n                        ? {\r\n                              [CasinoRulesKeys.blackjackPeek]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.blackjackPeek\r\n                                        ],\r\n                              [CasinoRulesKeys.doubleAfterSplit]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubleAfterSplit] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doubleAfterSplit\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doubleAfterSplit\r\n                                        ],\r\n                              [CasinoRulesKeys.doubling]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.doubling]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.doubling],\r\n                              [CasinoRulesKeys.hitSplitAces]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces],\r\n                              [CasinoRulesKeys.holeCard]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.holeCard]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.holeCard],\r\n                              [CasinoRulesKeys.surrender]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                          }\r\n                        : currentGameConfig.casinoRules,\r\n                goldHandsLevels:\r\n                    storedGameConfig && storedGameConfig.goldHandsLevels !== undefined\r\n                        ? storedGameConfig.goldHandsLevels\r\n                        : currentGameConfig.goldHandsLevels,\r\n                isDealerAnimationEnabled:\r\n                    storedGameConfig && storedGameConfig.isDealerAnimationEnabled !== undefined\r\n                        ? storedGameConfig.isDealerAnimationEnabled\r\n                        : currentGameConfig.isDealerAnimationEnabled,\r\n                isSoundEnabled:\r\n                    storedGameConfig && storedGameConfig.isSoundEnabled !== undefined\r\n                        ? storedGameConfig.isSoundEnabled\r\n                        : currentGameConfig.isSoundEnabled,\r\n                useBlueCards:\r\n                    storedGameConfig && storedGameConfig.useBlueCards !== undefined\r\n                        ? storedGameConfig.useBlueCards\r\n                        : currentGameConfig.useBlueCards,\r\n                useGoldHands:\r\n                    storedGameConfig && storedGameConfig.useGoldHands !== undefined\r\n                        ? storedGameConfig.useGoldHands\r\n                        : currentGameConfig.useGoldHands\r\n            };\r\n        })\r\n        .catch(() => currentGameConfig);\r\n\r\nexport const getHasCompletedOnboarding = () =>\r\n    AsyncStorage.getItem(hasCompletedOnboardingKey)\r\n        .then<boolean>((value) => (value ? JSON.parse(value) : false))\r\n        .catch(() => false);\r\n\r\nexport const getPlayerEarnings = () =>\r\n    AsyncStorage.getItem(playerEarningsKey)\r\n        .then<number>((value) => (value ? parseInt(value) : 0))\r\n        .catch(() => 0);\r\n\r\nexport const getTrainingProgress = () =>\r\n    AsyncStorage.getItem(trainingProgressKey)\r\n        .then<TrainingProgress>((value) => (value ? JSON.parse(value) : undefined))\r\n        .catch(() => undefined);\r\n\r\nexport const updateGameConfig = (gameConfig: GameConfig) => {\r\n    AsyncStorage.setItem(gameConfigKey, JSON.stringify(gameConfig)).catch(() => {});\r\n};\r\n\r\nexport const updateHasCompletedOnboarding = (hasCompletedOnboarding: boolean) => {\r\n    AsyncStorage.setItem(\r\n        hasCompletedOnboardingKey,\r\n        JSON.stringify(hasCompletedOnboarding)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarnings = (playerEarnings: number) => {\r\n    AsyncStorage.setItem(playerEarningsKey, JSON.stringify(playerEarnings)).catch(() => {});\r\n};\r\n\r\nexport const updateTrainingProgress = (TrainingProgress: TrainingProgress) => {\r\n    AsyncStorage.setItem(trainingProgressKey, JSON.stringify(TrainingProgress)).catch(() => {});\r\n};\r\n","import { BaseDecisions, DynamicDecisions, PlayerDecisions } from './types';\r\n\r\nexport const doubleColor = '#ffc107';\r\nexport const hitColor = '#428bca';\r\nexport const splitColor = '#5cb85c';\r\nexport const standColor = '#46b8da';\r\nexport const surrenderColor = '#dc3545';\r\n\r\nexport const tableColor = '#088446';\r\n\r\nexport const colors = {\r\n    [BaseDecisions.hit]: hitColor,\r\n    [BaseDecisions.split]: splitColor,\r\n    [BaseDecisions.stand]: standColor,\r\n    [DynamicDecisions.double_hit]: '#A1A669',\r\n    [DynamicDecisions.double_stand]: '#A3BD71',\r\n    [DynamicDecisions.surrender_hit]: '#8F6088',\r\n    [PlayerDecisions.double]: doubleColor,\r\n    [PlayerDecisions.surrender]: surrenderColor\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, initialRouteName, RouteNames } from '../../types';\r\n\r\nexport interface ConfigButtonProps {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nexport const ConfigButton: React.FC<ConfigButtonProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          if (props.routeName === initialRouteName) {\r\n                              props.navigation.navigate(RouteNames.configMenu);\r\n                          } else {\r\n                              props.navigation.goBack();\r\n                          }\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {props.routeName === initialRouteName ? (\r\n                <React.Fragment>\r\n                    <Svg height={24} viewBox=\"340 140 280 279.416\" width={24}>\r\n                        <Path\r\n                            fill=\"white\"\r\n                            d=\"M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083\r\n\tc-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333\r\n\tL362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25\r\n\tc2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916\r\n\th51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25\r\n\tc4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667\r\n\tS533.667,250.25,533.667,280S509.75,333.666,480,333.666z\"\r\n                        />\r\n                    </Svg>\r\n                    {props.areGoldHandsBlockingProgress && props.progress < 100 && (\r\n                        <View\r\n                            style={{\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                bottom: 8\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'black', fontWeight: 'bold' }}>⚠️</Text>\r\n                        </View>\r\n                    )}\r\n                </React.Fragment>\r\n            ) : (\r\n                <Svg height={24} viewBox=\"0 0 352 512\" width={24}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n                    />\r\n                </Svg>\r\n            )}\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text } from 'react-native';\r\nimport Svg, { G, Path } from 'react-native-svg';\r\nimport { splitColor, surrenderColor } from '../../constants';\r\n\r\nexport interface EarningsIndicatorProps {\r\n    earnings: number;\r\n}\r\n\r\nexport const EarningsIndicator: React.FC<EarningsIndicatorProps> = (props) => {\r\n    const earningsColor =\r\n        props.earnings > 0 ? splitColor : props.earnings < 0 ? surrenderColor : 'white';\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text style={{ color: earningsColor, fontSize: 20 }}>\r\n                {`${props.earnings > 0 ? '+' : ''}${props.earnings}`}\r\n            </Text>\r\n            <Svg height={24} viewBox=\"0 0 468 468\" width={24} style={{ marginTop: 2 }}>\r\n                <G transform=\"translate(0,468) scale(0.078000,-0.078000)\">\r\n                    <Path\r\n                        fill={earningsColor}\r\n                        d=\"M2600 5595 c0 -237 -3 -305 -12 -305 -7 0 -63 -5 -125 -10 -140 -12\r\n                    -299 -49 -398 -91 -11 -4 -49 -20 -85 -35 -304 -124 -635 -421 -789 -706 -33\r\n                    -63 -80 -169 -88 -202 -35 -143 -41 -258 -23 -421 37 -323 180 -591 420 -785\r\n                    77 -62 83 -66 116 -87 28 -18 244 -126 279 -140 27 -10 103 -36 115 -38 19 -5\r\n                    100 -27 120 -35 59 -20 254 -55 418 -75 l52 -7 0 -515 0 -516 -82 6 c-76 5\r\n                    -198 30 -223 45 -5 4 -12 7 -15 8 -71 14 -269 163 -285 215 -4 11 -10 19 -14\r\n                    19 -12 0 -75 133 -95 200 l-17 55 -410 -3 -410 -2 6 -63 c17 -165 65 -343 132\r\n                    -487 26 -54 99 -185 115 -205 4 -5 27 -35 51 -65 72 -93 202 -215 327 -306 60\r\n                    -44 244 -154 257 -154 5 0 25 -9 44 -19 34 -18 167 -63 264 -90 62 -17 188\r\n                    -31 276 -31 l79 0 0 -325 0 -325 375 0 375 0 2 332 3 333 85 6 c121 9 341 58\r\n                    430 96 8 3 18 7 22 7 3 1 10 4 14 8 4 5 13 8 20 8 16 0 162 70 249 119 39 22\r\n                    77 44 85 48 8 4 20 12 27 17 7 6 36 27 64 46 70 47 221 181 267 237 20 24 47\r\n                    57 60 71 36 42 132 200 162 267 104 232 133 496 79 720 -11 44 -21 89 -24 100\r\n                    -7 28 -110 235 -132 264 -193 254 -402 410 -708 524 -138 51 -348 95 -495 102\r\n                    -58 3 -129 8 -158 11 l-52 5 2 502 3 502 58 -2 c154 -5 367 -94 455 -188 66\r\n                    -71 103 -148 110 -230 l5 -65 431 0 432 0 -4 38 c-4 47 -29 151 -52 222 -141\r\n                    430 -441 791 -800 962 -133 63 -169 78 -235 94 -5 2 -44 12 -86 23 -42 11\r\n                    -123 25 -180 31 -57 6 -112 13 -121 16 -17 5 -18 28 -18 290 l0 284 -375 0\r\n                    -375 0 0 -305z m0 -1585 l0 -450 -57 0 c-52 1 -84 6 -159 23 -30 7 -158 59\r\n                    -164 66 -3 3 -18 13 -35 21 -54 28 -151 128 -186 192 -32 59 -34 69 -34 158 0\r\n                    69 6 111 20 154 56 167 269 281 528 285 l87 1 0 -450z m975 -1485 c219 -17\r\n                    399 -118 472 -266 46 -93 48 -281 3 -367 -80 -153 -329 -259 -612 -261 l-88\r\n                    -1 0 448 c0 247 3 452 7 456 4 4 37 4 73 2 36 -3 101 -8 145 -11z\"\r\n                    />\r\n                </G>\r\n            </Svg>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface PrecisionIndicatorProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    precision: number;\r\n}\r\n\r\nexport const PrecisionIndicator: React.FC<PrecisionIndicatorProps> = (props) => {\r\n    const precision = Math.floor(props.precision * 1000) / 10;\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.failedHands);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{precision}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M784.5,368.7L990,163.2l-166.9,11.6L834.7,7.9L629.2,213.4l-9,128.5L499.6,462.6c-10.1,0.1-20.1,3.9-27.8,11.6c-15.5,15.5-15.5,40.6,0,56.1c15.5,15.5,40.6,15.5,56.1,0c9.6-9.6,13.3-23,10.9-35.4L656,377.7L784.5,368.7z M671.4,232.6l112-112l-7.1,101l101-7l-112,112l-101,7L671.4,232.6z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M967.8,357.1l-35.6,33.2c10.7,41.4,15.4,84.1,13.9,127.5c-8.6,246-215.7,439.2-461.7,430.6c-246-8.6-439.2-215.7-430.6-461.7c8.6-246,215.7-439.2,461.7-430.6c28.6,1,56.9,5,84.6,11.4l37.7-35.2c-39.3-11.5-79.9-18.2-120.9-19.6C247,3.3,19.7,215.2,10.3,485.2C0.9,755.1,212.8,982.3,482.7,991.8c269.9,9.4,497.2-202.5,506.6-472.4C991.3,463.9,984,409.5,967.8,357.1z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M698.1,426.1c7,18.4,11.6,37.7,13.3,57.6c10.2,116.6-76.4,219.9-193.1,230.1C401.7,724,298.5,637.4,288.3,520.8c-10.2-116.6,76.4-219.9,193-230.1c25.8-2.3,51.7,0.3,76.3,7.3l-4-45.6c-24.8-5.3-50.5-7.1-76.1-4.8C337.1,259.8,232.8,384.1,245,524.5C257.3,665,381.6,769.3,522.1,757C662.6,744.7,766.9,620.5,754.6,480c-1.7-19.8-5.8-39.1-11.9-57.7L698.1,426.1z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface NavBarProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n}\r\n\r\nexport const ProgressIndicator: React.FC<NavBarProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.trainingHands);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{props.progress}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M819.5,386.3h-2.5c-18.4,0-33.4,5.3-48,14.3c-12.7-37.1-45-63.7-86.6-63.7c-18.4,0-35.9,5.3-50.4,14.3c-12.7-37-45-63.7-86.6-63.7c-16.2,0-31.3,4.1-44.7,11.2v-95.3c0-51.9-39.3-94-91.6-94s-94.7,42.1-94.7,94v365l-57.5-57.3c-37-36.7-102.4-31.5-133.9,0s-52.1,94.9-7,140l264.5,262.7c5.5,5.4,11.5,9.9,17.8,13.8c48.2,39.3,103.5,62.6,220.3,62.6c266.9,0,291.6-144,291.6-321.6v-188C910.1,428.4,871.8,386.3,819.5,386.3z M860.3,668.4c0,150.3-0.7,272.1-241.8,272.1c-102.1,0-163.4-22.8-209.9-68.9L158.3,622.9c-22.2-22.2-16.6-50.5,1.6-68.6c18.1-18.1,51.4-18.8,68.9-1.4c0,0,43.9,43.7,81.8,81.3c28.6,28.5,53.8,53.5,53.8,53.5V213.2c0-24.6,20.1-44.5,44.9-44.5c24.8,0,41.7,19.9,41.7,44.5V515h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.4-0.5-5h0.5V391.3c0-24.6,17.9-44.5,42.7-44.5c0,0,43.9-0.6,43.9,44.5v163.3h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.3-0.5-5h0.5V440.8c0-24.6,17.6-44.5,42.4-44.5c0,0,44.8,2.8,44.8,44.5v143.5h0.5c-0.3,1.6-0.5,3.3-0.5,4.9c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.3-11.1,24.3-24.7c0-1.7-0.2-3.3-0.5-4.9h0.5v-98c0-24.6,18.5-44.5,43.3-44.5c0,0,43.4-1.8,43.4,44.5C860.3,486.3,860.3,628.4,860.3,668.4z M277.5,343.4v-83.1c-7.9-17.7-12.4-37.3-12.4-58c0-78.8,63.9-142.7,142.7-142.7s142.7,63.9,142.7,142.7c0,10.8-1.3,21.2-3.6,31.3c17.9,0.7,34.1,8.1,45.9,20.1c4.6-16.4,7.3-33.5,7.3-51.4C600,96.1,513.9,10,407.7,10S215.4,96.1,215.4,202.3C215.4,258.1,239.4,308.3,277.5,343.4z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import { OnBoardingSections, OnBoardingStep, RouteNames } from '../types';\r\n\r\nexport const onBoardingSteps: OnBoardingStep[] = [\r\n    {\r\n        activeSection: OnBoardingSections.tableActions,\r\n        hideNextButton: true,\r\n        id: 1,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click Train to start playing a hand'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tablePlayerHands,\r\n        hidePreviousButton: true,\r\n        id: 2,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This is your hand'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tableDealerHand,\r\n        id: 3,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: \"This is the dealer's hand\"\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tableActions,\r\n        hideNextButton: true,\r\n        hidePreviousButton: true,\r\n        id: 4,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Chose the right action for each of your hands'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tableFeedback,\r\n        hidePreviousButton: true,\r\n        id: 5,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'A validation message will be shown for the chosen action'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.progressIndicator,\r\n        id: 6,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: \"The Progress indicator tells the % of hands you've trained\"\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.progressIndicator,\r\n        id: 7,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.trainingHands);\r\n        },\r\n        text: 'Click on it to view trained hands or train a specific one'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.precisionIndicator,\r\n        id: 8,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: \"The Precision indicator tells the % of hands you've failed\"\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.precisionIndicator,\r\n        id: 9,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.failedHands);\r\n        },\r\n        text: 'Click on it to see the list of failed hands'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.configMenuButton,\r\n        id: 10,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click on the Gear to access the configuration menu'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.casinoRules,\r\n        id: 11,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.configMenu);\r\n        },\r\n        text: 'Chose the casino rules you want to train with'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.appSettings,\r\n        id: 12,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.configMenu);\r\n        },\r\n        text: 'Speed up your training by enabling additional options'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { StyleProp, View, ViewStyle } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { OnBoardingSections } from '../types';\r\n\r\nexport interface OnBoardingSectionProps {\r\n    isHighlighted?: OnBoardingSections | boolean;\r\n    onBoardingStep: number;\r\n    style?: StyleProp<ViewStyle> | ((isHighlighted: boolean) => StyleProp<ViewStyle>);\r\n}\r\n\r\nexport const OnBoardingSection: React.FC<OnBoardingSectionProps> = (props) => {\r\n    const isOnboardingActive = props.onBoardingStep > -1;\r\n    const isHighlighted =\r\n        isOnboardingActive &&\r\n        (typeof props.isHighlighted === 'boolean'\r\n            ? props.isHighlighted\r\n            : props.isHighlighted !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep] &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection === props.isHighlighted);\r\n    const style =\r\n        props.style && typeof props.style === 'function' ? props.style(isHighlighted) : props.style;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                width: '100%',\r\n                ...(style as {})\r\n            }}\r\n        >\r\n            {props.children}\r\n            {isOnboardingActive && !isHighlighted && (\r\n                <View\r\n                    style={{\r\n                        backgroundColor: 'black',\r\n                        opacity: 0.5,\r\n                        top: 0,\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        right: 0,\r\n                        left: 0\r\n                    }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { Animated, View } from 'react-native';\r\nimport { tableColor } from '../constants';\r\nimport { AppNavigation, OnBoardingSections, Player } from '../types';\r\nimport { ConfigButton } from './nav-bar-items/config-button';\r\nimport { EarningsIndicator } from './nav-bar-items/earnings-indicator';\r\nimport { PrecisionIndicator } from './nav-bar-items/precision-indicator';\r\nimport { ProgressIndicator } from './nav-bar-items/progress-indicator';\r\nimport { OnBoardingSection } from './onboarding-section';\r\n\r\nexport interface NavBarProps {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    attemptedTrainingPairs: number;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    player: Player;\r\n    passedTrainingPairs: number;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nconst shakeAmplitude = 6;\r\nconst shakeDuration = 40;\r\nconst useNativeDriver = true;\r\n\r\nconst animateIndicator = (position: Animated.Value) => {\r\n    Animated.sequence([\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: 0,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        })\r\n    ]).start();\r\n};\r\n\r\nexport const NavBar: React.FC<NavBarProps> = (props) => {\r\n    const precision =\r\n        props.attemptedTrainingPairs > 0\r\n            ? props.passedTrainingPairs / props.attemptedTrainingPairs\r\n            : 0;\r\n\r\n    const earningsPosition = useMemo(() => new Animated.Value(0), []);\r\n    const precisionPosition = useMemo(() => new Animated.Value(0), []);\r\n    const progressPosition = useMemo(() => new Animated.Value(0), []);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(earningsPosition);\r\n    }, [props.player.cash]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(precisionPosition);\r\n    }, [precision]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(progressPosition);\r\n    }, [props.progress]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                height: 48,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    backgroundColor: 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '25%'\r\n                }}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'center',\r\n                        transform: [{ translateX: earningsPosition }]\r\n                    }}\r\n                >\r\n                    <EarningsIndicator earnings={props.player.cash} />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.precisionIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        alignItems: 'center',\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: precisionPosition }]\r\n                    }}\r\n                >\r\n                    <PrecisionIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        precision={precision}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.progressIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        alignItems: 'center',\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: progressPosition }]\r\n                    }}\r\n                >\r\n                    <ProgressIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        progress={props.progress}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.configMenuButton}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    alignItems: 'center',\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '15%'\r\n                })}\r\n            >\r\n                <ConfigButton\r\n                    areGoldHandsBlockingProgress={props.areGoldHandsBlockingProgress}\r\n                    isEnabled={props.onBoardingStep === -1}\r\n                    navigation={props.navigation}\r\n                    progress={props.progress}\r\n                    routeName={props.routeName}\r\n                />\r\n            </OnBoardingSection>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\n\r\ninterface ButtonProps {\r\n    backgroundColor?: string;\r\n    height: number | string;\r\n    isEnabled: boolean;\r\n    marginBottom?: number;\r\n    marginTop?: number;\r\n    onPress: () => void;\r\n    text: string;\r\n    textColor?: string;\r\n    textSize?: number;\r\n    width: number | string;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = (props) => (\r\n    <TouchableOpacity\r\n        style={{\r\n            height: props.height,\r\n            marginBottom: props.marginBottom,\r\n            marginTop: props.marginTop,\r\n            width: props.width\r\n        }}\r\n        onPress={props.isEnabled ? props.onPress : undefined}\r\n    >\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                backgroundColor: props.backgroundColor,\r\n                height: '100%',\r\n                justifyContent: 'center',\r\n                opacity: props.isEnabled ? 1 : 0.4,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: props.textColor || 'white',\r\n                    fontSize: props.textSize || 20,\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                {props.text}\r\n            </Text>\r\n        </View>\r\n    </TouchableOpacity>\r\n);\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { Button } from './button';\r\n\r\ninterface OnboardingBarProps {\r\n    exitOnboarding: () => void;\r\n    nextStepHandler: () => void;\r\n    onBoardingStep: number;\r\n    previousStepHandler: () => void;\r\n}\r\n\r\nexport const OnboardingBar: React.FC<OnboardingBarProps> = (props) => {\r\n    const currentStep = onBoardingSteps[props.onBoardingStep];\r\n\r\n    return (\r\n        <View style={{ alignItems: 'center', backgroundColor: 'white', flexDirection: 'row' }}>\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep > 0 && !currentStep.hidePreviousButton && (\r\n                    <Button\r\n                        height={56}\r\n                        isEnabled={true}\r\n                        onPress={props.previousStepHandler}\r\n                        text=\"⬅️\"\r\n                        textColor=\"black\"\r\n                        textSize={24}\r\n                        width=\"100%\"\r\n                    />\r\n                )}\r\n            </View>\r\n\r\n            <View style={{ width: '70%' }}>\r\n                <Text style={{ color: 'black', fontSize: 20, padding: 16 }}>\r\n                    {currentStep.text}\r\n                </Text>\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep < onBoardingSteps.length - 1 &&\r\n                    !currentStep.hideNextButton && (\r\n                        <Button\r\n                            height={56}\r\n                            isEnabled={true}\r\n                            onPress={props.nextStepHandler}\r\n                            text=\"➡️\"\r\n                            textColor=\"black\"\r\n                            textSize={24}\r\n                            width=\"100%\"\r\n                        />\r\n                    )}\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                <Button\r\n                    height={56}\r\n                    isEnabled={true}\r\n                    onPress={props.exitOnboarding}\r\n                    text=\"❌\"\r\n                    textColor=\"black\"\r\n                    textSize={20}\r\n                    width=\"100%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { Dictionary } from './types';\r\n\r\nexport const cartesianProduct = <T, U, R>(\r\n    firstArray: T[],\r\n    secondArray: U[],\r\n    elementBuilder: (t: T, u: U) => R\r\n): R[] => {\r\n    return firstArray.reduce<R[]>((product, x) => {\r\n        return product.concat(secondArray.map((y) => elementBuilder(x, y)));\r\n    }, []);\r\n};\r\n\r\nexport const getObjectKeys = <T extends string | number | symbol>(object: { [key in T]: any }) =>\r\n    Object.keys(object) as T[];\r\n\r\nexport const getRandomItem = <T>(items: T[]) =>\r\n    items[Math.round(Math.random() * (items.length - 1))];\r\n\r\nexport const playSound = (sound: Audio.Sound) =>\r\n    sound\r\n        .stopAsync() // In case is already playing and it hasn't finished yet\r\n        .catch(/* Failing to stop audio is not a critical issue */)\r\n        .then(() => sound.playAsync())\r\n        .catch(/* Failing to play audio is not a critical issue */);\r\n\r\nexport const removeDuplicates = (numbers: number[]): number[] => {\r\n    const numbersDictionary = numbers.reduce<Dictionary<number>>(\r\n        (dictionary, next) => ({ ...dictionary, [next]: next }),\r\n        {}\r\n    );\r\n    return Object.keys(numbersDictionary).map((x) => numbersDictionary[x]);\r\n};\r\n\r\nexport const shuffleArray = <T>(array: T[]) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n};\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CardValues,\r\n    SimpleCardSymbol,\r\n    SpecialCardSymbol,\r\n    TenPointsCardSymbol\r\n} from '../types';\r\nimport { cartesianProduct, getObjectKeys, getRandomItem, removeDuplicates } from '../utils';\r\n\r\nconst cardsValue: CardValues = {\r\n    [SimpleCardSymbol.Ace]: [1, 11],\r\n    [SimpleCardSymbol.Two]: [2],\r\n    [SimpleCardSymbol.Three]: [3],\r\n    [SimpleCardSymbol.Four]: [4],\r\n    [SimpleCardSymbol.Five]: [5],\r\n    [SimpleCardSymbol.Six]: [6],\r\n    [SimpleCardSymbol.Seven]: [7],\r\n    [SimpleCardSymbol.Eight]: [8],\r\n    [SimpleCardSymbol.Nine]: [9],\r\n    [SimpleCardSymbol.Ten]: [10],\r\n    [SpecialCardSymbol.Jack]: [10],\r\n    [SpecialCardSymbol.Queen]: [10],\r\n    [SpecialCardSymbol.King]: [10]\r\n};\r\n\r\nconst suits = [CardSuit.clubs, CardSuit.diamonds, CardSuit.hearts, CardSuit.spades];\r\n\r\nconst symbols = getObjectKeys(cardsValue);\r\n\r\nconst deck = cartesianProduct(\r\n    suits,\r\n    symbols,\r\n    (suit, symbol): Card => ({ isBlueCard: false, isGoldCard: false, suit, symbol })\r\n);\r\n\r\nexport const getCardEffectiveValue = (card: Card): number => {\r\n    const values = getCardValues(card);\r\n    return values[values.length - 1];\r\n};\r\n\r\nexport const getCardsValues = (cards: Card[], options?: { peeking?: boolean }) => {\r\n    const cardsValues = cards\r\n        .filter((card) => options?.peeking || !card.isHoleCard)\r\n        .map((card) => getCardValues(card));\r\n    const cardsAggregatedValues = cardsValues.reduce(\r\n        (reducedValues, currentValues) =>\r\n            cartesianProduct(reducedValues, currentValues, (x, y) => x + y),\r\n        [0]\r\n    );\r\n    return removeDuplicates(cardsAggregatedValues);\r\n};\r\n\r\nconst getCardValues = (card: Card): number[] => cardsValue[card.symbol];\r\n\r\nexport const getRandomCard = (options?: { isHoleCard?: boolean }) => {\r\n    let randomCard = getRandomItem(deck);\r\n    if (options?.isHoleCard) {\r\n        randomCard = { ...randomCard, isHoleCard: true };\r\n    }\r\n    return randomCard;\r\n};\r\n\r\nexport const getRandomSuit = () => getRandomItem(suits);\r\n\r\nexport const revealHoleCard = (card: Card) => {\r\n    card.isHoleCard = false;\r\n};\r\n\r\nexport const simpleSymbolToSymbol = (simpleSymbol: SimpleCardSymbol): CardSymbol =>\r\n    simpleSymbol === SimpleCardSymbol.Ten ? getRandomItem(tenPointsSymbols) : simpleSymbol;\r\n\r\nexport const symbolToSimpleSymbol = (symbol: CardSymbol): SimpleCardSymbol =>\r\n    tenPointsSymbols.indexOf(symbol as SpecialCardSymbol) > -1\r\n        ? SimpleCardSymbol.Ten\r\n        : (symbol as SimpleCardSymbol);\r\n\r\nconst tenPointsSymbols: TenPointsCardSymbol[] = [\r\n    SimpleCardSymbol.Ten,\r\n    SpecialCardSymbol.Jack,\r\n    SpecialCardSymbol.Queen,\r\n    SpecialCardSymbol.King\r\n];\r\n\r\nexport const valueToSymbol = (number: number): CardSymbol =>\r\n    number === 10\r\n        ? getRandomItem(tenPointsSymbols)\r\n        : number === 1\r\n        ? SimpleCardSymbol.Ace\r\n        : (String(number) as CardSymbol);\r\n","import { CardSymbol, HandCode, SimpleCardSymbol } from '../types';\r\nimport { valueToSymbol, simpleSymbolToSymbol } from './card';\r\n\r\nexport const getHardHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const value = parseInt(handCode, 10);\r\n\r\n    const minValue = Math.max(2, value - 10);\r\n    const maxValue = Math.min(value - minValue, 10);\r\n\r\n    let firstValue = Math.floor(Math.random() * (maxValue - minValue) + minValue);\r\n    let secondValue = value - firstValue;\r\n\r\n    // If numbers are equal, we would be training a splittable hand. Change them when possible\r\n    // E.g. Transform a 7,7 (for 14) into a 6,8. Do not transform a 10,10 for 20\r\n    if (firstValue === secondValue && firstValue > minValue && firstValue < maxValue) {\r\n        firstValue++;\r\n        secondValue--;\r\n    }\r\n\r\n    return [valueToSymbol(firstValue), valueToSymbol(secondValue)];\r\n};\r\n\r\nexport const getSoftHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const handValues = handCode.split('/').map((s) => parseInt(s, 10));\r\n    const complementarySymbol = valueToSymbol(handValues[0] - 1);\r\n\r\n    // Make Ace the second card sometimes by randomly reversing the symbols\r\n    return Math.floor(Math.random() * 100) % 2\r\n        ? [complementarySymbol, SimpleCardSymbol.Ace]\r\n        : [SimpleCardSymbol.Ace, complementarySymbol];\r\n};\r\n\r\nexport const getSplitHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const splitSymbols = handCode.split(',') as SimpleCardSymbol[];\r\n    return splitSymbols.map(simpleSymbolToSymbol);\r\n};\r\n\r\nexport const isSoftHandCode = (handCode: HandCode) => handCode.includes('/');\r\n\r\nexport const isSplitHandCode = (handCode: HandCode) => handCode.includes(',');\r\n","import {\r\n    Card,\r\n    CardSymbol,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    Hand,\r\n    HandCode,\r\n    HandOutcome,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomItem } from '../utils';\r\nimport {\r\n    getCardEffectiveValue,\r\n    getCardsValues,\r\n    getRandomCard,\r\n    getRandomSuit,\r\n    revealHoleCard,\r\n    symbolToSimpleSymbol,\r\n    valueToSymbol\r\n} from './card';\r\nimport {\r\n    getHardHandSymbols,\r\n    getSoftHandSymbols,\r\n    getSplitHandSymbols,\r\n    isSoftHandCode,\r\n    isSplitHandCode\r\n} from './hand-code';\r\n\r\nexport const areHandsSplitAces = (hands: Hand[]) =>\r\n    hands.length > 1 &&\r\n    hands[0].cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hands[1].cards[0].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const canBeDealerBlackjack = (hand: Hand) => {\r\n    const visibleCard = hand.cards[0];\r\n    const cardSymbol = symbolToSimpleSymbol(visibleCard.symbol);\r\n    return cardSymbol === SimpleCardSymbol.Ace || cardSymbol === SimpleCardSymbol.Ten;\r\n};\r\n\r\nexport const canDouble = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(hand);\r\n    const isHandWithTwoCards = hand.cards.length === 2;\r\n    const isSingleHand = hands.length === 1;\r\n\r\n    const contains9To11 = hand.values.some((handValue) => [9, 10, 11].indexOf(handValue) > -1);\r\n    const is10To11 = handEffectiveValue === 10 || handEffectiveValue === 11;\r\n    const is9To11 = handEffectiveValue === 9 || is10To11;\r\n\r\n    return (\r\n        isHandWithTwoCards &&\r\n        (casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft && contains9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven && is9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven && is10To11)) &&\r\n        (isSingleHand || casinoRules[CasinoRulesKeys.doubleAfterSplit]) &&\r\n        (!areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces])\r\n    );\r\n};\r\n\r\nexport const canHit = (hands: Hand[], casinoRules: CasinoRules) =>\r\n    !areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces];\r\n\r\nexport const canSplit = (hand: Hand) =>\r\n    hand.cards.length === 2 &&\r\n    getCardEffectiveValue(hand.cards[0]) === getCardEffectiveValue(hand.cards[1]);\r\n\r\nexport const canSurrender = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    handsNumber === 1 && hand.cards.length === 2 && casinoRules[CasinoRulesKeys.surrender];\r\n\r\nexport const createDealerHand = (casinoRules: CasinoRules, dealerSymbol?: CardSymbol) => {\r\n    const dealerCards: Card[] = [\r\n        dealerSymbol\r\n            ? {\r\n                  isBlueCard: false,\r\n                  isGoldCard: true,\r\n                  suit: getRandomSuit(),\r\n                  symbol: dealerSymbol\r\n              }\r\n            : getRandomCard()\r\n    ];\r\n\r\n    if (casinoRules[CasinoRulesKeys.holeCard]) {\r\n        dealerCards.push(getRandomCard({ isHoleCard: true }));\r\n    }\r\n\r\n    return createHand(dealerCards);\r\n};\r\n\r\nexport const createHand = (cards: Card[], bet = 1): Hand => ({\r\n    bet,\r\n    cards: cards,\r\n    values: getCardsValues(cards)\r\n});\r\n\r\nexport const dealCard = (hand: Hand, card: Card) => {\r\n    hand.cards.push(card);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n\r\n// Called after player hitting, splitting or starting a split hand. It returns a card that\r\n// turns the current player hand into another untrained hand (against the current dealer card).\r\n// If there are no untrained hands (against the current dealer card) or no untrained hands can\r\n// be reached from the current player hand (e.g. a Hard 20), returns a random card\r\nexport const getCardForUntrainedHand = (\r\n    playerHand: Hand,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n): Card => {\r\n    const isPlayerHandSoft = playerHand.values.length > 1;\r\n    const playerHandValues = getCardsValues(playerHand.cards);\r\n\r\n    const valuesToUntrainedHands = Object.values(trainingHands)\r\n        .map((trainingHand) => {\r\n            const isHandUntrainedForDealerSymbol =\r\n                trainingProgress[trainingHand.code][dealerSymbol] === TrainingPairStatus.untrained;\r\n\r\n            let valueToReachThisHand: number;\r\n\r\n            if (isSplitHandCode(trainingHand.code)) {\r\n                // Untrained split hands can never be reached after user action\r\n                valueToReachThisHand = -1;\r\n            } else if (isSoftHandCode(trainingHand.code)) {\r\n                const currentHandMinValue = parseInt(trainingHand.code.split('/')[0], 10);\r\n                const softDifference = currentHandMinValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 3/13. Can reach 4/14+ but not 3/13- (equal or lower)\r\n                    valueToReachThisHand = softDifference > 0 ? softDifference : -1;\r\n                } else {\r\n                    // E.g. Player hand = 8. Can only 9/19 (soft hand)\r\n                    valueToReachThisHand = softDifference === 1 ? softDifference : -1;\r\n                }\r\n            } else {\r\n                const currentHandHardValue = parseInt(trainingHand.code, 10);\r\n                const hardDifference = currentHandHardValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 5/15. Can reach 12-15 but not 11- (soft hand) neither\r\n                    // 16+ (soft hand)\r\n                    const makesSoftHand = playerHandValues[1] + hardDifference <= 21;\r\n                    valueToReachThisHand =\r\n                        !makesSoftHand && hardDifference > 1 && hardDifference <= 10\r\n                            ? hardDifference\r\n                            : -1;\r\n                } else {\r\n                    // E.g. Player hand = 7. Can reach 9-17 but not 7- (equal or lower),\r\n                    // 8 (soft hand), 14 (split hand) neither 18+ (out of scope)\r\n                    valueToReachThisHand =\r\n                        hardDifference > 1 && // Lower & Soft hand\r\n                        hardDifference <= 10 && // Out of scope\r\n                        hardDifference !== playerHandValues[0] // Split hand\r\n                            ? hardDifference\r\n                            : -1;\r\n                }\r\n            }\r\n\r\n            return isHandUntrainedForDealerSymbol && valueToReachThisHand > -1\r\n                ? valueToReachThisHand\r\n                : -1;\r\n        })\r\n        .filter((value) => value > -1);\r\n\r\n    const nextCard: Card =\r\n        valuesToUntrainedHands.length > 0\r\n            ? {\r\n                  isBlueCard: true,\r\n                  isGoldCard: false,\r\n                  suit: getRandomSuit(),\r\n                  symbol: valueToSymbol(getRandomItem(valuesToUntrainedHands))\r\n              }\r\n            : getRandomCard();\r\n\r\n    return nextCard;\r\n};\r\n\r\nexport const getHandEffectiveValue = (hand: Hand) => {\r\n    let effectiveValue = hand.values[0];\r\n    if (hand.values.some((v) => v < 22)) {\r\n        effectiveValue = [...hand.values].reverse().find((v) => v < 22)!;\r\n    }\r\n    return effectiveValue;\r\n};\r\n\r\nexport const getHandValidValues = (hand: Hand): number[] => {\r\n    return hand.values.some((v) => v < 22) ? hand.values.filter((v) => v < 22) : [hand.values[0]];\r\n};\r\n\r\nexport const handCodeToHand = (handCode: HandCode): Hand => {\r\n    const handSymbols = isSplitHandCode(handCode)\r\n        ? getSplitHandSymbols(handCode)\r\n        : isSoftHandCode(handCode)\r\n        ? getSoftHandSymbols(handCode)\r\n        : getHardHandSymbols(handCode);\r\n\r\n    return createHand(\r\n        handSymbols.map(\r\n            (symbol): Card => ({\r\n                isBlueCard: false,\r\n                isGoldCard: true,\r\n                suit: getRandomSuit(),\r\n                symbol\r\n            })\r\n        )\r\n    );\r\n};\r\n\r\nexport const handToHandCode = (hand: Hand): HandCode => {\r\n    const handSymbols = hand.cards.map((c) => symbolToSimpleSymbol(c.symbol));\r\n    const isSplitHand = handSymbols.length === 2 && handSymbols[0] === handSymbols[1];\r\n\r\n    return isSplitHand\r\n        ? (handSymbols.join(',') as HandCode)\r\n        : (getHandValidValues(hand).join('/') as HandCode);\r\n};\r\n\r\nexport const hasHoleCard = (hand: Hand) => hand.cards.length > 1 && hand.cards[1].isHoleCard;\r\n\r\nexport const isBlackjack = (hand: Hand, handsNumber: number) => {\r\n    return (\r\n        handsNumber === 1 &&\r\n        hand.cards.length === 2 &&\r\n        hand.values.length === 2 &&\r\n        hand.values[0] === 11 &&\r\n        hand.values[1] === 21\r\n    );\r\n};\r\n\r\nconst isBust = (hand: Hand) => {\r\n    return getHandEffectiveValue(hand) > 21;\r\n};\r\n\r\nexport const isDealerBlackjack = (hand: Hand) => {\r\n    const cardValues = getCardsValues(hand.cards, { peeking: true });\r\n    return (\r\n        hand.cards.length === 2 &&\r\n        cardValues.length === 2 &&\r\n        cardValues[0] === 11 &&\r\n        cardValues[1] === 21\r\n    );\r\n};\r\n\r\nexport const isFinished = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) =>\r\n    getHandEffectiveValue(hand) >= 21 ||\r\n    (!casinoRules[CasinoRulesKeys.hitSplitAces] &&\r\n        areHandsSplitAces(hands) &&\r\n        hand.cards[1].symbol !== SimpleCardSymbol.Ace);\r\n\r\nexport const resolveHand = (\r\n    playerHand: Hand,\r\n    handsNumber: number,\r\n    dealerHand: Hand\r\n): HandOutcome => {\r\n    const playerHandValue = getHandEffectiveValue(playerHand);\r\n    const dealerHandValue = getHandEffectiveValue(dealerHand!);\r\n    const handOutcome = isBust(playerHand)\r\n        ? HandOutcome.bust\r\n        : isBlackjack(playerHand, handsNumber) && isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.push\r\n        : isBlackjack(playerHand, handsNumber)\r\n        ? HandOutcome.blackjack\r\n        : isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.dealerWins\r\n        : isBust(dealerHand!)\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue > dealerHandValue\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue === dealerHandValue\r\n        ? HandOutcome.push\r\n        : HandOutcome.dealerWins;\r\n\r\n    playerHand.outcome = handOutcome;\r\n    return handOutcome;\r\n};\r\n\r\nexport const revealDealerHoleCard = (hand: Hand) => {\r\n    revealHoleCard(hand.cards[1]);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n","import {\r\n    Card,\r\n    Hand,\r\n    HandOutcome,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { createHand, dealCard, getCardForUntrainedHand, handToHandCode, resolveHand } from './hand';\r\n\r\nexport const createPlayer = (cash = 0): Player => ({\r\n    cash,\r\n    handIndex: 0,\r\n    hands: [],\r\n    lastActionHand: undefined\r\n});\r\n\r\nexport const hitCurrentHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(currentHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(currentHand, nextCard);\r\n};\r\n\r\nexport const doubleCurrentHand = (player: Player, card: Card) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    dealCard(currentHand, card);\r\n    player.cash -= currentHand.bet;\r\n    currentHand.bet *= 2;\r\n};\r\n\r\nexport const getCurrentHand = (player: Player): Hand => player.hands[player.handIndex];\r\n\r\nexport const initializeHands = (player: Player, initialHand: Hand) => {\r\n    player.cash -= initialHand.bet;\r\n    player.hands = [initialHand];\r\n    player.handIndex = 0;\r\n    player.lastActionHand = undefined;\r\n};\r\n\r\nexport const isLastHand = (player: Player) => player.hands.length - 1 <= player.handIndex;\r\n\r\nexport const resolveHands = (player: Player, dealerHand: Hand) => {\r\n    const earnings = player.hands.reduce((earnings, hand) => {\r\n        const handOutcome = resolveHand(hand, player.hands.length, dealerHand);\r\n        return (\r\n            earnings +\r\n            (handOutcome === HandOutcome.blackjack\r\n                ? hand.bet * 2.5\r\n                : handOutcome === HandOutcome.playerWins\r\n                ? hand.bet * 2\r\n                : handOutcome === HandOutcome.push\r\n                ? hand.bet\r\n                : 0)\r\n        );\r\n    }, 0);\r\n    player.cash += earnings;\r\n};\r\n\r\nexport const splitCurrentHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const firstHand = createHand([currentHand.cards[0]]);\r\n    const secondHand = createHand([currentHand.cards[1]]);\r\n    player.cash -= secondHand.bet;\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(firstHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(firstHand, nextCard);\r\n    player.hands.splice(player.handIndex, 1, firstHand, secondHand);\r\n};\r\n\r\nexport const startNextHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    player.handIndex++;\r\n    const nextHand = player.hands[player.handIndex];\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(nextHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(nextHand, nextCard);\r\n};\r\n\r\nexport const standCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n};\r\n\r\nexport const surrenderCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    player.cash += currentHand.bet / 2;\r\n    player.hands.splice(player.handIndex, 1);\r\n};\r\n","import { SimpleCardSymbol, TrainingHandStatus, TrainingPairStatus } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nexport const allDealerSymbols: SimpleCardSymbol[] = [\r\n    SimpleCardSymbol.Ace,\r\n    SimpleCardSymbol.Two,\r\n    SimpleCardSymbol.Three,\r\n    SimpleCardSymbol.Four,\r\n    SimpleCardSymbol.Five,\r\n    SimpleCardSymbol.Six,\r\n    SimpleCardSymbol.Seven,\r\n    SimpleCardSymbol.Eight,\r\n    SimpleCardSymbol.Nine,\r\n    SimpleCardSymbol.Ten\r\n];\r\n\r\nexport const getUntrainedDealerSymbols = (trainingHandStatus: TrainingHandStatus) =>\r\n    getObjectKeys(trainingHandStatus).filter(\r\n        (dealerSymbol) => trainingHandStatus[dealerSymbol] !== TrainingPairStatus.passed\r\n    );\r\n","import { CasinoRules, CasinoRulesKeys, Doubling } from '../types';\r\n\r\nexport const getDefaultCasinoRules = (): CasinoRules => ({\r\n    [CasinoRulesKeys.blackjackPeek]: false,\r\n    [CasinoRulesKeys.doubleAfterSplit]: true,\r\n    [CasinoRulesKeys.doubling]: Doubling.nineToElevenSoft,\r\n    [CasinoRulesKeys.hitSplitAces]: false,\r\n    [CasinoRulesKeys.holeCard]: false,\r\n    [CasinoRulesKeys.surrender]: false\r\n});\r\n","import {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    HandDecisionSet,\r\n    HandDecisionSetGetters,\r\n    SimpleCardSymbol\r\n} from '../types';\r\n\r\nconst alwaysHit: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n};\r\n\r\nconst alwaysStand: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n};\r\n\r\nexport const getHandDecisionSetLevel = (decisionSet: HandDecisionSet) =>\r\n    Object.values(decisionSet).reduce<{\r\n        previousValue: string;\r\n        level: number;\r\n    }>(\r\n        (reduced, next) => {\r\n            return reduced.previousValue === next\r\n                ? reduced\r\n                : { previousValue: next, level: reduced.level + 1 };\r\n        },\r\n        {\r\n            previousValue: '',\r\n            level: 0\r\n        }\r\n    ).level;\r\n\r\nexport const handDecisionSetGetters: HandDecisionSetGetters = {\r\n    [HandCode.Hard5]: () => alwaysHit,\r\n    [HandCode.Hard6]: () => alwaysHit,\r\n    [HandCode.Hard7]: () => alwaysHit,\r\n    [HandCode.Hard8]: () => alwaysHit,\r\n    [HandCode.Hard9]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard10]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard11]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard12]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard13]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard14]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard17]: () => alwaysStand,\r\n    [HandCode.Hard18]: () => alwaysStand,\r\n    [HandCode.Hard19]: () => alwaysStand,\r\n    [HandCode.Hard20]: () => alwaysStand,\r\n    [HandCode.Soft13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft18]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft19]: () => alwaysStand,\r\n    [HandCode.Soft20]: () => alwaysStand,\r\n    [HandCode.Split2s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split3s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split4s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split5s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split6s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: casinoRules[CasinoRulesKeys.doubleAfterSplit]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split7s]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split8s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.blackjackPeek]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.blackjackPeek]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split9s]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Split10s]: () => alwaysStand,\r\n    [HandCode.SplitAs]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.split,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.blackjackPeek]\r\n            ? BaseDecisions.split\r\n            : BaseDecisions.hit\r\n    })\r\n};\r\n","import {\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    GoldHandsLevels,\r\n    HandCode,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { getHandDecisionSetLevel, handDecisionSetGetters } from './hand-decision-set';\r\n\r\nexport const getActiveTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    goldHandsLevels: GoldHandsLevels\r\n) => Object.values(trainingHands).filter((hand) => goldHandsLevels[hand.level]);\r\n\r\nexport const getDefaultTrainingHands = () => getTrainingHands(getDefaultCasinoRules());\r\n\r\nexport const getGoldHandsNumber = (\r\n    trainingHands: TrainingHands,\r\n    goldHandsLevels: GoldHandsLevels\r\n) => allDealerSymbols.length * getActiveTrainingHands(trainingHands, goldHandsLevels).length;\r\n\r\nexport const getTrainingHands = (casinoRules: CasinoRules) => {\r\n    const trainingHands: TrainingHands = {\r\n        /*** Hard hands ***/\r\n\r\n        /* Hard 4 => Only possible with 2,2. Covered in Split hands */\r\n        [HandCode.Hard5]: {\r\n            code: HandCode.Hard5,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard5](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 5'\r\n        },\r\n        [HandCode.Hard6]: {\r\n            code: HandCode.Hard6,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard6](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 6'\r\n        },\r\n        [HandCode.Hard7]: {\r\n            code: HandCode.Hard7,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard7](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 7'\r\n        },\r\n        [HandCode.Hard8]: {\r\n            code: HandCode.Hard8,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard8](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 8'\r\n        },\r\n        [HandCode.Hard9]: {\r\n            code: HandCode.Hard9,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard9](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Hard 9'\r\n        },\r\n        [HandCode.Hard10]: {\r\n            code: HandCode.Hard10,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard10](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Hard 10'\r\n        },\r\n        [HandCode.Hard11]: {\r\n            code: HandCode.Hard11,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard11](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 11'\r\n        },\r\n        [HandCode.Hard12]: {\r\n            code: HandCode.Hard12,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard12](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 12'\r\n        },\r\n        [HandCode.Hard13]: {\r\n            code: HandCode.Hard13,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard13](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 13'\r\n        },\r\n        [HandCode.Hard14]: {\r\n            code: HandCode.Hard14,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard14](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 14'\r\n        },\r\n        [HandCode.Hard15]: {\r\n            code: HandCode.Hard15,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard15](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender],\r\n            level: -1,\r\n            name: 'Hard 15'\r\n        },\r\n        [HandCode.Hard16]: {\r\n            code: HandCode.Hard16,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard16](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender],\r\n            level: -1,\r\n            name: 'Hard 16'\r\n        },\r\n        [HandCode.Hard17]: {\r\n            code: HandCode.Hard17,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard17](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 17'\r\n        },\r\n        [HandCode.Hard18]: {\r\n            code: HandCode.Hard18,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard18](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 18'\r\n        },\r\n        [HandCode.Hard19]: {\r\n            code: HandCode.Hard19,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard19](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 19'\r\n        },\r\n        [HandCode.Hard20]: {\r\n            code: HandCode.Hard20,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard20](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 20'\r\n        },\r\n        /* Hard 21 => Maximum score! This hand doesn't need training */\r\n\r\n        /*** Soft hands ***/\r\n\r\n        [HandCode.Soft13]: {\r\n            code: HandCode.Soft13,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft13](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 13'\r\n        },\r\n        [HandCode.Soft14]: {\r\n            code: HandCode.Soft14,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft14](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 14'\r\n        },\r\n        [HandCode.Soft15]: {\r\n            code: HandCode.Soft15,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft15](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 15'\r\n        },\r\n        [HandCode.Soft16]: {\r\n            code: HandCode.Soft16,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft16](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 16'\r\n        },\r\n        [HandCode.Soft17]: {\r\n            code: HandCode.Soft17,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft17](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 17'\r\n        },\r\n        [HandCode.Soft18]: {\r\n            code: HandCode.Soft18,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft18](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 18'\r\n        },\r\n        [HandCode.Soft19]: {\r\n            code: HandCode.Soft19,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft19](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Soft 19'\r\n        },\r\n        [HandCode.Soft20]: {\r\n            code: HandCode.Soft20,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft20](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Soft 20'\r\n        },\r\n        /* Soft 21 => Blackjack! This hand doesn't need training */\r\n\r\n        /*** Split hands ***/\r\n        [HandCode.Split2s]: {\r\n            code: HandCode.Split2s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split2s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubleAfterSplit],\r\n            level: -1,\r\n            name: '2,2'\r\n        },\r\n        [HandCode.Split3s]: {\r\n            code: HandCode.Split3s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split3s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubleAfterSplit],\r\n            level: -1,\r\n            name: '3,3'\r\n        },\r\n        [HandCode.Split4s]: {\r\n            code: HandCode.Split4s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split4s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubleAfterSplit],\r\n            level: -1,\r\n            name: '4,4'\r\n        },\r\n        [HandCode.Split5s]: {\r\n            code: HandCode.Split5s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split5s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: '5,5'\r\n        },\r\n        [HandCode.Split6s]: {\r\n            code: HandCode.Split6s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split6s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubleAfterSplit],\r\n            level: -1,\r\n            name: '6,6'\r\n        },\r\n        [HandCode.Split7s]: {\r\n            code: HandCode.Split7s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split7s](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: '7,7'\r\n        },\r\n        [HandCode.Split8s]: {\r\n            code: HandCode.Split8s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split8s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: '8,8'\r\n        },\r\n        [HandCode.Split9s]: {\r\n            code: HandCode.Split9s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split9s](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: '9,9'\r\n        },\r\n        [HandCode.Split10s]: {\r\n            code: HandCode.Split10s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split10s](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: '10,10'\r\n        },\r\n        [HandCode.SplitAs]: {\r\n            code: HandCode.SplitAs,\r\n            decisionSet: handDecisionSetGetters[HandCode.SplitAs](casinoRules),\r\n            dependencies: [CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'A,A'\r\n        }\r\n    };\r\n\r\n    Object.values(trainingHands).forEach((trainingHand) => {\r\n        trainingHand.level = getHandDecisionSetLevel(trainingHand.decisionSet);\r\n    });\r\n\r\n    return trainingHands;\r\n};\r\n\r\nexport const getUntrainedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    goldHandsLevels: GoldHandsLevels\r\n) =>\r\n    getActiveTrainingHands(trainingHands, goldHandsLevels).filter(\r\n        (trainingHand) => getUntrainedDealerSymbols(trainingProgress[trainingHand.code]).length > 0\r\n    );\r\n","import {\r\n    CasinoRules,\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPair,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys, getRandomItem } from '../utils';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { createDealerHand, handCodeToHand } from './hand';\r\nimport { getActiveTrainingHands, getUntrainedTrainingHands } from './training-hand';\r\n\r\nexport const allTrainingPairsNumber = allDealerSymbols.length * Object.keys(HandCode).length;\r\n\r\nexport const getRandomTrainingPair = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    gameConfig: GameConfig\r\n): TrainingPair => {\r\n    const untrainedTrainingHands = getUntrainedTrainingHands(\r\n        trainingHands,\r\n        trainingProgress,\r\n        gameConfig.goldHandsLevels\r\n    );\r\n\r\n    const randomTrainingHand =\r\n        untrainedTrainingHands.length > 0\r\n            ? getRandomItem(untrainedTrainingHands)\r\n            : getRandomItem(getActiveTrainingHands(trainingHands, gameConfig.goldHandsLevels)); // In case all hands have been passed\r\n\r\n    const trainingHandStatus = trainingProgress[randomTrainingHand.code];\r\n    const untrainedDealerSymbols = getUntrainedDealerSymbols(trainingHandStatus);\r\n\r\n    const randomDealerSymbol =\r\n        untrainedDealerSymbols.length > 0\r\n            ? getRandomItem(untrainedDealerSymbols)\r\n            : getRandomItem(getObjectKeys(trainingHandStatus)); // In case all hands have been passed\r\n\r\n    return {\r\n        dealer: createDealerHand(gameConfig.casinoRules, randomDealerSymbol),\r\n        player: handCodeToHand(randomTrainingHand.code)\r\n    };\r\n};\r\n\r\nexport const getSpecificTrainingPair = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    casinoRules: CasinoRules\r\n): TrainingPair => {\r\n    return {\r\n        dealer: createDealerHand(casinoRules, dealerSymbol),\r\n        player: handCodeToHand(handCode)\r\n    };\r\n};\r\n","import {\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingHandStatus,\r\n    TrainingPairStatus,\r\n    TrainingProgress,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\nimport { allDealerSymbols } from './dealer-symbols';\r\nimport { getUntrainedTrainingHands } from './training-hand';\r\nimport { allTrainingPairsNumber } from './training-pair';\r\n\r\nexport const getAreGoldHandsBlockingProgress = (\r\n    gameConfig: GameConfig,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    progress: number\r\n) =>\r\n    gameConfig.useGoldHands\r\n        ? progress < 100 &&\r\n          getUntrainedTrainingHands(trainingHands, trainingProgress, gameConfig.goldHandsLevels)\r\n              .length === 0\r\n        : false;\r\n\r\nexport const getDefaultTrainingStatus = (): TrainingStatus => ({\r\n    attemptedTrainingPairs: 0,\r\n    failedTrainingPairs: [],\r\n    isCompleted: false,\r\n    passedTrainingPairs: 0,\r\n    trainingProgress: Object.values(HandCode).reduce<TrainingProgress>(\r\n        (reducedTrainingProgress, handCode) => ({\r\n            ...reducedTrainingProgress,\r\n            [handCode]: allDealerSymbols.reduce<TrainingHandStatus>(\r\n                (reducedDealerSymbols, dealerSymbol) => ({\r\n                    ...reducedDealerSymbols,\r\n                    [dealerSymbol]: TrainingPairStatus.untrained\r\n                }),\r\n                {} as TrainingHandStatus\r\n            )\r\n        }),\r\n        {} as TrainingProgress\r\n    )\r\n});\r\n\r\nexport const isTrainingCompleted = (passedTrainingPairs: number) =>\r\n    passedTrainingPairs === allTrainingPairsNumber;\r\n\r\nconst reduceTrainingHandProgress = (\r\n    handCode: HandCode,\r\n    trainingHandStatus: TrainingHandStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus =>\r\n    getObjectKeys(trainingHandStatus).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, dealerSymbol) =>\r\n            reduceTrainingPairProgress(\r\n                handCode,\r\n                dealerSymbol,\r\n                trainingHandStatus[dealerSymbol],\r\n                reducedTrainingStatus\r\n            ),\r\n        reducedTrainingStatus\r\n    );\r\n\r\nconst reduceTrainingPairProgress = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingPairStatus: TrainingPairStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus => {\r\n    return {\r\n        attemptedTrainingPairs:\r\n            reducedTrainingStatus.attemptedTrainingPairs +\r\n            (trainingPairStatus !== TrainingPairStatus.untrained ? 1 : 0),\r\n        isCompleted: reducedTrainingStatus.isCompleted,\r\n        failedTrainingPairs:\r\n            trainingPairStatus === TrainingPairStatus.failed\r\n                ? reducedTrainingStatus.failedTrainingPairs.concat([\r\n                      {\r\n                          dealerSymbol,\r\n                          handCode\r\n                      }\r\n                  ])\r\n                : reducedTrainingStatus.failedTrainingPairs,\r\n        passedTrainingPairs:\r\n            reducedTrainingStatus.passedTrainingPairs +\r\n            (trainingPairStatus === TrainingPairStatus.passed ? 1 : 0),\r\n        trainingProgress: reducedTrainingStatus.trainingProgress\r\n    };\r\n};\r\n\r\nexport const retrieveTrainingStatus = (trainingProgress: TrainingProgress): TrainingStatus => {\r\n    const trainingStatus = getObjectKeys(trainingProgress).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, handCode) =>\r\n            reduceTrainingHandProgress(handCode, trainingProgress[handCode], reducedTrainingStatus),\r\n        {\r\n            attemptedTrainingPairs: 0,\r\n            failedTrainingPairs: [],\r\n            isCompleted: false,\r\n            passedTrainingPairs: 0,\r\n            trainingProgress: trainingProgress\r\n        } as TrainingStatus\r\n    );\r\n\r\n    trainingStatus.isCompleted = isTrainingCompleted(trainingStatus.passedTrainingPairs);\r\n\r\n    return trainingStatus;\r\n};\r\n","import { updatePlayerEarnings } from '../async-storage';\r\nimport {\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingPairRepresentation,\r\n    TrainingPairStatus,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { getHandEffectiveValue, dealCard, revealDealerHoleCard, hasHoleCard } from './hand';\r\nimport { resolveHands } from './player';\r\nimport { isTrainingCompleted } from './training-status';\r\n\r\nexport const handleDealerTurn = (\r\n    dealerHand: Hand,\r\n    gameConfig: GameConfig,\r\n    player: Player,\r\n    setDealerHand: (dealerHand: Hand) => void,\r\n    setPhase: (phase: Phases) => void,\r\n    setPlayer: (player: Player) => void\r\n) => {\r\n    let nextDealerHand = { ...dealerHand };\r\n\r\n    if (gameConfig.isDealerAnimationEnabled && getHandEffectiveValue(nextDealerHand) < 17) {\r\n        setTimeout(() => {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            } else {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n            // Setting the dealerHand will trigger this handler again, through useEffect\r\n        }, 1000);\r\n    } else {\r\n        if (!gameConfig.isDealerAnimationEnabled) {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            }\r\n\r\n            while (getHandEffectiveValue(nextDealerHand) < 17) {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n        }\r\n\r\n        resolveHands(player, nextDealerHand);\r\n        setPlayer({ ...player });\r\n        updatePlayerEarnings(player.cash);\r\n        setPhase(Phases.finished);\r\n    }\r\n};\r\n\r\nconst getNextFailedTrainingPairs = (\r\n    currentFailedTrainingPairs: TrainingPairRepresentation[],\r\n    isHit: boolean,\r\n    handCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingPairRepresentation[] => {\r\n    return isHit\r\n        ? currentFailedTrainingPairs.filter(\r\n              (failedTrainingPair) =>\r\n                  failedTrainingPair.dealerSymbol !== currentDealerSymbol ||\r\n                  failedTrainingPair.handCode !== handCode\r\n          )\r\n        : currentFailedTrainingPairs.some(\r\n              (failedTrainingPair) =>\r\n                  failedTrainingPair.dealerSymbol === currentDealerSymbol &&\r\n                  failedTrainingPair.handCode === handCode\r\n          )\r\n        ? currentFailedTrainingPairs\r\n        : [{ dealerSymbol: currentDealerSymbol, handCode }].concat(currentFailedTrainingPairs);\r\n};\r\n\r\nexport const getNextTrainingStatus = (\r\n    trainingStatus: TrainingStatus,\r\n    isHit: boolean,\r\n    currentHandCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingStatus => {\r\n    // The current trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol]\r\n    // value must be kept to update attemptedTrainingPairs and passedTrainingPairs\r\n    const currentHandTrainingStatus =\r\n        trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol];\r\n\r\n    trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol] = isHit\r\n        ? TrainingPairStatus.passed\r\n        : TrainingPairStatus.failed;\r\n\r\n    const nextAttemptedTrainingPairs =\r\n        trainingStatus.attemptedTrainingPairs +\r\n        (currentHandTrainingStatus === TrainingPairStatus.untrained ? 1 : 0);\r\n\r\n    const nextFailedTrainingPairs = getNextFailedTrainingPairs(\r\n        trainingStatus.failedTrainingPairs,\r\n        isHit,\r\n        currentHandCode,\r\n        currentDealerSymbol\r\n    );\r\n\r\n    const nextPassedTrainingHands =\r\n        trainingStatus.passedTrainingPairs +\r\n        (isHit && currentHandTrainingStatus !== TrainingPairStatus.passed\r\n            ? 1\r\n            : !isHit && currentHandTrainingStatus === TrainingPairStatus.passed\r\n            ? -1\r\n            : 0);\r\n\r\n    return {\r\n        attemptedTrainingPairs: nextAttemptedTrainingPairs,\r\n        failedTrainingPairs: nextFailedTrainingPairs,\r\n        isCompleted: isTrainingCompleted(nextPassedTrainingHands),\r\n        passedTrainingPairs: nextPassedTrainingHands,\r\n        trainingProgress: trainingStatus.trainingProgress\r\n    };\r\n};\r\n","import {\r\n    BaseDecisions,\r\n    DecisionEvaluation,\r\n    DynamicConditions,\r\n    DynamicDecision,\r\n    DynamicDecisions,\r\n    Hand,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    TrainingHands\r\n} from '../types';\r\nimport { symbolToSimpleSymbol } from './card';\r\nimport { handToHandCode } from './hand';\r\n\r\nexport const evaluateDecision = (\r\n    playerHand: Hand,\r\n    dealerHand: Hand,\r\n    trainingHands: TrainingHands,\r\n    dynamicConditions: DynamicConditions,\r\n    playerDecision: PlayerDecision\r\n): DecisionEvaluation => {\r\n    const handCode = handToHandCode(playerHand);\r\n    const trainingHand = trainingHands[handCode];\r\n    const dealerSymbol = symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const dynamicDecision = trainingHand.decisionSet[dealerSymbol];\r\n    const optimalDecision = evaluateDynamicDecision(dynamicDecision, dynamicConditions);\r\n\r\n    return {\r\n        dealerSymbol,\r\n        dynamicDecision,\r\n        handName: trainingHand.name,\r\n        isHit: playerDecision === optimalDecision\r\n    };\r\n};\r\n\r\nconst evaluateDynamicDecision = (\r\n    dynamicDecision: DynamicDecision,\r\n    dynamicConditions: DynamicConditions\r\n): PlayerDecision =>\r\n    dynamicDecision === DynamicDecisions.double_hit\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.double_stand\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.surrender_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision;\r\n","import { Audio } from 'expo-av';\r\nimport { playSound } from '../utils';\r\n\r\ntype SoundQueue = { isActive: boolean; sounds: Audio.Sound[] };\r\n\r\nexport const createSoundQueue = (): SoundQueue => ({\r\n    isActive: false,\r\n    sounds: []\r\n});\r\n\r\nconst playNextSound = (soundQueue: SoundQueue) => {\r\n    const nextSound = soundQueue.sounds.pop();\r\n    if (nextSound) {\r\n        playSound(nextSound).then(() => {\r\n            setTimeout(() => playNextSound(soundQueue), 250);\r\n        });\r\n    } else {\r\n        soundQueue.isActive = false;\r\n    }\r\n};\r\n\r\nexport const pushSound = (soundQueue: SoundQueue, sound: Audio.Sound) => {\r\n    soundQueue.sounds.push(sound);\r\n    if (!soundQueue.isActive) {\r\n        soundQueue.isActive = true;\r\n        playNextSound(soundQueue);\r\n    }\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\r\nimport cardSlideSoundMp3 from '../../assets/card-slide.mp3';\r\nimport { createSoundQueue, pushSound } from '../logic/sound-queue';\r\nimport { AppNavigation, Card, RouteNames, SimpleCardSymbol } from '../types';\r\n\r\ninterface CardComponentProps {\r\n    card: Card;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nconst animationsDuration = 400;\r\nconst initialOpacity = 0;\r\nconst initialPosition = -20;\r\n\r\nconst soundQueue = createSoundQueue();\r\n\r\nexport const CardComponent: React.FC<CardComponentProps> = (props) => {\r\n    const opacity = useMemo(() => new Animated.Value(initialOpacity), []);\r\n    const position = useMemo(() => new Animated.Value(initialPosition), []);\r\n    const [cardSlideSound, setCardSlideSound] = useState<Audio.Sound | false>();\r\n\r\n    const animateCard = (sound?: Audio.Sound | false) => {\r\n        if (!props.skipAnimation) {\r\n            Animated.parallel([\r\n                Animated.timing(opacity, {\r\n                    useNativeDriver: true,\r\n                    toValue: 1,\r\n                    duration: animationsDuration * 2\r\n                }),\r\n                Animated.timing(position, {\r\n                    useNativeDriver: true,\r\n                    toValue: 0,\r\n                    duration: animationsDuration\r\n                })\r\n            ]).start();\r\n        }\r\n\r\n        if (props.isSoundEnabled && sound) {\r\n            pushSound(soundQueue, sound);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cardSlideSound === undefined) {\r\n            Audio.Sound.createAsync(cardSlideSoundMp3, { volume: 0.5 })\r\n                .then((result) => {\r\n                    animateCard(result.sound);\r\n                    setCardSlideSound(result.sound);\r\n                })\r\n                .catch(() => {\r\n                    /* Failing to load audio is not a critical issue */\r\n                    animateCard();\r\n                    setCardSlideSound(false);\r\n                });\r\n        } else {\r\n            if (!props.skipAnimation) {\r\n                opacity.setValue(initialOpacity);\r\n                position.setValue(initialPosition);\r\n            }\r\n\r\n            animateCard(cardSlideSound);\r\n        }\r\n    }, [props.card]);\r\n\r\n    const cardColor = props.card.isBlueCard\r\n        ? '#346fa1'\r\n        : props.card.isGoldCard\r\n        ? '#e5c100'\r\n        : props.card.suit === '♦' || props.card.suit === '♥'\r\n        ? 'red'\r\n        : 'black';\r\n\r\n    const backgroundColor = props.card.isHoleCard ? 'lightgrey' : 'white';\r\n\r\n    return (\r\n        <Animated.View\r\n            style={{\r\n                backgroundColor,\r\n                borderRadius: 8,\r\n                height: 66,\r\n                marginBottom: 8,\r\n                marginRight: 8,\r\n                opacity: props.skipAnimation ? undefined : opacity,\r\n                transform: props.skipAnimation ? undefined : [{ translateY: position }],\r\n                width: 56\r\n            }}\r\n        >\r\n            {!props.card.isHoleCard && (\r\n                <TouchableOpacity\r\n                    onPress={\r\n                        props.navigation\r\n                            ? () => {\r\n                                  if (props.card.isBlueCard) {\r\n                                      props.navigation!.navigate(RouteNames.blueCardsInfo);\r\n                                  } else if (props.card.isGoldCard) {\r\n                                      props.navigation!.navigate(RouteNames.goldHandsInfo);\r\n                                  }\r\n                              }\r\n                            : undefined\r\n                    }\r\n                >\r\n                    {props.card.isBlueCard || props.card.isGoldCard ? (\r\n                        <View\r\n                            style={{\r\n                                backgroundColor: cardColor,\r\n                                borderRadius: props.card.isBlueCard ? 12 : undefined,\r\n                                height: 12,\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                top: 8,\r\n                                width: 12\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        <Text\r\n                            style={{\r\n                                color: cardColor,\r\n                                fontSize: 16,\r\n                                position: 'absolute',\r\n                                right: 4,\r\n                                top: 4\r\n                            }}\r\n                        >\r\n                            {props.card.suit}\r\n                        </Text>\r\n                    )}\r\n                    <Text\r\n                        style={{\r\n                            color: cardColor,\r\n                            fontSize: 40,\r\n                            marginRight: props.card.symbol === SimpleCardSymbol.Ten ? 0 : 8,\r\n                            marginTop: 12,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.card.symbol}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            )}\r\n        </Animated.View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { getHandValidValues, isBlackjack } from '../logic/hand';\r\nimport { AppNavigation, Hand } from '../types';\r\nimport { CardComponent } from './card-component';\r\n\r\ninterface HandComponentProps {\r\n    hand: Hand;\r\n    handsNumber: number;\r\n    isCurrentHand: boolean;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    peeking?: boolean;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nexport const HandComponent: React.FC<HandComponentProps> = (props) => {\r\n    const handValues = getHandValidValues(props.hand).join('/');\r\n    const displayValues = isBlackjack(props.hand, props.handsNumber)\r\n        ? 'Blackjack'\r\n        : handValues.indexOf('21') > -1\r\n        ? '21'\r\n        : handValues;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                backgroundColor: props.isCurrentHand ? 'rgba(255, 255, 255, 0.2)' : undefined,\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'center',\r\n                maxWidth: '100%',\r\n                paddingTop: 8,\r\n                paddingHorizontal: 8\r\n            }}\r\n        >\r\n            {props.hand.cards.map((card, index) => (\r\n                <CardComponent\r\n                    card={card}\r\n                    isSoundEnabled={props.isSoundEnabled}\r\n                    key={index}\r\n                    navigation={props.navigation}\r\n                    skipAnimation={props.skipAnimation}\r\n                />\r\n            ))}\r\n            <View style={{ alignItems: 'center', justifyContent: 'center', marginBottom: 8 }}>\r\n                {props.peeking ? (\r\n                    <Text style={{ color: 'black', fontSize: 32, height: '100%' }}>👁️</Text>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Text style={{ color: 'white', fontSize: 25 }}> {displayValues}</Text>\r\n                        {props.hand.outcome && (\r\n                            <Text style={{ color: 'white', fontSize: 25, fontWeight: 'bold' }}>\r\n                                {props.hand.outcome}\r\n                            </Text>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { CardComponent } from '../components/card-component';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { CardSuit, Hand, SimpleCardSymbol } from '../types';\r\n\r\nexport const BlueCardsInfo: React.FC = () => {\r\n    const hardFourteen: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Five\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.diamonds,\r\n                symbol: SimpleCardSymbol.Nine\r\n            }\r\n        ],\r\n        values: [14]\r\n    };\r\n\r\n    const splitFour: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Four\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.spades,\r\n                symbol: SimpleCardSymbol.Four\r\n            }\r\n        ],\r\n        values: [8]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Blue cards\r\n            </Text>\r\n\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    When Blue cards are enabled, each time you Hit or Split a hand, instead of being\r\n                    a dealt a random card, you will be dealt a card that turns your current hand\r\n                    into a hand you haven't trained yet (or a hand you didn't get right) against the\r\n                    dealer's up card.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Blue cards have blue symbols and a blue circle (instead of the suit):\r\n                </Text>\r\n\r\n                <View style={{ alignItems: 'center' }}>\r\n                    <CardComponent\r\n                        card={{\r\n                            isBlueCard: true,\r\n                            isGoldCard: false,\r\n                            suit: CardSuit.spades,\r\n                            symbol: SimpleCardSymbol.Eight\r\n                        }}\r\n                        isSoundEnabled={false}\r\n                        skipAnimation={true}\r\n                    />\r\n                </View>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontWeight: 'bold', marginVertical: 16 }}\r\n                >\r\n                    Notice that enabling this option will increase your probabilities of winning,\r\n                    since you won't get busted as much as you would when being dealt random cards\r\n                    (specially on high value hands like Hard 16).\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardFourteen}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    Let's say you have a Hard 14 and the dealer's up card is a 9. If you decide to\r\n                    Hit, the app will check whether there are any hands greater than 14 which you\r\n                    haven't trained yet (or you didn't get right) against a dealer's 9. Hands\r\n                    greater than 14 are:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            }\r\n                        ],\r\n                        values: [15]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.clubs,\r\n                                symbol: SimpleCardSymbol.Two\r\n                            }\r\n                        ],\r\n                        values: [16]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Six\r\n                            }\r\n                        ],\r\n                        values: [20]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    - If you haven't trained any of those hands yet (against a dealer's 9), you will\r\n                    be dealt a blue card that turns the Hard 14 into one of those hands\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    - If you have already trained all of those hands (against a dealer's 9), you\r\n                    will then be dealt a random card\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    The same behavior will be applied when splitting a hand. Let's say the dealer\r\n                    has a 6, you have a 4,4 and you decide to Split it.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={splitFour}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    The app will then check which hands greater than 4 you haven't trained yet (or\r\n                    didn't get right) against a dealer's 6 and turn each of the 4s into one of those\r\n                    hands. Available hands greater than 4 are:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            }\r\n                        ],\r\n                        values: [5, 15]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SimpleCardSymbol.Two\r\n                            }\r\n                        ],\r\n                        values: [6]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.clubs,\r\n                                symbol: SimpleCardSymbol.Ten\r\n                            }\r\n                        ],\r\n                        values: [14]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    After you have trained each hand at least once Blue cards won't apply anymore.\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, Doubling } from '../../types';\r\n\r\ninterface DoublingPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const DoublingPicker: React.FC<DoublingPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.doubling}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.doubling]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextDoubling = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doubleAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doubleAfterSplit] &&\r\n                                nextDoubling > 0,\r\n                            [CasinoRulesKeys.doubling]: nextDoubling\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"Any pair\" value={Doubling.anyPair} />\r\n                    <Picker.Item label=\"9, 10, 11, S19, S20\" value={Doubling.nineToElevenSoft} />\r\n                    <Picker.Item label=\"9, 10, 11\" value={Doubling.nineToEleven} />\r\n                    <Picker.Item label=\"10, 11\" value={Doubling.tenToEleven} />\r\n                    <Picker.Item label=\"None\" value={Doubling.none} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Text, View } from 'react-native';\r\nimport { hitColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys } from '../../types';\r\n\r\ninterface RuleSwitcherProps {\r\n    casinoRules: CasinoRules;\r\n    hideLabel?: boolean;\r\n    isDisabled?: boolean;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    ruleName:\r\n        | CasinoRulesKeys.blackjackPeek\r\n        | CasinoRulesKeys.doubleAfterSplit\r\n        | CasinoRulesKeys.hitSplitAces\r\n        | CasinoRulesKeys.holeCard\r\n        | CasinoRulesKeys.surrender;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const RuleSwitcher: React.FC<RuleSwitcherProps> = (props) => {\r\n    const SwitchCore = (\r\n        <Switch\r\n            onValueChange={\r\n                props.isDisabled\r\n                    ? undefined\r\n                    : (newValue) => {\r\n                          const nextCasinoRules = {\r\n                              ...props.casinoRules,\r\n                              [props.ruleName]: newValue\r\n                          };\r\n                          if (props.ruleName === CasinoRulesKeys.holeCard && !newValue) {\r\n                              nextCasinoRules[CasinoRulesKeys.blackjackPeek] = false;\r\n                          }\r\n                          props.setCasinoRules(nextCasinoRules);\r\n                          props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                      }\r\n            }\r\n            style={{ marginRight: 8 }}\r\n            trackColor={{ true: hitColor, false: 'white' }}\r\n            value={props.casinoRules[props.ruleName]}\r\n        />\r\n    );\r\n\r\n    return props.hideLabel ? (\r\n        SwitchCore\r\n    ) : (\r\n        <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n            {SwitchCore}\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {props.ruleName}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\nexport const Divider: React.FC = () => (\r\n    <View\r\n        style={{\r\n            backgroundColor: 'white',\r\n            height: 2,\r\n            width: '100%'\r\n        }}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity } from 'react-native';\r\nimport { tableColor } from '../constants';\r\n\r\ninterface HelpIconProps {\r\n    onPress: () => void;\r\n}\r\n\r\nexport const HelpIcon: React.FC<HelpIconProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity onPress={props.onPress}>\r\n            <Text\r\n                style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: 16,\r\n                    color: tableColor,\r\n                    fontSize: 18,\r\n                    fontWeight: 'bold',\r\n                    marginLeft: 8,\r\n                    marginTop: 2,\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                ?\r\n            </Text>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import * as Linking from 'expo-linking';\r\nimport React, { useState } from 'react';\r\nimport { Alert, ScrollView, Switch, Text, View } from 'react-native';\r\nimport { updateGameConfig, updatePlayerEarnings, updateTrainingProgress } from '../async-storage';\r\nimport { Button } from '../components/button';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { Divider } from '../components/divider';\r\nimport { HelpIcon } from '../components/help-icon';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor, hitColor, splitColor, surrenderColor } from '../constants';\r\nimport { getGoldHandsNumber, getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    getAreGoldHandsBlockingProgress,\r\n    getDefaultTrainingStatus\r\n} from '../logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    GoldHandsLevels,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingStatus\r\n} from '../types';\r\n\r\ntype ConfigMenuProps = {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    progress: number;\r\n    setGameConfig: (gameConfig: GameConfig) => void;\r\n    setTrainingStatus: (trainingStatus: TrainingStatus) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingStatus: TrainingStatus;\r\n};\r\n\r\nconst textStyle = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nexport const ConfigMenu: React.FC<ConfigMenuProps> = (props) => {\r\n    const [areGoldHandsBlockingProgress, setAreGoldHandsBlockingProgress] = useState(\r\n        props.progress < 100 && props.areGoldHandsBlockingProgress\r\n    );\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n    const [goldHandsLevels, setGoldHandsLevels] = useState(props.gameConfig.goldHandsLevels);\r\n    const [goldHandsNumber, setGoldHandsNumber] = useState(\r\n        getGoldHandsNumber(props.trainingHands, props.gameConfig.goldHandsLevels)\r\n    );\r\n    const [isDealerAnimationEnabled, setIsDealerAnimationEnabled] = useState(\r\n        props.gameConfig.isDealerAnimationEnabled\r\n    );\r\n    const [isSoundEnabled, setIsSoundEnabled] = useState(props.gameConfig.isSoundEnabled);\r\n    const [trainingHands, setTrainingHands] = useState(props.trainingHands);\r\n    const [useBlueCards, setUseBlueCards] = useState(props.gameConfig.useBlueCards);\r\n    const [useGoldHands, setUseGoldHands] = useState(props.gameConfig.useGoldHands);\r\n\r\n    const isSomeLevelSelected = (_goldHandsLevels: GoldHandsLevels) =>\r\n        _goldHandsLevels[1] || _goldHandsLevels[2] || _goldHandsLevels[3] || _goldHandsLevels[4];\r\n\r\n    const areGoldHandsBlockingProgressHandler = (options?: {\r\n        nextCasinoRules?: CasinoRules;\r\n        nextGoldHandsLevels?: GoldHandsLevels;\r\n        nextTrainingHands?: TrainingHands;\r\n        nextUseGoldHands?: boolean;\r\n    }) => {\r\n        setAreGoldHandsBlockingProgress(\r\n            isSomeLevelSelected((options && options.nextGoldHandsLevels) || goldHandsLevels) &&\r\n                getAreGoldHandsBlockingProgress(\r\n                    {\r\n                        casinoRules: (options && options.nextCasinoRules) || casinoRules,\r\n                        goldHandsLevels:\r\n                            (options && options.nextGoldHandsLevels) || goldHandsLevels,\r\n                        isDealerAnimationEnabled,\r\n                        isSoundEnabled,\r\n                        useBlueCards,\r\n                        useGoldHands:\r\n                            options && options.nextUseGoldHands !== undefined\r\n                                ? options.nextUseGoldHands\r\n                                : useGoldHands\r\n                    },\r\n                    (options && options.nextTrainingHands) || trainingHands,\r\n                    props.trainingStatus.trainingProgress,\r\n                    props.progress\r\n                )\r\n        );\r\n    };\r\n\r\n    const casinoRuleChangeHandler = (nextCasinoRules: CasinoRules) => {\r\n        const nextTrainingHands = getTrainingHands(nextCasinoRules);\r\n        const nextGoldHandsNumber = getGoldHandsNumber(nextTrainingHands, goldHandsLevels);\r\n\r\n        setGoldHandsNumber(nextGoldHandsNumber);\r\n        setTrainingHands(nextTrainingHands);\r\n        areGoldHandsBlockingProgressHandler({ nextCasinoRules, nextTrainingHands });\r\n    };\r\n\r\n    const saveHandler = () => {\r\n        const nextGameConfig: GameConfig = {\r\n            casinoRules,\r\n            goldHandsLevels,\r\n            isDealerAnimationEnabled,\r\n            isSoundEnabled,\r\n            useBlueCards,\r\n            useGoldHands\r\n        };\r\n        props.setGameConfig(nextGameConfig);\r\n        updateGameConfig(nextGameConfig);\r\n        props.navigation.navigate(RouteNames.table);\r\n    };\r\n\r\n    const isSaveButtonEnabled =\r\n        (props.gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubleAfterSplit] !==\r\n                casinoRules[CasinoRulesKeys.doubleAfterSplit] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                casinoRules[CasinoRulesKeys.doubling] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                casinoRules[CasinoRulesKeys.hitSplitAces] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                casinoRules[CasinoRulesKeys.holeCard] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                casinoRules[CasinoRulesKeys.surrender] ||\r\n            props.gameConfig.goldHandsLevels[1] !== goldHandsLevels[1] ||\r\n            props.gameConfig.goldHandsLevels[2] !== goldHandsLevels[2] ||\r\n            props.gameConfig.goldHandsLevels[3] !== goldHandsLevels[3] ||\r\n            props.gameConfig.goldHandsLevels[4] !== goldHandsLevels[4] ||\r\n            props.gameConfig.isDealerAnimationEnabled !== isDealerAnimationEnabled ||\r\n            props.gameConfig.isSoundEnabled !== isSoundEnabled ||\r\n            props.gameConfig.useBlueCards !== useBlueCards ||\r\n            props.gameConfig.useGoldHands !== useGoldHands) &&\r\n        isSomeLevelSelected(goldHandsLevels);\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            style={{\r\n                flexGrow: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                {areGoldHandsBlockingProgress && (\r\n                    <Text\r\n                        style={{\r\n                            color: doubleColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingTop: 16\r\n                        }}\r\n                    >\r\n                        ⚠️ The selected Gold hands levels are blocking untrained hands. Modify the\r\n                        selected levels or disable Gold Hands to train the missing hands\r\n                    </Text>\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.casinoRules}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Casino rules\r\n                </Text>\r\n                <Divider />\r\n\r\n                <DoublingPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <View\r\n                    style={{\r\n                        opacity:\r\n                            casinoRules[CasinoRulesKeys.doubling] > Doubling.none ? undefined : 0.3\r\n                    }}\r\n                >\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        isDisabled={casinoRules[CasinoRulesKeys.doubling] === Doubling.none}\r\n                        onValueChange={casinoRuleChangeHandler}\r\n                        ruleName={CasinoRulesKeys.doubleAfterSplit}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                </View>\r\n\r\n                {/* TODO Create a help icon on Hit split aces */}\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.hitSplitAces}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        hideLabel={true}\r\n                        onValueChange={casinoRuleChangeHandler}\r\n                        ruleName={CasinoRulesKeys.holeCard}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <View>\r\n                        {/* TODO Create a help icon on Hole card */}\r\n                        <Text\r\n                            style={{\r\n                                color: areGoldHandsBlockingProgress ? doubleColor : 'white',\r\n                                fontSize: 20\r\n                            }}\r\n                        >\r\n                            {CasinoRulesKeys.holeCard}\r\n                        </Text>\r\n\r\n                        <View\r\n                            style={{\r\n                                opacity: casinoRules[CasinoRulesKeys.holeCard] ? undefined : 0.3\r\n                            }}\r\n                        >\r\n                            <RuleSwitcher\r\n                                casinoRules={casinoRules}\r\n                                isDisabled={!casinoRules[CasinoRulesKeys.holeCard]}\r\n                                onValueChange={casinoRuleChangeHandler}\r\n                                ruleName={CasinoRulesKeys.blackjackPeek}\r\n                                setCasinoRules={setCasinoRules}\r\n                            />\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.appSettings}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    App settings\r\n                </Text>\r\n                <Divider />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setUseBlueCards}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={useBlueCards}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Blue cards\r\n                    </Text>\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.blueCardsInfo);\r\n                        }}\r\n                    />\r\n                </View>\r\n\r\n                {props.progress === 100 && useBlueCards && (\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingVertical: 16\r\n                        }}\r\n                    >\r\n                        Blue cards don't have any effect on 100% progress. Reset the training if you\r\n                        want to see them again\r\n                    </Text>\r\n                )}\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <Switch\r\n                        onValueChange={(value) => {\r\n                            setUseGoldHands(value);\r\n                            areGoldHandsBlockingProgressHandler({ nextUseGoldHands: value });\r\n                        }}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={useGoldHands}\r\n                    />\r\n\r\n                    <View>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                            <Text\r\n                                style={{\r\n                                    color: areGoldHandsBlockingProgress ? doubleColor : 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Gold hands\r\n                            </Text>\r\n                            <HelpIcon\r\n                                onPress={() => {\r\n                                    props.navigation.navigate(RouteNames.goldHandsInfo);\r\n                                }}\r\n                            />\r\n                        </View>\r\n\r\n                        <View\r\n                            style={{\r\n                                marginTop: 16,\r\n                                opacity: useGoldHands ? undefined : 0.3\r\n                            }}\r\n                        >\r\n                            <View style={{ flexDirection: 'row' }}>\r\n                                <Text\r\n                                    style={{\r\n                                        ...textStyle,\r\n                                        color: areGoldHandsBlockingProgress ? doubleColor : 'white'\r\n                                    }}\r\n                                >\r\n                                    Hand levels\r\n                                </Text>\r\n                                <HelpIcon\r\n                                    onPress={() => {\r\n                                        props.navigation.navigate(RouteNames.goldHandsLevelsInfo);\r\n                                    }}\r\n                                />\r\n                            </View>\r\n\r\n                            <View\r\n                                style={{\r\n                                    flexDirection: 'row',\r\n                                    flexWrap: 'wrap'\r\n                                }}\r\n                            >\r\n                                {Object.keys(goldHandsLevels).map((numberKey) => {\r\n                                    const number = parseInt(numberKey, 10);\r\n                                    return (\r\n                                        <React.Fragment key={numberKey}>\r\n                                            <Switch\r\n                                                disabled={!useGoldHands}\r\n                                                onValueChange={(newValue) => {\r\n                                                    const nextGoldHandsLevels = {\r\n                                                        ...goldHandsLevels,\r\n                                                        [number]: newValue\r\n                                                    };\r\n                                                    setGoldHandsLevels(nextGoldHandsLevels);\r\n                                                    setGoldHandsNumber(\r\n                                                        getGoldHandsNumber(\r\n                                                            trainingHands,\r\n                                                            nextGoldHandsLevels\r\n                                                        )\r\n                                                    );\r\n                                                    areGoldHandsBlockingProgressHandler({\r\n                                                        nextGoldHandsLevels\r\n                                                    });\r\n                                                }}\r\n                                                style={{ marginTop: 16 }}\r\n                                                trackColor={{ true: hitColor, false: 'white' }}\r\n                                                value={goldHandsLevels[number] || false}\r\n                                            />\r\n                                            <Text\r\n                                                style={{\r\n                                                    ...textStyle,\r\n                                                    color: areGoldHandsBlockingProgress\r\n                                                        ? doubleColor\r\n                                                        : 'white',\r\n                                                    marginTop: 16,\r\n                                                    paddingLeft: 4\r\n                                                }}\r\n                                            >\r\n                                                {numberKey}\r\n                                            </Text>\r\n                                        </React.Fragment>\r\n                                    );\r\n                                })}\r\n                            </View>\r\n                            <Text style={{ ...textStyle, marginTop: 16, textAlign: 'center' }}>\r\n                                ({goldHandsNumber} gold hands)\r\n                            </Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep} style={{ padding: 16 }}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Animations\r\n                </Text>\r\n                <Divider />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsSoundEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isSoundEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Sound effects 🔊\r\n                    </Text>\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsDealerAnimationEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isDealerAnimationEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Dealer cards delay\r\n                    </Text>\r\n                </View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 40,\r\n                    paddingHorizontal: 16,\r\n                    paddingTop: 24\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={isSaveButtonEnabled}\r\n                    onPress={saveHandler}\r\n                    text=\"Save\"\r\n                    width=\"75%\"\r\n                />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={splitColor}\r\n                    isEnabled={true}\r\n                    marginTop={56}\r\n                    onPress={() => {\r\n                        Linking.openURL(\r\n                            'https://wizardofodds.com/games/blackjack/strategy/4-decks/'\r\n                        );\r\n                    }}\r\n                    text=\"View basic strategy table\"\r\n                    width=\"100%\"\r\n                />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={splitColor}\r\n                    isEnabled={props.phase === Phases.finished}\r\n                    marginTop={8}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.onboarding);\r\n                    }}\r\n                    text=\"Onboarding\"\r\n                    width=\"100%\"\r\n                />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={surrenderColor}\r\n                    isEnabled={true}\r\n                    marginTop={24}\r\n                    onPress={() => {\r\n                        Alert.alert(\r\n                            'Reset training',\r\n                            'Resetting the training will mark all hands as untrained, ' +\r\n                                'setting the progress and precision indicators to 0%, ' +\r\n                                'and set the player earnings to 0$ as well. ' +\r\n                                'Are you sure you want to reset the training?',\r\n                            [\r\n                                {\r\n                                    text: 'Cancel',\r\n                                    style: 'cancel'\r\n                                },\r\n                                {\r\n                                    text: 'Reset',\r\n                                    onPress: () => {\r\n                                        const nextTrainingStatus = getDefaultTrainingStatus();\r\n                                        props.setTrainingStatus(nextTrainingStatus);\r\n                                        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n                                        updatePlayerEarnings(0);\r\n                                    }\r\n                                }\r\n                            ]\r\n                        );\r\n                    }}\r\n                    text=\"Reset training\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairRepresentation\r\n} from '../types';\r\n\r\ntype FailedHandsProps = {\r\n    failedTrainingPairs: TrainingPairRepresentation[];\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const FailedHands: React.FC<FailedHandsProps> = (props) => {\r\n    return (\r\n        <OnBoardingSection\r\n            onBoardingStep={props.onBoardingStep}\r\n            style={{ alignItems: undefined, flex: 1 }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Failed hands\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{ flex: 1 }}\r\n            >\r\n                {props.failedTrainingPairs.length === 0 ? (\r\n                    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>\r\n                        <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                            No failed hands so far. Nice job!\r\n                        </Text>\r\n                    </View>\r\n                ) : (\r\n                    Object.values(props.failedTrainingPairs).map((failedTrainingPair) => {\r\n                        const handName = props.trainingHands[failedTrainingPair.handCode].name;\r\n\r\n                        return (\r\n                            <View key={handName} style={{ marginBottom: 16, width: '100%' }}>\r\n                                <View\r\n                                    style={{\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row',\r\n                                        justifyContent: 'space-between'\r\n                                    }}\r\n                                >\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row'\r\n                                        }}\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName}\r\n                                        </Text>\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            vs dealer's{' '}\r\n                                        </Text>\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {failedTrainingPair.dealerSymbol}\r\n                                        </Text>\r\n                                    </View>\r\n                                    <View\r\n                                        style={{\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        <TouchableOpacity\r\n                                            onPress={\r\n                                                props.phase !== Phases.finished\r\n                                                    ? undefined\r\n                                                    : () => {\r\n                                                          const trainingPair = getSpecificTrainingPair(\r\n                                                              failedTrainingPair.handCode,\r\n                                                              failedTrainingPair.dealerSymbol,\r\n                                                              props.gameConfig.casinoRules\r\n                                                          );\r\n                                                          props.startTrainingRound(\r\n                                                              trainingPair.player,\r\n                                                              trainingPair.dealer\r\n                                                          );\r\n                                                          props.navigation.navigate(\r\n                                                              RouteNames.table\r\n                                                          );\r\n                                                      }\r\n                                            }\r\n                                        >\r\n                                            <Text\r\n                                                style={{\r\n                                                    backgroundColor: doubleColor,\r\n                                                    borderRadius: 16,\r\n                                                    color: 'white',\r\n                                                    fontSize: 20,\r\n                                                    marginBottom: 16,\r\n                                                    paddingHorizontal: 16,\r\n                                                    paddingVertical: 4,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                Train ➡️\r\n                                            </Text>\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                </View>\r\n                                <Divider />\r\n                            </View>\r\n                        );\r\n                    })\r\n                )}\r\n            </ScrollView>\r\n        </OnBoardingSection>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { CardSuit, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const GoldHandsInfo: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Gold hands\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    When Gold hands are enabled you will be dealt specific initial hands and dealer\r\n                    will be dealt specific up cards, prioritizing those you haven't trained yet and\r\n                    those which you didn't get right.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Gold cards have golden symbols and a golden square (instead of the suit):\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: true,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Nine\r\n                            },\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: true,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SimpleCardSymbol.Eight\r\n                            }\r\n                        ],\r\n                        values: [17]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    Additionally, you can filter the hands you will be dealt by configuring the gold\r\n                    hands Levels.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontWeight: 'bold', marginBottom: 16 }}\r\n                >\r\n                    Notice that when enabling Gold hands you will get hands that are infrequent when\r\n                    playing in real scenarios so the results (i.e. the money earnings) are not\r\n                    relevant.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Once you have trained each possible hand, disable Gold hands in order to train\r\n                    in more similar conditions to the ones in real scenarios.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Another consequence of enabling Gold hands, for example, is that you will never\r\n                    be dealt a Blackjack as initial hand (because it's a hand that requires no\r\n                    training).\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            },\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SpecialCardSymbol.Jack\r\n                            }\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { HandDecisionSet } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ninterface HandDecisionsTableProps {\r\n    handDecisionSet: HandDecisionSet;\r\n}\r\n\r\nexport const HandDecisionsTable: React.FC<HandDecisionsTableProps> = (props) => (\r\n    <View style={{ width: '100%' }}>\r\n        {getObjectKeys(props.handDecisionSet).map((simpleCardSymbol) => {\r\n            return (\r\n                <View key={simpleCardSymbol} style={{ flexDirection: 'row', width: '100%' }}>\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            paddingTop: 12,\r\n                            textAlign: 'center',\r\n                            width: '15%'\r\n                        }}\r\n                    >\r\n                        {simpleCardSymbol}\r\n                    </Text>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: colors[props.handDecisionSet[simpleCardSymbol]],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            marginTop: 8,\r\n                            paddingVertical: 4,\r\n                            paddingHorizontal: 8,\r\n                            textAlign: 'center',\r\n                            width: '85%'\r\n                        }}\r\n                    >\r\n                        {props.handDecisionSet[simpleCardSymbol]}\r\n                    </Text>\r\n                </View>\r\n            );\r\n        })}\r\n    </View>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\n\r\nimport {\r\n    CardSuit,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    SimpleCardSymbol\r\n} from '../types';\r\n\r\ntype GoldHandsLevelsInfoProps = {\r\n    gameConfig: GameConfig;\r\n};\r\n\r\nconst levelsColor: Dictionary<string, number> = {\r\n    1: '#a0c5e4',\r\n    2: '#5496cf',\r\n    3: '#2e618d',\r\n    4: '#1a3750'\r\n};\r\n\r\nexport const GoldHandsLevelsInfo: React.FC<GoldHandsLevelsInfoProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    const hardEight: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Five\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.hearts,\r\n                symbol: SimpleCardSymbol.Three\r\n            }\r\n        ],\r\n        values: [8]\r\n    };\r\n    const splitNine: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.spades,\r\n                symbol: SimpleCardSymbol.Nine\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.diamonds,\r\n                symbol: SimpleCardSymbol.Nine\r\n            }\r\n        ],\r\n        values: [18]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Hand levels\r\n            </Text>\r\n\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    The level of a hand tells how many different actions must be memorized for that\r\n                    hand depending on the dealer's up card.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    For example, a Hard 8 has a single optimal action, regardless the dealer's up\r\n                    card, thus it is level 1.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardEight}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandDecisionsTable handDecisionSet={trainingHands[HandCode.Hard8].decisionSet} />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 32 }}>\r\n                    The more optimal actions you need to memorize for a hand, the higher the hand\r\n                    level is. For a 9,9 for example 4 different actions must be memorized depending\r\n                    on the dealer's up card, so it's level 4.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={splitNine}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandDecisionsTable handDecisionSet={trainingHands[HandCode.Split9s].decisionSet} />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 32 }}>\r\n                    When disabling a level, the hands on that level will never be dealt as initial\r\n                    hands if Gold hands are enabled. For example, disabling level 1 will prevent\r\n                    Hard 8 from being dealt as initial hand while disabling level 4 will prevent\r\n                    9,9.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Notice that the casino rules modify the level of some hands. For example, Hard\r\n                    16 is level 2 when Surrender is disabled but it becomes level 3 when Surrender\r\n                    is enabled. Here is a list of each hand level:\r\n                </Text>\r\n\r\n                <View style={{ flexDirection: 'row', marginBottom: 16 }}>\r\n                    {Object.keys(props.gameConfig.goldHandsLevels).map((level) => (\r\n                        <View\r\n                            key={level}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                flexDirection: 'row',\r\n                                width: '25%'\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'white', fontSize: 20 }}>{level}</Text>\r\n                            <View\r\n                                style={{\r\n                                    marginLeft: 8,\r\n                                    backgroundColor: levelsColor[parseInt(level)],\r\n                                    height: 20,\r\n                                    width: 40\r\n                                }}\r\n                            />\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                    {Object.values(trainingHands).map((trainingHand) => (\r\n                        <Text\r\n                            key={trainingHand.name}\r\n                            style={{\r\n                                backgroundColor: levelsColor[trainingHand.level],\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                marginHorizontal: '1.5%',\r\n                                marginVertical: 4,\r\n                                textAlign: 'center',\r\n                                width: '30%'\r\n                            }}\r\n                        >\r\n                            {trainingHand.name}\r\n                        </Text>\r\n                    ))}\r\n                </View>\r\n\r\n                <View style={{ marginBottom: 16 }}>\r\n                    <DoublingPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.doubleAfterSplit}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.surrender}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                </View>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getHandDecisionSetLevel, handDecisionSetGetters } from '../logic/hand-decision-set';\r\nimport { AppRoute, CasinoRules, CasinoRulesKeys, RouteNames, TrainingHands } from '../types';\r\n\r\ntype HandDecisionsProps = {\r\n    casinoRules: CasinoRules;\r\n    route: AppRoute<RouteNames.handDecisions>;\r\n};\r\n\r\nexport const HandDecisions: React.FC<HandDecisionsProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n\r\n    const trainingHand = props.route.params['trainingHand'];\r\n    const handDecisionSet = handDecisionSetGetters[trainingHand.code](casinoRules);\r\n\r\n    return (\r\n        <ScrollView\r\n            style={{\r\n                flex: 1,\r\n                padding: 16,\r\n                width: '100%'\r\n            }}\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between',\r\n                    paddingBottom: 16,\r\n                    width: '100%'\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 24 }}>{trainingHand.name} decisions</Text>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontStyle: 'italic'\r\n                    }}\r\n                >\r\n                    Level {getHandDecisionSetLevel(handDecisionSet)}\r\n                </Text>\r\n            </View>\r\n\r\n            <HandDecisionsTable handDecisionSet={handDecisionSet} />\r\n\r\n            {trainingHand.dependencies.map((dependency) => {\r\n                return dependency === CasinoRulesKeys.doubling ? (\r\n                    <DoublingPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : (\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        ruleName={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                );\r\n            })}\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { doubleColor, hitColor } from '../constants';\r\nimport { CardSuit } from '../types';\r\n\r\ninterface OnboardingProps {\r\n    skipOnboardingHandler: () => void;\r\n    startOnboardingHandler: () => void;\r\n}\r\n\r\nexport const Onboarding: React.FC<OnboardingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Welcome to\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 30,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    {CardSuit.clubs}\r\n                    {CardSuit.hearts} Blackjump {CardSuit.diamonds}\r\n                    {CardSuit.spades}\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        paddingBottom: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    The app that will help you master Blackjack basic strategy\r\n                </Text>\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={true}\r\n                    onPress={props.startOnboardingHandler}\r\n                    text=\"Start onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={true}\r\n                    marginTop={16}\r\n                    onPress={props.skipOnboardingHandler}\r\n                    text=\"Skip onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { getRandomCard } from '../logic/card';\r\nimport { createDealerHand, createHand } from '../logic/hand';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { getRandomTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    BaseDecisions,\r\n    CardSuit,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    Phases,\r\n    PlayerDecisions,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { Button } from './button';\r\n\r\nexport interface ActionsProps {\r\n    gameConfig: GameConfig;\r\n    handlers: {\r\n        double: () => void;\r\n        hit: () => void;\r\n        split: () => void;\r\n        stand: () => void;\r\n        surrender: () => void;\r\n    };\r\n    isDoubleEnabled: boolean;\r\n    isHitEnabled: boolean;\r\n    isSplitEnabled: boolean;\r\n    isSurrenderEnabled: boolean;\r\n    phase: Phases;\r\n    onBoardingStep: number;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n}\r\n\r\nexport const Actions: React.FC<ActionsProps> = (props) => {\r\n    const isPlayerTurn = props.phase === Phases.player;\r\n\r\n    const isDoublingAvailable =\r\n        props.gameConfig.casinoRules[CasinoRulesKeys.doubling] > Doubling.none;\r\n    const isSurrenderAvailable = props.gameConfig.casinoRules[CasinoRulesKeys.surrender];\r\n\r\n    const activeOptionalButtons = 1 + Number(isDoublingAvailable) + Number(isSurrenderAvailable);\r\n    const optionalButtonsWidth = Math.floor((100 * 100) / activeOptionalButtons) / 100;\r\n\r\n    return props.phase === Phases.finished ? (\r\n        <Button\r\n            height={112}\r\n            backgroundColor={colors[BaseDecisions.hit]}\r\n            isEnabled={true}\r\n            onPress={() => {\r\n                let dealerHand: Hand;\r\n                let playerHand: Hand;\r\n\r\n                if (\r\n                    onBoardingSteps[props.onBoardingStep] &&\r\n                    onBoardingSteps[props.onBoardingStep].id === 1\r\n                ) {\r\n                    /* Prevent dealing a Blackjack as initial hand when onboarding is active */\r\n                    playerHand = createHand([\r\n                        {\r\n                            isBlueCard: false,\r\n                            isGoldCard: false,\r\n                            suit: CardSuit.clubs,\r\n                            symbol: SimpleCardSymbol.Seven\r\n                        },\r\n                        getRandomCard()\r\n                    ]);\r\n                    dealerHand = createDealerHand(\r\n                        props.gameConfig.casinoRules,\r\n                        SimpleCardSymbol.Six\r\n                    );\r\n                } else if (props.gameConfig.useGoldHands) {\r\n                    const trainingPair = getRandomTrainingPair(\r\n                        props.trainingHands,\r\n                        props.trainingProgress,\r\n                        props.gameConfig\r\n                    );\r\n                    playerHand = trainingPair.player;\r\n                    dealerHand = trainingPair.dealer;\r\n                } else {\r\n                    playerHand = createHand([getRandomCard(), getRandomCard()]);\r\n                    dealerHand = createDealerHand(props.gameConfig.casinoRules);\r\n                }\r\n\r\n                props.startTrainingRound(playerHand, dealerHand);\r\n            }}\r\n            text=\"Train\"\r\n            width=\"100%\"\r\n        />\r\n    ) : (\r\n        <React.Fragment>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={isPlayerTurn && props.isHitEnabled}\r\n                    onPress={props.handlers.hit}\r\n                    text={BaseDecisions.hit}\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={isPlayerTurn}\r\n                    onPress={props.handlers.stand}\r\n                    text={BaseDecisions.stand}\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.split]}\r\n                    isEnabled={isPlayerTurn && props.isSplitEnabled}\r\n                    onPress={props.handlers.split}\r\n                    text={BaseDecisions.split}\r\n                    width={`${optionalButtonsWidth}%`}\r\n                />\r\n                {isDoublingAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.double]}\r\n                        isEnabled={isPlayerTurn && props.isDoubleEnabled}\r\n                        onPress={props.handlers.double}\r\n                        text={PlayerDecisions.double}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n                {isSurrenderAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.surrender]}\r\n                        isEnabled={isPlayerTurn && props.isSurrenderEnabled}\r\n                        onPress={props.handlers.surrender}\r\n                        text={PlayerDecisions.surrender}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n            </View>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { splitColor, surrenderColor } from '../constants';\r\nimport { DecisionEvaluation } from '../types';\r\n\r\ninterface DecisionEvaluationProps {\r\n    decisionEvaluation: DecisionEvaluation;\r\n    showDecisionsHandler?: () => void;\r\n}\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center'\r\n};\r\n\r\nexport const DecisionEvaluationComponent: React.FC<DecisionEvaluationProps> = (props) => (\r\n    <View\r\n        style={{\r\n            alignItems: 'center',\r\n            backgroundColor: props.decisionEvaluation.isHit ? splitColor : surrenderColor,\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            width: '100%'\r\n        }}\r\n    >\r\n        {props.decisionEvaluation.isHit ? (\r\n            <Text style={textProperties}>Well done</Text>\r\n        ) : (\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'center',\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.handName}\r\n                </Text>\r\n                <Text style={textProperties}> must </Text>\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.dynamicDecision}\r\n                </Text>\r\n                <Text style={textProperties}> vs dealer's </Text>\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold',\r\n                        marginRight: 8\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.dealerSymbol}\r\n                </Text>\r\n                <TouchableOpacity onPress={props.showDecisionsHandler} style={{ marginTop: 8 }}>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: 'white',\r\n                            borderRadius: 16,\r\n                            color: surrenderColor,\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 16,\r\n                            paddingVertical: 2,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.decisionEvaluation.handName} decisions ➡️\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )}\r\n    </View>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { Actions, ActionsProps } from '../components/actions';\r\nimport { DecisionEvaluationComponent } from '../components/decision-evaluation';\r\nimport { Divider } from '../components/divider';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport {\r\n    AppNavigation,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    Player,\r\n    RouteNames,\r\n    TrainingHands\r\n} from '../types';\r\n\r\ntype TableProps = ActionsProps & {\r\n    dealerHand?: Hand;\r\n    decisionEvaluation?: DecisionEvaluation;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    peeking: boolean;\r\n    phase: Phases;\r\n    player: Player;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const Table: React.FC<TableProps> = (props) => (\r\n    <React.Fragment>\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableDealerHand}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ minHeight: 128, justifyContent: 'center' }}\r\n            >\r\n                {props.dealerHand && (\r\n                    <HandComponent\r\n                        hand={props.dealerHand}\r\n                        handsNumber={1}\r\n                        isCurrentHand={props.phase === Phases.dealer}\r\n                        isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                        navigation={props.navigation}\r\n                        peeking={props.peeking}\r\n                    />\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableFeedback}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ height: 80, justifyContent: 'center', width: '100%' }}\r\n            >\r\n                <Divider />\r\n                {props.decisionEvaluation ? (\r\n                    <DecisionEvaluationComponent\r\n                        decisionEvaluation={props.decisionEvaluation}\r\n                        showDecisionsHandler={\r\n                            props.onBoardingStep > -1\r\n                                ? undefined\r\n                                : () => {\r\n                                      props.navigation.navigate(RouteNames.handDecisions, {\r\n                                          trainingHand:\r\n                                              props.trainingHands[props.player.lastActionHand!]\r\n                                      });\r\n                                  }\r\n                        }\r\n                    />\r\n                ) : (\r\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingHorizontal: 8,\r\n                                paddingTop: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            Dealer must draw to 16\r\n                        </Text>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingBottom: 8,\r\n                                paddingHorizontal: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            and stand on all 17s\r\n                        </Text>\r\n                    </View>\r\n                )}\r\n                <Divider />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tablePlayerHands}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ flex: 1 }}\r\n            >\r\n                <ScrollView\r\n                    contentContainerStyle={{\r\n                        flexGrow: 1,\r\n                        justifyContent: 'space-evenly'\r\n                    }}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {props.player.hands.map((hand, index) => (\r\n                        <HandComponent\r\n                            hand={hand}\r\n                            handsNumber={props.player.hands.length}\r\n                            isCurrentHand={\r\n                                props.phase === Phases.player && index === props.player.handIndex\r\n                            }\r\n                            isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                            key={index}\r\n                            navigation={props.navigation}\r\n                        />\r\n                    ))}\r\n                </ScrollView>\r\n            </OnBoardingSection>\r\n        </View>\r\n\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.tableActions}\r\n            onBoardingStep={props.onBoardingStep}\r\n        >\r\n            <Actions\r\n                gameConfig={props.gameConfig}\r\n                handlers={props.handlers}\r\n                isDoubleEnabled={props.isDoubleEnabled}\r\n                isHitEnabled={props.isHitEnabled}\r\n                isSplitEnabled={props.isSplitEnabled}\r\n                isSurrenderEnabled={props.isSurrenderEnabled}\r\n                phase={props.phase}\r\n                onBoardingStep={props.onBoardingStep}\r\n                startTrainingRound={props.startTrainingRound}\r\n                trainingHands={props.trainingHands}\r\n                trainingProgress={props.trainingProgress}\r\n            />\r\n        </OnBoardingSection>\r\n    </React.Fragment>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\n\r\nexport const TrainingCompleted: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingTop: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training completed\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 64, marginVertical: 32 }}>🎉🍾</Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 24, marginBottom: 32 }}>\r\n                    Congratulations! You have trained every possible hand. You can now test your\r\n                    skills in a real casino 💸💸\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20 }}>\r\n                    Master the Basic Strategy: reset the training stats from the configuration menu\r\n                    and keep practicing until you make no errors at all\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands as ITrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype TrainingHandsProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: ITrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n};\r\n\r\nexport const TrainingHands: React.FC<TrainingHandsProps> = (props) => {\r\n    const [unfoldedHand, setUnfoldedHand] = useState<HandCode | undefined>(HandCode.Hard5);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training hands\r\n                </Text>\r\n            </OnBoardingSection>\r\n            <ScrollView\r\n                style={{\r\n                    flex: 1\r\n                }}\r\n                contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            >\r\n                {getObjectKeys(props.trainingProgress).map((handCode) => {\r\n                    const trainingHandStatus = props.trainingProgress[handCode];\r\n                    const handName = props.trainingHands[handCode].name;\r\n\r\n                    return (\r\n                        <OnBoardingSection\r\n                            isHighlighted={unfoldedHand === handCode}\r\n                            key={handCode}\r\n                            onBoardingStep={props.onBoardingStep}\r\n                            style={{ paddingVertical: 8, paddingHorizontal: 16, width: '100%' }}\r\n                        >\r\n                            <TouchableOpacity\r\n                                onPress={() => {\r\n                                    setUnfoldedHand(\r\n                                        unfoldedHand !== handCode ? handCode : undefined\r\n                                    );\r\n                                }}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20,\r\n                                        marginBottom: 16,\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {handName}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            {unfoldedHand && unfoldedHand === handCode && (\r\n                                <React.Fragment>\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            justifyContent: 'space-around',\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        {getObjectKeys(trainingHandStatus).map((dealerSymbol) => {\r\n                                            const backgroundColor =\r\n                                                trainingHandStatus[dealerSymbol] === 0\r\n                                                    ? '#333'\r\n                                                    : trainingHandStatus[dealerSymbol] === 1\r\n                                                    ? 'lightgreen'\r\n                                                    : 'lightcoral';\r\n\r\n                                            return (\r\n                                                <TouchableOpacity\r\n                                                    key={dealerSymbol}\r\n                                                    onPress={\r\n                                                        props.onBoardingStep > -1 ||\r\n                                                        props.phase !== Phases.finished\r\n                                                            ? undefined\r\n                                                            : () => {\r\n                                                                  const trainingPair = getSpecificTrainingPair(\r\n                                                                      handCode,\r\n                                                                      dealerSymbol,\r\n                                                                      props.gameConfig.casinoRules\r\n                                                                  );\r\n                                                                  props.startTrainingRound(\r\n                                                                      trainingPair.player,\r\n                                                                      trainingPair.dealer\r\n                                                                  );\r\n                                                                  props.navigation.navigate(\r\n                                                                      RouteNames.table\r\n                                                                  );\r\n                                                              }\r\n                                                    }\r\n                                                    style={{\r\n                                                        alignItems: 'center',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        borderRadius: 8,\r\n                                                        marginBottom: 8,\r\n                                                        paddingVertical: 4,\r\n                                                        width: '18%'\r\n                                                    }}\r\n                                                >\r\n                                                    <Text\r\n                                                        style={{\r\n                                                            color: 'white',\r\n                                                            fontSize: 20,\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        {dealerSymbol}\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                            );\r\n                                        })}\r\n                                    </View>\r\n                                    <TouchableOpacity\r\n                                        onPress={\r\n                                            props.onBoardingStep > -1\r\n                                                ? undefined\r\n                                                : () => {\r\n                                                      props.navigation.navigate(\r\n                                                          RouteNames.handDecisions,\r\n                                                          {\r\n                                                              trainingHand:\r\n                                                                  props.trainingHands[handCode]\r\n                                                          }\r\n                                                      );\r\n                                                  }\r\n                                        }\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                backgroundColor: doubleColor,\r\n                                                borderRadius: 16,\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginVertical: 16,\r\n                                                marginHorizontal: 24,\r\n                                                paddingVertical: 4,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName} decisions ➡️\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                </React.Fragment>\r\n                            )}\r\n                            <Divider />\r\n                        </OnBoardingSection>\r\n                    );\r\n                })}\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Audio } from 'expo-av';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport failureSoundMp3 from './assets/failure.mp3';\r\nimport successSoundMp3 from './assets/success.mp3';\r\nimport {\r\n    getGameConfig,\r\n    getHasCompletedOnboarding,\r\n    getPlayerEarnings,\r\n    getTrainingProgress,\r\n    updateHasCompletedOnboarding,\r\n    updateTrainingProgress\r\n} from './src/async-storage';\r\nimport { NavBar } from './src/components/nav-bar';\r\nimport { OnboardingBar } from './src/components/onboarding-bar';\r\nimport { tableColor } from './src/constants';\r\nimport { getNextTrainingStatus, handleDealerTurn } from './src/logic/app-state';\r\nimport { evaluateDecision } from './src/logic/basic-strategy';\r\nimport { getRandomCard, symbolToSimpleSymbol } from './src/logic/card';\r\nimport { getDefaultGameConfig } from './src/logic/game-config';\r\nimport {\r\n    canBeDealerBlackjack,\r\n    canDouble,\r\n    canHit,\r\n    canSplit,\r\n    canSurrender,\r\n    isDealerBlackjack,\r\n    isFinished,\r\n    revealDealerHoleCard\r\n} from './src/logic/hand';\r\nimport { handToHandCode } from './src/logic/hand';\r\nimport { onBoardingSteps } from './src/logic/onboarding';\r\nimport {\r\n    createPlayer,\r\n    doubleCurrentHand,\r\n    getCurrentHand,\r\n    hitCurrentHand,\r\n    initializeHands,\r\n    isLastHand,\r\n    splitCurrentHand,\r\n    standCurrentHand,\r\n    startNextHand,\r\n    surrenderCurrentHand\r\n} from './src/logic/player';\r\nimport { getDefaultTrainingHands, getTrainingHands } from './src/logic/training-hand';\r\nimport { allTrainingPairsNumber } from './src/logic/training-pair';\r\nimport {\r\n    getAreGoldHandsBlockingProgress,\r\n    getDefaultTrainingStatus,\r\n    retrieveTrainingStatus\r\n} from './src/logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    Hand,\r\n    HandCode,\r\n    initialRouteName,\r\n    Phases,\r\n    Player,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    RouteNames,\r\n    RouteParams,\r\n    TrainingStatus\r\n} from './src/types';\r\nimport { playSound } from './src/utils';\r\nimport { BlueCardsInfo } from './src/views/blue-cards-info';\r\nimport { ConfigMenu } from './src/views/config-menu';\r\nimport { FailedHands } from './src/views/failed-hands';\r\nimport { GoldHandsInfo } from './src/views/gold-hands-info';\r\nimport { GoldHandsLevelsInfo } from './src/views/gold-hands-levels-info';\r\nimport { HandDecisions } from './src/views/hand-decisions';\r\nimport { Onboarding } from './src/views/onboarding';\r\nimport { Table } from './src/views/table';\r\nimport { TrainingCompleted } from './src/views/training-completed';\r\nimport { TrainingHands } from './src/views/training-hands';\r\n\r\nconst Stack = createStackNavigator<RouteParams>();\r\nlet navigationListener: Function | undefined;\r\n\r\nconst initializeSounds = () =>\r\n    Promise.all([\r\n        Audio.Sound.createAsync(failureSoundMp3),\r\n        Audio.Sound.createAsync(successSoundMp3)\r\n    ])\r\n        .then((results) => ({\r\n            failure: results[0].sound,\r\n            success: results[1].sound\r\n        }))\r\n        .catch((errors) => {\r\n            console.log(errors);\r\n            /* Failing to load audio is not a critical issue */\r\n            return undefined;\r\n        });\r\n\r\nexport default function App() {\r\n    const [areGoldHandsBlockingProgress, setAreGoldHandsBlockingProgress] = useState(false);\r\n    const [currentRoute, setCurrentRoute] = useState<string>(initialRouteName);\r\n    const [dealerHand, setDealerHand] = useState<Hand>();\r\n    const [decisionEvaluation, setDecisionEvaluation] = useState<DecisionEvaluation>();\r\n    const [decisionEvaluationTimeout, setDecisionEvaluationTimeout] = useState(0);\r\n    const [gameConfig, setGameConfig] = useState(getDefaultGameConfig());\r\n    const [onBoardingStep, setOnBoardingStep] = useState(-1);\r\n    const [peeking, setPeeking] = useState(false);\r\n    const [phase, setPhase] = useState<Phases>(Phases.finished);\r\n    const [player, setPlayer] = useState<Player>(createPlayer());\r\n    const [trainingHands, setTrainingHands] = useState(getDefaultTrainingHands());\r\n    const [sounds, setSounds] = useState<{ failure: Audio.Sound; success: Audio.Sound }>();\r\n    const [trainingStatus, setTrainingStatus] = useState(getDefaultTrainingStatus());\r\n\r\n    const navigationRef = useRef<NavigationContainerRef>(null);\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            getGameConfig(gameConfig),\r\n            getHasCompletedOnboarding(),\r\n            getPlayerEarnings(),\r\n            getTrainingProgress(),\r\n            initializeSounds()\r\n        ]).then((results) => {\r\n            setGameConfig(results[0]);\r\n            const nextTrainingHands = getTrainingHands(results[0].casinoRules);\r\n            setTrainingHands(nextTrainingHands);\r\n\r\n            if (!results[1]) {\r\n                ((navigationRef.current as unknown) as AppNavigation).navigate(\r\n                    RouteNames.onboarding\r\n                );\r\n            }\r\n\r\n            if (results[2]) {\r\n                setPlayer({ ...player, cash: results[2] });\r\n            }\r\n\r\n            if (results[3]) {\r\n                const nextTrainingStatus = retrieveTrainingStatus(results[3]);\r\n\r\n                setTrainingStatus(nextTrainingStatus);\r\n                setAreGoldHandsBlockingProgress(\r\n                    getAreGoldHandsBlockingProgress(\r\n                        results[0],\r\n                        nextTrainingHands,\r\n                        results[3],\r\n                        getProgress(nextTrainingStatus)\r\n                    )\r\n                );\r\n            }\r\n\r\n            setSounds(results[4]);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (navigationRef.current && !navigationListener) {\r\n            navigationListener = navigationRef.current.addListener('state', (event) => {\r\n                setCurrentRoute(event.data.state!.routes[event.data.state!.index!].name);\r\n            });\r\n        }\r\n    }, [navigationRef.current]);\r\n\r\n    const currentHand = getCurrentHand(player);\r\n    const isDoubleEnabled =\r\n        currentHand !== undefined && canDouble(currentHand, player.hands, gameConfig.casinoRules);\r\n    const isHitEnabled = currentHand !== undefined && canHit(player.hands, gameConfig.casinoRules);\r\n    const isSplitEnabled = currentHand !== undefined && canSplit(currentHand);\r\n    const isSurrenderEnabled =\r\n        currentHand !== undefined &&\r\n        canSurrender(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const currentDealerSymbol = dealerHand && symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const updateOnBoardingStep = (direction: 1 | -1) => {\r\n        const nextStep = onBoardingStep + direction;\r\n        onBoardingSteps[nextStep]?.load((navigationRef.current as unknown) as AppNavigation);\r\n        setOnBoardingStep(nextStep);\r\n    };\r\n\r\n    const exitOnboarding = () => {\r\n        setOnBoardingStep(-1);\r\n        updateHasCompletedOnboarding(true);\r\n        ((navigationRef.current as unknown) as AppNavigation).navigate(RouteNames.table);\r\n    };\r\n\r\n    const getProgress = (_trainingStatus: TrainingStatus) =>\r\n        Math.floor((_trainingStatus.attemptedTrainingPairs * 1000) / allTrainingPairsNumber) / 10;\r\n    const progress = getProgress(trainingStatus);\r\n\r\n    useEffect(() => {\r\n        if (decisionEvaluationTimeout) {\r\n            clearTimeout(decisionEvaluationTimeout);\r\n        }\r\n        if (decisionEvaluation && decisionEvaluation.isHit) {\r\n            const nextTimeout = setTimeout(() => {\r\n                setDecisionEvaluation(undefined);\r\n            }, 1000);\r\n            setDecisionEvaluationTimeout(nextTimeout);\r\n        }\r\n    }, [decisionEvaluation]);\r\n\r\n    useEffect(() => {\r\n        if (phase === 'dealer') {\r\n            handleDealerTurn(dealerHand!, gameConfig, player, setDealerHand, setPhase, setPlayer);\r\n        }\r\n    }, [phase, dealerHand]);\r\n\r\n    const startTrainingRound = (playerHand: Hand, dealerHand: Hand) => {\r\n        const nextPlayer = { ...player };\r\n        initializeHands(nextPlayer, playerHand);\r\n\r\n        if (\r\n            gameConfig.casinoRules[CasinoRulesKeys.holeCard] &&\r\n            gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            canBeDealerBlackjack(dealerHand)\r\n        ) {\r\n            setPeeking(true);\r\n            setTimeout(() => {\r\n                setPeeking(false);\r\n                if (isDealerBlackjack(dealerHand)) {\r\n                    revealDealerHoleCard(dealerHand);\r\n                    setPhase(Phases.dealer);\r\n                } else {\r\n                    setPhase(Phases.player);\r\n                }\r\n            }, 1500);\r\n        } else {\r\n            setPhase(\r\n                isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)\r\n                    ? Phases.dealer\r\n                    : Phases.player\r\n            );\r\n        }\r\n\r\n        setDealerHand(dealerHand);\r\n        setPlayer(nextPlayer);\r\n        setDecisionEvaluation(undefined);\r\n\r\n        if (onBoardingSteps[onBoardingStep] && onBoardingSteps[onBoardingStep].id === 1) {\r\n            updateOnBoardingStep(1);\r\n        }\r\n    };\r\n\r\n    const finishCurrentHand = (player: Player) => {\r\n        if (isLastHand(player)) {\r\n            setPhase(Phases.dealer);\r\n            // By setting the phase to dealer, the corresponding useEffect hook will be executed\r\n        } else {\r\n            const nextPlayer = { ...player };\r\n            startNextHand(\r\n                nextPlayer,\r\n                gameConfig.useBlueCards,\r\n                currentDealerSymbol!,\r\n                trainingHands,\r\n                trainingStatus.trainingProgress\r\n            );\r\n            setPlayer(nextPlayer);\r\n            if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n                finishCurrentHand(nextPlayer);\r\n            }\r\n        }\r\n    };\r\n\r\n    const evaluatePlayerDecision = (playerDecision: PlayerDecision, hand: Hand) => {\r\n        const nextDecisionEvaluation = evaluateDecision(\r\n            hand,\r\n            dealerHand!,\r\n            trainingHands,\r\n            {\r\n                canDouble: isDoubleEnabled,\r\n                canSurrender: isSurrenderEnabled\r\n            },\r\n            playerDecision\r\n        );\r\n\r\n        if (gameConfig.isSoundEnabled && sounds) {\r\n            playSound(nextDecisionEvaluation.isHit ? sounds.success : sounds.failure);\r\n        }\r\n\r\n        setDecisionEvaluation(nextDecisionEvaluation);\r\n\r\n        const handCode = handToHandCode(currentHand);\r\n        let nextTrainingStatus = getNextTrainingStatus(\r\n            trainingStatus,\r\n            nextDecisionEvaluation.isHit,\r\n            handCode,\r\n            currentDealerSymbol!\r\n        );\r\n\r\n        if (handCode === HandCode.Split5s) {\r\n            // A 5,5 must also set the corresponding state for Hard 10\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard10,\r\n                currentDealerSymbol!\r\n            );\r\n        } else if (handCode === HandCode.Split10s) {\r\n            // A 10,10 must also set the corresponding state for Hard 20\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard20,\r\n                currentDealerSymbol!\r\n            );\r\n        }\r\n\r\n        setTrainingStatus(nextTrainingStatus);\r\n        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n\r\n        if (onBoardingSteps[onBoardingStep] && onBoardingSteps[onBoardingStep].id === 4) {\r\n            updateOnBoardingStep(1);\r\n        }\r\n\r\n        if (nextTrainingStatus.isCompleted && !trainingStatus.isCompleted) {\r\n            navigationRef.current?.navigate(RouteNames.trainingCompleted);\r\n        }\r\n\r\n        setAreGoldHandsBlockingProgress(\r\n            getAreGoldHandsBlockingProgress(\r\n                gameConfig,\r\n                trainingHands,\r\n                nextTrainingStatus.trainingProgress,\r\n                getProgress(nextTrainingStatus)\r\n            )\r\n        );\r\n    };\r\n\r\n    const doubleHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.double, currentHand);\r\n        doubleCurrentHand(nextPlayer, getRandomCard());\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const hitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.hit, currentHand);\r\n        hitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.useBlueCards,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(currentHand, nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const standHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.stand, currentHand);\r\n        standCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const splitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.split, currentHand);\r\n        splitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.useBlueCards,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const surrenderHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.surrender, currentHand);\r\n        surrenderCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    return (\r\n        <NavigationContainer ref={navigationRef}>\r\n            <StatusBar hidden={true} />\r\n            <NavBar\r\n                areGoldHandsBlockingProgress={areGoldHandsBlockingProgress}\r\n                attemptedTrainingPairs={trainingStatus.attemptedTrainingPairs}\r\n                navigation={(navigationRef.current as unknown) as AppNavigation}\r\n                onBoardingStep={onBoardingStep}\r\n                passedTrainingPairs={trainingStatus.passedTrainingPairs}\r\n                player={player}\r\n                progress={progress}\r\n                routeName={currentRoute}\r\n            />\r\n            <Stack.Navigator\r\n                initialRouteName={initialRouteName}\r\n                screenOptions={{\r\n                    headerShown: false,\r\n                    cardStyle: {\r\n                        backgroundColor: tableColor\r\n                    }\r\n                }}\r\n            >\r\n                <Stack.Screen name={RouteNames.blueCardsInfo} component={BlueCardsInfo} />\r\n                <Stack.Screen name={RouteNames.configMenu}>\r\n                    {(props) => (\r\n                        <ConfigMenu\r\n                            areGoldHandsBlockingProgress={areGoldHandsBlockingProgress}\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            progress={progress}\r\n                            setGameConfig={(_gameConfig) => {\r\n                                const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\r\n                                setAreGoldHandsBlockingProgress(\r\n                                    getAreGoldHandsBlockingProgress(\r\n                                        _gameConfig,\r\n                                        nextTrainingHands,\r\n                                        trainingStatus.trainingProgress,\r\n                                        progress\r\n                                    )\r\n                                );\r\n                                setGameConfig(_gameConfig);\r\n                                setTrainingHands(nextTrainingHands);\r\n                            }}\r\n                            setTrainingStatus={(_trainingStatus) => {\r\n                                setTrainingStatus(_trainingStatus);\r\n                                setAreGoldHandsBlockingProgress(\r\n                                    getAreGoldHandsBlockingProgress(\r\n                                        gameConfig,\r\n                                        trainingHands,\r\n                                        _trainingStatus.trainingProgress,\r\n                                        getProgress(_trainingStatus)\r\n                                    )\r\n                                );\r\n                                setPlayer({ ...player, cash: 0 });\r\n                            }}\r\n                            trainingHands={trainingHands}\r\n                            trainingStatus={trainingStatus}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.failedHands}>\r\n                    {(props) => (\r\n                        <FailedHands\r\n                            failedTrainingPairs={trainingStatus.failedTrainingPairs}\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.goldHandsInfo} component={GoldHandsInfo} />\r\n                <Stack.Screen name={RouteNames.goldHandsLevelsInfo}>\r\n                    {() => <GoldHandsLevelsInfo gameConfig={gameConfig} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.handDecisions}>\r\n                    {(props) => (\r\n                        <HandDecisions casinoRules={gameConfig.casinoRules} route={props.route} />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.onboarding}>\r\n                    {() => (\r\n                        <Onboarding\r\n                            skipOnboardingHandler={exitOnboarding}\r\n                            startOnboardingHandler={() => updateOnBoardingStep(1)}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.table}>\r\n                    {(props) => (\r\n                        <Table\r\n                            dealerHand={dealerHand}\r\n                            decisionEvaluation={decisionEvaluation}\r\n                            gameConfig={gameConfig}\r\n                            handlers={{\r\n                                double: doubleHandler,\r\n                                hit: hitHandler,\r\n                                split: splitHandler,\r\n                                stand: standHandler,\r\n                                surrender: surrenderHandler\r\n                            }}\r\n                            isDoubleEnabled={isDoubleEnabled}\r\n                            isHitEnabled={isHitEnabled}\r\n                            isSplitEnabled={isSplitEnabled}\r\n                            isSurrenderEnabled={isSurrenderEnabled}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            peeking={peeking}\r\n                            phase={phase}\r\n                            player={player}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.trainingCompleted} component={TrainingCompleted} />\r\n                <Stack.Screen name={RouteNames.trainingHands}>\r\n                    {(props) => (\r\n                        <TrainingHands\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n            </Stack.Navigator>\r\n\r\n            {onBoardingStep > -1 && (\r\n                <OnboardingBar\r\n                    exitOnboarding={exitOnboarding}\r\n                    nextStepHandler={() => updateOnBoardingStep(1)}\r\n                    onBoardingStep={onBoardingStep}\r\n                    previousStepHandler={() => updateOnBoardingStep(-1)}\r\n                />\r\n            )}\r\n        </NavigationContainer>\r\n    );\r\n}\r\n","import { GameConfig } from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\n\r\nexport const getDefaultGameConfig = (): GameConfig => ({\r\n    casinoRules: getDefaultCasinoRules(),\r\n    goldHandsLevels: {\r\n        1: true,\r\n        2: true,\r\n        3: true,\r\n        4: true\r\n    },\r\n    isDealerAnimationEnabled: true,\r\n    isSoundEnabled: true,\r\n    useBlueCards: false,\r\n    useGoldHands: false\r\n});\r\n"],"sourceRoot":""}