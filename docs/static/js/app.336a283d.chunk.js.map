{"version":3,"sources":["assets/hit.mp3","assets/miss.mp3","assets/card-slide.mp3","src/types/card.ts","src/types/casino-rules.ts","src/types/decisions.ts","src/types/hand.ts","src/types/navigation.ts","src/types/onboarding.ts","src/types/phases.ts","src/types/training-pair.ts","src/async-storage.ts","src/constants.ts","src/components/nav-bar-items/config-button.tsx","src/components/nav-bar-items/earnings-indicator.tsx","src/components/nav-bar-items/precision-indicator.tsx","src/components/nav-bar-items/progress-indicator.tsx","src/logic/onboarding.ts","src/components/onboarding-section.tsx","src/components/nav-bar.tsx","src/components/button.tsx","src/components/onboarding-bar.tsx","src/utils.ts","src/logic/card.ts","src/logic/hand-code.ts","src/logic/hand.ts","src/logic/player.ts","src/logic/dealer-symbols.ts","src/logic/casino-rules.ts","src/logic/hand-decision-set.ts","src/logic/training-hand.ts","src/logic/training-pair.ts","src/logic/training-status.ts","src/logic/app-state.ts","src/logic/basic-strategy.ts","src/components/casino-rules/doubling-picker.tsx","src/components/casino-rules/rule-switcher.tsx","src/components/casino-rules/splits-number-picker.tsx","src/views/basic-strategy-table.tsx","src/logic/sound-queue.ts","src/components/card-component.tsx","src/components/hand-component.tsx","src/views/blue-cards-info.tsx","src/components/divider.tsx","src/components/help-icon.tsx","src/views/config-menu.tsx","src/views/gold-hands-info.tsx","src/components/hand-decisions-table.tsx","src/views/gold-hands-levels-info.tsx","src/views/hand-decisions.tsx","src/views/missed-pairs.tsx","src/views/onboarding.tsx","src/components/actions.tsx","src/components/decision-evaluation.tsx","src/views/table.tsx","src/views/training-completed.tsx","src/views/training-pairs.tsx","App.tsx","src/logic/game-config.ts"],"names":["module","exports","CardSuit","SimpleCardSymbol","SpecialCardSymbol","CasinoRulesKeys","Doubling","SplitsNumber","BaseDecisions","DynamicDecisions","PlayerDecisions","HandCode","HandOutcome","RouteNames","OnBoardingSections","OnBoardingStepEvent","Phases","initialRouteName","table","TrainingPairStatus","updatePlayerEarnings","playerEarnings","AsyncStorage","setItem","JSON","stringify","catch","updateTrainingProgress","TrainingProgress","colors","hit","stand","double_hit","double_stand","split_hit","split_stand","split_surrender_hit","surrender_hit","surrender_split_hit","surrender_stand","double","split","surrender","ConfigButton","props","TouchableOpacity","onPress","isEnabled","routeName","navigation","navigate","configMenu","goBack","undefined","style","alignItems","flexGrow","justifyContent","width","Fragment","height","viewBox","fill","d","areGoldHandsBlockingProgress","progress","View","position","right","bottom","Text","color","fontWeight","EarningsIndicator","earningsColor","earnings","fontSize","marginTop","transform","PrecisionIndicator","precision","Math","floor","missedPairs","flexDirection","marginLeft","ProgressIndicator","trainingPairs","onBoardingSteps","activeSection","tableActions","event","startRound","hideNextButton","load","text","tableDealerHand","tablePlayerHands","hidePreviousButton","playerAction","tableFeedback","progressIndicator","precisionIndicator","configMenuButton","basicStrategyTable","casinoRules","appSettings","resetTraining","OnBoardingSection","isOnboardingActive","onBoardingStep","isHighlighted","indexOf","children","backgroundColor","opacity","top","left","animateIndicator","Animated","sequence","timing","toValue","duration","useNativeDriver","start","NavBar","attemptedTrainingPairs","passedTrainingPairs","earningsPosition","useMemo","Value","precisionPosition","progressPosition","useEffect","player","cash","translateX","Button","marginBottom","textColor","textSize","OnboardingBar","currentStep","previousStepHandler","padding","length","nextStepHandler","exitOnboarding","cartesianProduct","firstArray","secondArray","elementBuilder","reduce","product","x","concat","map","y","getObjectKeys","object","Object","keys","getRandomItem","items","round","random","playSound","sound","stopAsync","then","playAsync","cardsValue","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","suits","clubs","diamonds","hearts","spades","symbols","deck","suit","symbol","isBlueCard","isGoldCard","getCardEffectiveValue","card","values","getCardValues","getCardsValues","cards","options","numbers","numbersDictionary","dictionary","next","removeDuplicates","filter","peeking","isHoleCard","reducedValues","currentValues","getRandomCard","randomCard","getRandomSuit","simpleSymbolToSymbol","simpleSymbol","tenPointsSymbols","symbolToSimpleSymbol","valueToSymbol","number","String","isSoftHandCode","handCode","includes","isSplitHandCode","areHandsSplitAces","hands","canSplit","hand","handsNumber","splitsNumber","createDealerHand","dealerSymbol","dealerCards","holeCard","push","createHand","bet","dealCard","getCardForUntrainedHand","playerHand","trainingHands","trainingProgress","isPlayerHandSoft","playerHandValues","valuesToUntrainedHands","trainingHand","valueToReachThisHand","isHandUntrainedForDealerSymbol","code","untrained","softDifference","parseInt","hardDifference","value","getHandEffectiveValue","effectiveValue","some","v","reverse","find","getHandValidValues","handCodeToHand","handSymbols","getSplitHandSymbols","handValues","s","complementarySymbol","getSoftHandSymbols","minValue","max","maxValue","min","firstValue","secondValue","getHardHandSymbols","handToHandCode","c","join","hasHoleCard","isBlackjack","isBust","isFinished","isAcesPairHand","isAcesPair","hitSplitAces","revealDealerHoleCard","getCurrentHand","handIndex","resolveHands","dealerHand","handOutcome","playerHandValue","dealerHandValue","bust","blackjack","dealerWins","playerWins","outcome","resolveHand","allDealerSymbols","getUntrainedDealerSymbols","trainingHandStatus","passed","getDefaultCasinoRules","blackjackPeek","dealerHitsSoft17","doubling","nineToElevenSoft","doublingAfterSplit","three","alwaysHit","alwaysStand","getHandDecisionSetLevel","decisionSet","reduced","previousValue","level","handDecisionSetGetters","Split2s","none","Split3s","Split4s","Split5s","tenToEleven","Split6s","Split7s","Split8s","Split9s","Split10s","SplitAs","Soft13","anyPair","Soft14","Soft15","Soft16","Soft17","Soft18","Soft19","Soft20","Hard5","Hard6","Hard7","Hard8","Hard9","nineToEleven","Hard10","Hard11","Hard12","Hard13","Hard14","Hard15","Hard16","Hard17","Hard18","Hard19","Hard20","getActiveTrainingHands","goldHandsLevels","getGoldHandsNumber","getTrainingHands","dependencies","name","forEach","getUntrainedTrainingHands","allTrainingPairsNumber","getSpecificTrainingPair","dealer","getAreGoldHandsBlockingProgress","gameConfig","useGoldHands","getDefaultTrainingStatus","isCompleted","missedTrainingPairs","reducedTrainingProgress","reducedDealerSymbols","isTrainingCompleted","reduceTrainingPairProgress","trainingPairStatus","reducedTrainingStatus","missed","retrieveTrainingStatus","trainingStatus","reduceTrainingHandProgress","getNextTrainingStatus","isHit","currentHandCode","currentDealerSymbol","currentHandTrainingStatus","nextAttemptedTrainingPairs","nextMissedTrainingPairs","missedTrainingPair","getNextMissedTrainingPairs","nextPassedTrainingHands","mustDealerDraw","handEffectiveValue","evaluateDynamicDecision","dynamicDecision","dynamicConditions","canDouble","canSurrender","DoublingPicker","paddingTop","flex","Picker","selectedValue","onValueChange","newValue","nextDoubling","nextCasinoRules","setCasinoRules","Item","label","RuleSwitcher","SwitchCore","Switch","isDisabled","ruleName","marginRight","trackColor","true","false","hideLabel","SplitsNumberPicker","nextSplitsNumber","one","two","actionsAbbreviationMap","handCodesAbbreviationMap","cellWidth","TextCell","marginVertical","paddingVertical","textAlign","BasicStrategyTable","useState","ScrollView","paddingHorizontal","key","cardSymbol","action","pushSound","soundQueue","sounds","isActive","playNextSound","nextSound","pop","setTimeout","CardComponent","cardSlideSound","setCardSlideSound","animateCard","skipAnimation","parallel","animationsDuration","isSoundEnabled","Audio","Sound","createAsync","cardSlideSoundMp3","volume","result","setValue","cardColor","borderRadius","translateY","blueCardsInfo","goldHandsInfo","HandComponent","displayValues","isCurrentHand","flexWrap","maxWidth","index","BlueCardsInfo","hardFourteen","splitFour","margin","fontStyle","Divider","HelpIcon","textStyle","ConfigMenu","setAreGoldHandsBlockingProgress","setGoldHandsLevels","goldHandsNumber","setGoldHandsNumber","isDealerAnimationEnabled","setIsDealerAnimationEnabled","setIsSoundEnabled","setTrainingHands","useBlueCards","setUseGoldHands","isSomeLevelSelected","_goldHandsLevels","areGoldHandsBlockingProgressHandler","nextGoldHandsLevels","nextUseGoldHands","nextTrainingHands","casinoRuleChangeHandler","nextGoldHandsNumber","isSaveButtonEnabled","contentContainerStyle","paddingBottom","untrainedPairsPriority","handLevel","numberKey","disabled","paddingLeft","nextGameConfig","setGameConfig","phase","finished","onboarding","Alert","alert","nextTrainingStatus","setTrainingStatus","GoldHandsInfo","HandDecisionsTable","handDecisionSet","simpleCardSymbol","levelsColor","1","2","3","4","GoldHandsLevelsInfo","hardEight","splitNine","marginHorizontal","HandDecisions","route","params","dependency","MissedPairs","handName","trainingPair","startTrainingRound","Onboarding","startOnboardingHandler","skipOnboardingHandler","Actions","isPlayerTurn","isDoublingAvailable","isSurrenderAvailable","activeOptionalButtons","Number","optionalButtonsWidth","untrainedTrainingHands","randomTrainingHand","untrainedDealerSymbols","randomDealerSymbol","getRandomTrainingPair","isHitEnabled","handlers","isSplitEnabled","isDoubleEnabled","isSurrenderEnabled","textProperties","DecisionEvaluationComponent","decisionEvaluation","showDecisionsHandler","Table","minHeight","handDecisions","lastActionHand","TrainingCompleted","TrainingPairs","unfoldedHand","setUnfoldedHand","navigationListener","Stack","createStackNavigator","App","currentRoute","setCurrentRoute","setDealerHand","setDecisionEvaluation","decisionEvaluationTimeout","setDecisionEvaluationTimeout","setOnBoardingStep","setPeeking","setPhase","createPlayer","setPlayer","setSounds","navigationRef","useRef","currentGameConfig","Promise","all","getItem","storedGameConfig","parse","hitSoundMp3","missSoundMp3","results","miss","errors","console","log","current","getProgress","addListener","data","state","routes","currentHand","isHandWithTwoCards","isSingleHand","contains9To11","handValue","is10To11","is9To11","updateOnBoardingStep","direction","nextStep","hasCompletedOnboarding","_trainingStatus","clearTimeout","nextTimeout","nextDealerHand","handleDealerTurn","nextPlayer","initialHand","initializeHands","visibleCard","canBeDealerBlackjack","cardValues","isDealerBlackjack","finishCurrentHand","isLastHand","nextHand","nextCard","startNextHand","evaluatePlayerDecision","playerDecision","nextDecisionEvaluation","optimalDecision","evaluateDecision","trainingCompleted","doubleHandler","doubleCurrentHand","hitHandler","hitCurrentHand","standHandler","standCurrentHand","splitHandler","firstHand","secondHand","splice","splitCurrentHand","surrenderHandler","surrenderCurrentHand","NavigationContainer","ref","StatusBar","hidden","Navigator","screenOptions","headerShown","cardStyle","Screen","component","_gameConfig","goldHandsLevelsInfo"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,wECU/BC,EAWAC,EAaAC,ECvBAC,EAWAC,EAQAC,EC5BAC,EAoBAC,EAaAC,E,kJFzBAR,K,eAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAWAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,E,SAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,SAAAA,E,UAAAA,M,cAaAC,K,SAAAA,E,UAAAA,E,UAAAA,M,cCvBAC,K,+BAAAA,E,uCAAAA,E,oBAAAA,E,0CAAAA,E,8BAAAA,E,qBAAAA,E,6BAAAA,E,uBAAAA,M,cAWAC,O,eAAAA,I,6BAAAA,I,+BAAAA,I,uCAAAA,I,sBAAAA,M,cAQAC,O,eAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,cC5BAC,K,UAAAA,E,eAAAA,M,cAoBAC,K,0BAAAA,E,8BAAAA,E,wBAAAA,E,4BAAAA,E,wCAAAA,E,gCAAAA,E,wCAAAA,E,qCAAAA,M,cAaAC,K,gBAAAA,E,cAAAA,E,uBAAAA,M,SC1BAC,EAqCAC,ECtCAC,E,wBDCAF,K,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,cAqCAC,K,sBAAAA,E,YAAAA,E,yBAAAA,E,yBAAAA,E,aAAAA,M,cCtCAC,K,wCAAAA,E,8BAAAA,E,wBAAAA,E,8BAAAA,E,0CAAAA,E,8BAAAA,E,sBAAAA,E,0BAAAA,E,wBAAAA,E,cAAAA,E,sCAAAA,E,8BAAAA,E,iDAAAA,M,KAgBL,ICtBKC,EAuBAC,ECzBAC,EFwBCC,EAAmBJ,EAAWK,O,SCtB/BJ,K,0BAAAA,E,wCAAAA,E,0BAAAA,E,oCAAAA,E,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","file":"static/js/app.336a283d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hit.dc863917.mp3\";","module.exports = __webpack_public_path__ + \"static/media/miss.497d59f1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-slide.d80ce25b.mp3\";","import { Dictionary } from './dictionary';\r\n\r\nexport interface Card {\r\n    isBlueCard: boolean;\r\n    isGoldCard: boolean;\r\n    isHoleCard?: boolean;\r\n    suit: CardSuit;\r\n    symbol: CardSymbol;\r\n}\r\n\r\nexport enum CardSuit {\r\n    clubs = '\\u2663',\r\n    diamonds = '\\u2666',\r\n    hearts = '\\u2665',\r\n    spades = '\\u2660'\r\n}\r\n\r\nexport type CardSymbol = SimpleCardSymbol | SpecialCardSymbol;\r\n\r\nexport type CardValues = Dictionary<number[], CardSymbol>;\r\n\r\nexport enum SimpleCardSymbol {\r\n    Ace = 'A',\r\n    Two = '2',\r\n    Three = '3',\r\n    Four = '4',\r\n    Five = '5',\r\n    Six = '6',\r\n    Seven = '7',\r\n    Eight = '8',\r\n    Nine = '9',\r\n    Ten = '10'\r\n}\r\n\r\nexport enum SpecialCardSymbol {\r\n    Jack = 'J',\r\n    Queen = 'Q',\r\n    King = 'K'\r\n}\r\n\r\nexport type TenPointsCardSymbol = SimpleCardSymbol.Ten | SpecialCardSymbol;\r\n","export interface CasinoRules {\r\n    [CasinoRulesKeys.blackjackPeek]: boolean;\r\n    [CasinoRulesKeys.dealerHitsSoft17]: boolean;\r\n    [CasinoRulesKeys.doubling]: Doubling;\r\n    [CasinoRulesKeys.doublingAfterSplit]: boolean;\r\n    [CasinoRulesKeys.hitSplitAces]: boolean;\r\n    [CasinoRulesKeys.holeCard]: boolean;\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber;\r\n    [CasinoRulesKeys.surrender]: boolean;\r\n}\r\n\r\nexport enum CasinoRulesKeys {\r\n    blackjackPeek = 'Blackjack Peek',\r\n    dealerHitsSoft17 = 'Dealer hits soft 17',\r\n    doubling = 'Doubling',\r\n    doublingAfterSplit = 'Doubling after split',\r\n    hitSplitAces = 'Hit split aces',\r\n    holeCard = 'Hole card',\r\n    splitsNumber = 'Splits number',\r\n    surrender = 'Surrender'\r\n}\r\n\r\nexport enum Doubling {\r\n    none = 0,\r\n    tenToEleven = 1,\r\n    nineToEleven = 2,\r\n    nineToElevenSoft = 3,\r\n    anyPair = 4\r\n}\r\n\r\nexport enum SplitsNumber {\r\n    none = 0,\r\n    one = 1,\r\n    two = 2,\r\n    three = 3\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\n\r\nexport enum BaseDecisions {\r\n    hit = 'Hit',\r\n    stand = 'Stand'\r\n}\r\n\r\nexport interface DecisionEvaluation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    dynamicDecision: DynamicDecision;\r\n    handName: string;\r\n    isHit: boolean;\r\n}\r\n\r\nexport interface DynamicConditions {\r\n    canDouble: boolean;\r\n    canSplit: boolean;\r\n    canSurrender: boolean;\r\n}\r\n\r\nexport type DynamicDecision = BaseDecisions | DynamicDecisions;\r\n\r\nexport enum DynamicDecisions {\r\n    double_hit = 'Double / Hit',\r\n    double_stand = 'Double / Stand',\r\n    split_hit = 'Split / Hit',\r\n    split_stand = 'Split / Stand',\r\n    split_surrender_hit = 'Split / Surrender',\r\n    surrender_hit = 'Surrender / Hit',\r\n    surrender_split_hit = 'Surrender / Split',\r\n    surrender_stand = 'Surrender / Stand'\r\n}\r\n\r\nexport type PlayerDecision = BaseDecisions | PlayerDecisions;\r\n\r\nexport enum PlayerDecisions {\r\n    double = 'Double',\r\n    split = 'Split',\r\n    surrender = 'Surrender'\r\n}\r\n","import { Card } from './card';\r\n\r\nexport interface Hand {\r\n    bet: number;\r\n    cards: Card[];\r\n    outcome?: string;\r\n    values: number[];\r\n}\r\n\r\nexport enum HandCode {\r\n    Split2s = '2,2',\r\n    Split3s = '3,3',\r\n    Split4s = '4,4',\r\n    Split5s = '5,5',\r\n    Split6s = '6,6',\r\n    Split7s = '7,7',\r\n    Split8s = '8,8',\r\n    Split9s = '9,9',\r\n    Split10s = '10,10',\r\n    SplitAs = 'A,A',\r\n    Soft13 = '3/13',\r\n    Soft14 = '4/14',\r\n    Soft15 = '5/15',\r\n    Soft16 = '6/16',\r\n    Soft17 = '7/17',\r\n    Soft18 = '8/18',\r\n    Soft19 = '9/19',\r\n    Soft20 = '10/20',\r\n    Hard5 = '5',\r\n    Hard6 = '6',\r\n    Hard7 = '7',\r\n    Hard8 = '8',\r\n    Hard9 = '9',\r\n    Hard10 = '10',\r\n    Hard11 = '11',\r\n    Hard12 = '12',\r\n    Hard13 = '13',\r\n    Hard14 = '14',\r\n    Hard15 = '15',\r\n    Hard16 = '16',\r\n    Hard17 = '17',\r\n    Hard18 = '18',\r\n    Hard19 = '19',\r\n    Hard20 = '20'\r\n}\r\n\r\nexport enum HandOutcome {\r\n    blackjack = 'Blackjack',\r\n    bust = 'Bust',\r\n    dealerWins = 'Dealer wins',\r\n    playerWins = 'Player wins',\r\n    push = 'Push'\r\n}\r\n","import { Route } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { TrainingHand } from './training-hand';\r\n\r\nexport type AppNavigation = StackNavigationProp<RouteParams>;\r\n\r\nexport type AppRoute<T extends RouteNames> = Route<T, RouteParams[T]>;\r\n\r\nexport enum RouteNames {\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    blueCardsInfo = 'blueCardsInfo',\r\n    configMenu = 'configMenu',\r\n    goldHandsInfo = 'goldHandsInfo',\r\n    goldHandsLevelsInfo = 'goldHandsLevelsInfo',\r\n    handDecisions = 'handDecisions',\r\n    handLevel = 'handLevel',\r\n    missedPairs = 'missedPairs',\r\n    onboarding = 'onboarding',\r\n    table = 'table',\r\n    trainingCompleted = 'trainingCompleted',\r\n    trainingPairs = 'trainingPairs',\r\n    untrainedPairsPriority = 'untrainedPairsPriority'\r\n}\r\n\r\nexport const initialRouteName = RouteNames.table;\r\n\r\nexport type RouteParams = {\r\n    [RouteNames.basicStrategyTable]: undefined;\r\n    [RouteNames.blueCardsInfo]: undefined;\r\n    [RouteNames.configMenu]: undefined;\r\n    [RouteNames.goldHandsInfo]: undefined;\r\n    [RouteNames.goldHandsLevelsInfo]: undefined;\r\n    [RouteNames.handDecisions]: {\r\n        trainingHand: TrainingHand;\r\n    };\r\n    [RouteNames.handLevel]: undefined;\r\n    [RouteNames.missedPairs]: undefined;\r\n    [RouteNames.onboarding]: undefined;\r\n    [RouteNames.table]: undefined;\r\n    [RouteNames.trainingCompleted]: undefined;\r\n    [RouteNames.trainingPairs]: undefined;\r\n    [RouteNames.untrainedPairsPriority]: undefined;\r\n};\r\n","import { AppNavigation } from './navigation';\r\n\r\nexport enum OnBoardingSections {\r\n    appSettings = 'appSettings',\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    casinoRules = 'casinoRules',\r\n    configMenuButton = 'configMenuButton',\r\n    precisionIndicator = 'precisionIndicator',\r\n    progressIndicator = 'progressIndicator',\r\n    resetTraining = 'resetTraining',\r\n    tableActions = 'tableActions',\r\n    tableDealerHand = 'tableDealerHand',\r\n    tableFeedback = 'tableFeedback',\r\n    tablePlayerHands = 'tablePlayerHands'\r\n}\r\n\r\nexport type OnBoardingStep = {\r\n    activeSection?: OnBoardingSections[];\r\n    event?: OnBoardingStepEvent;\r\n    hideNextButton?: boolean;\r\n    hidePreviousButton?: boolean;\r\n    load?: (navigation: AppNavigation) => void;\r\n    text: string;\r\n};\r\n\r\nexport enum OnBoardingStepEvent {\r\n    startRound = 0,\r\n    playerAction = 1\r\n}\r\n","export enum Phases {\r\n    dealer = 'dealer',\r\n    finished = 'finished',\r\n    player = 'player'\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\nimport { Hand, HandCode } from './hand';\r\n\r\nexport interface TrainingPair {\r\n    dealer: Hand;\r\n    player: Hand;\r\n}\r\n\r\nexport interface TrainingPairRepresentation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    handCode: HandCode;\r\n}\r\n\r\nexport enum TrainingPairStatus {\r\n    untrained = 0,\r\n    passed = 1,\r\n    missed = 2\r\n}\r\n","import AsyncStorage from '@react-native-community/async-storage';\r\nimport { CasinoRulesKeys, GameConfig, TrainingProgress } from './types';\r\n\r\nconst gameConfigKey = 'gameConfig';\r\nconst hasCompletedOnboardingKey = 'hasCompletedOnboarding';\r\nconst playerEarningsKey = 'playerEarnings';\r\nconst trainingProgressKey = 'trainedHands';\r\n\r\nexport const getGameConfig = (currentGameConfig: GameConfig) =>\r\n    AsyncStorage.getItem(gameConfigKey)\r\n        .then<GameConfig>((value) => {\r\n            const storedGameConfig: Partial<GameConfig> | undefined = value && JSON.parse(value);\r\n            return {\r\n                casinoRules:\r\n                    storedGameConfig && storedGameConfig.casinoRules !== undefined\r\n                        ? {\r\n                              [CasinoRulesKeys.blackjackPeek]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.blackjackPeek\r\n                                        ],\r\n                              [CasinoRulesKeys.dealerHitsSoft17]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.dealerHitsSoft17\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.dealerHitsSoft17\r\n                                        ],\r\n                              [CasinoRulesKeys.doubling]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.doubling]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.doubling],\r\n                              [CasinoRulesKeys.doublingAfterSplit]:\r\n                                  storedGameConfig.casinoRules[\r\n                                      CasinoRulesKeys.doublingAfterSplit\r\n                                  ] !== undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ],\r\n                              [CasinoRulesKeys.hitSplitAces]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces],\r\n                              [CasinoRulesKeys.holeCard]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.holeCard]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.holeCard],\r\n                              [CasinoRulesKeys.splitsNumber]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.splitsNumber],\r\n                              [CasinoRulesKeys.surrender]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                          }\r\n                        : currentGameConfig.casinoRules,\r\n                goldHandsLevels:\r\n                    storedGameConfig && storedGameConfig.goldHandsLevels !== undefined\r\n                        ? storedGameConfig.goldHandsLevels\r\n                        : currentGameConfig.goldHandsLevels,\r\n                isDealerAnimationEnabled:\r\n                    storedGameConfig && storedGameConfig.isDealerAnimationEnabled !== undefined\r\n                        ? storedGameConfig.isDealerAnimationEnabled\r\n                        : currentGameConfig.isDealerAnimationEnabled,\r\n                isSoundEnabled:\r\n                    storedGameConfig && storedGameConfig.isSoundEnabled !== undefined\r\n                        ? storedGameConfig.isSoundEnabled\r\n                        : currentGameConfig.isSoundEnabled,\r\n                useBlueCards:\r\n                    storedGameConfig && storedGameConfig.useBlueCards !== undefined\r\n                        ? storedGameConfig.useBlueCards\r\n                        : currentGameConfig.useBlueCards,\r\n                useGoldHands:\r\n                    storedGameConfig && storedGameConfig.useGoldHands !== undefined\r\n                        ? storedGameConfig.useGoldHands\r\n                        : currentGameConfig.useGoldHands\r\n            };\r\n        })\r\n        .catch(() => currentGameConfig);\r\n\r\nexport const getHasCompletedOnboarding = () =>\r\n    AsyncStorage.getItem(hasCompletedOnboardingKey)\r\n        .then<boolean>((value) => (value ? JSON.parse(value) : false))\r\n        .catch(() => false);\r\n\r\nexport const getPlayerEarnings = () =>\r\n    AsyncStorage.getItem(playerEarningsKey)\r\n        .then<number>((value) => (value ? parseInt(value) : 0))\r\n        .catch(() => 0);\r\n\r\nexport const getTrainingProgress = () =>\r\n    AsyncStorage.getItem(trainingProgressKey)\r\n        .then<TrainingProgress>((value) => (value ? JSON.parse(value) : undefined))\r\n        .catch(() => undefined);\r\n\r\nexport const updateGameConfig = (gameConfig: GameConfig) => {\r\n    AsyncStorage.setItem(gameConfigKey, JSON.stringify(gameConfig)).catch(() => {});\r\n};\r\n\r\nexport const updateHasCompletedOnboarding = (hasCompletedOnboarding: boolean) => {\r\n    AsyncStorage.setItem(\r\n        hasCompletedOnboardingKey,\r\n        JSON.stringify(hasCompletedOnboarding)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarnings = (playerEarnings: number) => {\r\n    AsyncStorage.setItem(playerEarningsKey, JSON.stringify(playerEarnings)).catch(() => {});\r\n};\r\n\r\nexport const updateTrainingProgress = (TrainingProgress: TrainingProgress) => {\r\n    AsyncStorage.setItem(trainingProgressKey, JSON.stringify(TrainingProgress)).catch(() => {});\r\n};\r\n","import { BaseDecisions, Dictionary, DynamicDecisions, PlayerDecisions } from './types';\r\n\r\nexport const doubleColor = '#a1a669';\r\nexport const hitColor = '#428bca';\r\nexport const splitColor = '#5cb85c';\r\nexport const standColor = '#46b8da';\r\nexport const surrenderColor = '#8f6088';\r\n\r\nexport const dangerColor = '#dc3545';\r\nexport const warningColor = '#ffc107';\r\n\r\nexport const tableColor = '#088446';\r\n\r\nexport const colors: Dictionary<string, BaseDecisions | DynamicDecisions | PlayerDecisions> = {\r\n    [BaseDecisions.hit]: hitColor,\r\n    [BaseDecisions.stand]: standColor,\r\n    [DynamicDecisions.double_hit]: doubleColor,\r\n    [DynamicDecisions.double_stand]: doubleColor,\r\n    [DynamicDecisions.split_hit]: splitColor,\r\n    [DynamicDecisions.split_stand]: splitColor,\r\n    [DynamicDecisions.split_surrender_hit]: splitColor,\r\n    [DynamicDecisions.surrender_hit]: surrenderColor,\r\n    [DynamicDecisions.surrender_split_hit]: surrenderColor,\r\n    [DynamicDecisions.surrender_stand]: surrenderColor,\r\n    [PlayerDecisions.double]: doubleColor,\r\n    [PlayerDecisions.split]: splitColor,\r\n    [PlayerDecisions.surrender]: surrenderColor\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, initialRouteName, RouteNames } from '../../types';\r\n\r\nexport interface ConfigButtonProps {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nexport const ConfigButton: React.FC<ConfigButtonProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          if (props.routeName === initialRouteName) {\r\n                              props.navigation.navigate(RouteNames.configMenu);\r\n                          } else {\r\n                              props.navigation.goBack();\r\n                          }\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {props.routeName === initialRouteName ? (\r\n                <React.Fragment>\r\n                    <Svg height={24} viewBox=\"340 140 280 279.416\" width={24}>\r\n                        <Path\r\n                            fill=\"white\"\r\n                            d=\"M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083\r\n\tc-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333\r\n\tL362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25\r\n\tc2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916\r\n\th51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25\r\n\tc4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667\r\n\tS533.667,250.25,533.667,280S509.75,333.666,480,333.666z\"\r\n                        />\r\n                    </Svg>\r\n                    {props.areGoldHandsBlockingProgress && props.progress < 100 && (\r\n                        <View\r\n                            style={{\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                bottom: 8\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'black', fontWeight: 'bold' }}>⚠️</Text>\r\n                        </View>\r\n                    )}\r\n                </React.Fragment>\r\n            ) : (\r\n                <Svg height={24} viewBox=\"0 0 352 512\" width={24}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n                    />\r\n                </Svg>\r\n            )}\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text } from 'react-native';\r\nimport Svg, { G, Path } from 'react-native-svg';\r\nimport { dangerColor, splitColor } from '../../constants';\r\n\r\nexport interface EarningsIndicatorProps {\r\n    earnings: number;\r\n}\r\n\r\nexport const EarningsIndicator: React.FC<EarningsIndicatorProps> = (props) => {\r\n    const earningsColor =\r\n        props.earnings > 0 ? splitColor : props.earnings < 0 ? dangerColor : 'white';\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text style={{ color: earningsColor, fontSize: 20 }}>\r\n                {`${props.earnings > 0 ? '+' : ''}${props.earnings}`}\r\n            </Text>\r\n            <Svg height={24} viewBox=\"0 0 468 468\" width={24} style={{ marginTop: 2 }}>\r\n                <G transform=\"translate(0,468) scale(0.078000,-0.078000)\">\r\n                    <Path\r\n                        fill={earningsColor}\r\n                        d=\"M2600 5595 c0 -237 -3 -305 -12 -305 -7 0 -63 -5 -125 -10 -140 -12\r\n                    -299 -49 -398 -91 -11 -4 -49 -20 -85 -35 -304 -124 -635 -421 -789 -706 -33\r\n                    -63 -80 -169 -88 -202 -35 -143 -41 -258 -23 -421 37 -323 180 -591 420 -785\r\n                    77 -62 83 -66 116 -87 28 -18 244 -126 279 -140 27 -10 103 -36 115 -38 19 -5\r\n                    100 -27 120 -35 59 -20 254 -55 418 -75 l52 -7 0 -515 0 -516 -82 6 c-76 5\r\n                    -198 30 -223 45 -5 4 -12 7 -15 8 -71 14 -269 163 -285 215 -4 11 -10 19 -14\r\n                    19 -12 0 -75 133 -95 200 l-17 55 -410 -3 -410 -2 6 -63 c17 -165 65 -343 132\r\n                    -487 26 -54 99 -185 115 -205 4 -5 27 -35 51 -65 72 -93 202 -215 327 -306 60\r\n                    -44 244 -154 257 -154 5 0 25 -9 44 -19 34 -18 167 -63 264 -90 62 -17 188\r\n                    -31 276 -31 l79 0 0 -325 0 -325 375 0 375 0 2 332 3 333 85 6 c121 9 341 58\r\n                    430 96 8 3 18 7 22 7 3 1 10 4 14 8 4 5 13 8 20 8 16 0 162 70 249 119 39 22\r\n                    77 44 85 48 8 4 20 12 27 17 7 6 36 27 64 46 70 47 221 181 267 237 20 24 47\r\n                    57 60 71 36 42 132 200 162 267 104 232 133 496 79 720 -11 44 -21 89 -24 100\r\n                    -7 28 -110 235 -132 264 -193 254 -402 410 -708 524 -138 51 -348 95 -495 102\r\n                    -58 3 -129 8 -158 11 l-52 5 2 502 3 502 58 -2 c154 -5 367 -94 455 -188 66\r\n                    -71 103 -148 110 -230 l5 -65 431 0 432 0 -4 38 c-4 47 -29 151 -52 222 -141\r\n                    430 -441 791 -800 962 -133 63 -169 78 -235 94 -5 2 -44 12 -86 23 -42 11\r\n                    -123 25 -180 31 -57 6 -112 13 -121 16 -17 5 -18 28 -18 290 l0 284 -375 0\r\n                    -375 0 0 -305z m0 -1585 l0 -450 -57 0 c-52 1 -84 6 -159 23 -30 7 -158 59\r\n                    -164 66 -3 3 -18 13 -35 21 -54 28 -151 128 -186 192 -32 59 -34 69 -34 158 0\r\n                    69 6 111 20 154 56 167 269 281 528 285 l87 1 0 -450z m975 -1485 c219 -17\r\n                    399 -118 472 -266 46 -93 48 -281 3 -367 -80 -153 -329 -259 -612 -261 l-88\r\n                    -1 0 448 c0 247 3 452 7 456 4 4 37 4 73 2 36 -3 101 -8 145 -11z\"\r\n                    />\r\n                </G>\r\n            </Svg>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface PrecisionIndicatorProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    precision: number;\r\n}\r\n\r\nexport const PrecisionIndicator: React.FC<PrecisionIndicatorProps> = (props) => {\r\n    const precision = Math.floor(props.precision * 1000) / 10;\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.missedPairs);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{precision}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M784.5,368.7L990,163.2l-166.9,11.6L834.7,7.9L629.2,213.4l-9,128.5L499.6,462.6c-10.1,0.1-20.1,3.9-27.8,11.6c-15.5,15.5-15.5,40.6,0,56.1c15.5,15.5,40.6,15.5,56.1,0c9.6-9.6,13.3-23,10.9-35.4L656,377.7L784.5,368.7z M671.4,232.6l112-112l-7.1,101l101-7l-112,112l-101,7L671.4,232.6z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M967.8,357.1l-35.6,33.2c10.7,41.4,15.4,84.1,13.9,127.5c-8.6,246-215.7,439.2-461.7,430.6c-246-8.6-439.2-215.7-430.6-461.7c8.6-246,215.7-439.2,461.7-430.6c28.6,1,56.9,5,84.6,11.4l37.7-35.2c-39.3-11.5-79.9-18.2-120.9-19.6C247,3.3,19.7,215.2,10.3,485.2C0.9,755.1,212.8,982.3,482.7,991.8c269.9,9.4,497.2-202.5,506.6-472.4C991.3,463.9,984,409.5,967.8,357.1z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M698.1,426.1c7,18.4,11.6,37.7,13.3,57.6c10.2,116.6-76.4,219.9-193.1,230.1C401.7,724,298.5,637.4,288.3,520.8c-10.2-116.6,76.4-219.9,193-230.1c25.8-2.3,51.7,0.3,76.3,7.3l-4-45.6c-24.8-5.3-50.5-7.1-76.1-4.8C337.1,259.8,232.8,384.1,245,524.5C257.3,665,381.6,769.3,522.1,757C662.6,744.7,766.9,620.5,754.6,480c-1.7-19.8-5.8-39.1-11.9-57.7L698.1,426.1z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface NavBarProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n}\r\n\r\nexport const ProgressIndicator: React.FC<NavBarProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.trainingPairs);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{props.progress}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M819.5,386.3h-2.5c-18.4,0-33.4,5.3-48,14.3c-12.7-37.1-45-63.7-86.6-63.7c-18.4,0-35.9,5.3-50.4,14.3c-12.7-37-45-63.7-86.6-63.7c-16.2,0-31.3,4.1-44.7,11.2v-95.3c0-51.9-39.3-94-91.6-94s-94.7,42.1-94.7,94v365l-57.5-57.3c-37-36.7-102.4-31.5-133.9,0s-52.1,94.9-7,140l264.5,262.7c5.5,5.4,11.5,9.9,17.8,13.8c48.2,39.3,103.5,62.6,220.3,62.6c266.9,0,291.6-144,291.6-321.6v-188C910.1,428.4,871.8,386.3,819.5,386.3z M860.3,668.4c0,150.3-0.7,272.1-241.8,272.1c-102.1,0-163.4-22.8-209.9-68.9L158.3,622.9c-22.2-22.2-16.6-50.5,1.6-68.6c18.1-18.1,51.4-18.8,68.9-1.4c0,0,43.9,43.7,81.8,81.3c28.6,28.5,53.8,53.5,53.8,53.5V213.2c0-24.6,20.1-44.5,44.9-44.5c24.8,0,41.7,19.9,41.7,44.5V515h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.4-0.5-5h0.5V391.3c0-24.6,17.9-44.5,42.7-44.5c0,0,43.9-0.6,43.9,44.5v163.3h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.3-0.5-5h0.5V440.8c0-24.6,17.6-44.5,42.4-44.5c0,0,44.8,2.8,44.8,44.5v143.5h0.5c-0.3,1.6-0.5,3.3-0.5,4.9c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.3-11.1,24.3-24.7c0-1.7-0.2-3.3-0.5-4.9h0.5v-98c0-24.6,18.5-44.5,43.3-44.5c0,0,43.4-1.8,43.4,44.5C860.3,486.3,860.3,628.4,860.3,668.4z M277.5,343.4v-83.1c-7.9-17.7-12.4-37.3-12.4-58c0-78.8,63.9-142.7,142.7-142.7s142.7,63.9,142.7,142.7c0,10.8-1.3,21.2-3.6,31.3c17.9,0.7,34.1,8.1,45.9,20.1c4.6-16.4,7.3-33.5,7.3-51.4C600,96.1,513.9,10,407.7,10S215.4,96.1,215.4,202.3C215.4,258.1,239.4,308.3,277.5,343.4z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import { OnBoardingSections, OnBoardingStep, OnBoardingStepEvent, RouteNames } from '../types';\r\n\r\nexport const onBoardingSteps: OnBoardingStep[] = [\r\n    {\r\n        activeSection: [OnBoardingSections.tableActions],\r\n        event: OnBoardingStepEvent.startRound,\r\n        hideNextButton: true,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click Random to start training a random pair'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableDealerHand, OnBoardingSections.tablePlayerHands],\r\n        hidePreviousButton: true,\r\n        text: 'training pair = player hand + dealer up card'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tablePlayerHands],\r\n        text: 'This is your hand'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableDealerHand],\r\n        text: \"This is the dealer's hand\"\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableActions],\r\n        event: OnBoardingStepEvent.playerAction,\r\n        hideNextButton: true,\r\n        hidePreviousButton: true,\r\n        text: 'Chose an action for each of your hands'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.tableFeedback],\r\n        hidePreviousButton: true,\r\n        text: 'Confirm whether you chose the right action'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.progressIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of trained pairs'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.progressIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.trainingPairs);\r\n        },\r\n        text: 'Click on it to train pairs or view their status'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.precisionIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of passed pairs'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.precisionIndicator],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.missedPairs);\r\n        },\r\n        text: \"Click on it to see the pairs you've missed\"\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.configMenuButton],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click here to access the configuration menu'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.basicStrategyTable],\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.configMenu);\r\n        },\r\n        text: 'View and memorize the basic strategy table'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.casinoRules],\r\n        text: 'Chose the casino rules you want to train with'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.appSettings],\r\n        text: 'Speed up your training with additional options'\r\n    },\r\n    {\r\n        activeSection: [OnBoardingSections.resetTraining],\r\n        text: 'Start training over and master basic strategy'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { StyleProp, View, ViewStyle } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { OnBoardingSections } from '../types';\r\n\r\nexport interface OnBoardingSectionProps {\r\n    isHighlighted?: OnBoardingSections | boolean;\r\n    onBoardingStep: number;\r\n    style?: StyleProp<ViewStyle> | ((isHighlighted: boolean) => StyleProp<ViewStyle>);\r\n}\r\n\r\nexport const OnBoardingSection: React.FC<OnBoardingSectionProps> = (props) => {\r\n    const isOnboardingActive = props.onBoardingStep > -1;\r\n    const isHighlighted =\r\n        isOnboardingActive &&\r\n        (typeof props.isHighlighted === 'boolean'\r\n            ? props.isHighlighted\r\n            : props.isHighlighted !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep] &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection!.indexOf(props.isHighlighted) >\r\n                  -1);\r\n    const style =\r\n        props.style && typeof props.style === 'function' ? props.style(isHighlighted) : props.style;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                width: '100%',\r\n                ...(style as {})\r\n            }}\r\n        >\r\n            {props.children}\r\n            {isOnboardingActive && !isHighlighted && (\r\n                <View\r\n                    style={{\r\n                        backgroundColor: 'black',\r\n                        opacity: 0.5,\r\n                        top: 0,\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        right: 0,\r\n                        left: 0\r\n                    }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { Animated, View } from 'react-native';\r\nimport { tableColor } from '../constants';\r\nimport { AppNavigation, OnBoardingSections, Player } from '../types';\r\nimport { ConfigButton } from './nav-bar-items/config-button';\r\nimport { EarningsIndicator } from './nav-bar-items/earnings-indicator';\r\nimport { PrecisionIndicator } from './nav-bar-items/precision-indicator';\r\nimport { ProgressIndicator } from './nav-bar-items/progress-indicator';\r\nimport { OnBoardingSection } from './onboarding-section';\r\n\r\nexport interface NavBarProps {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    attemptedTrainingPairs: number;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    player: Player;\r\n    passedTrainingPairs: number;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nconst shakeAmplitude = 6;\r\nconst shakeDuration = 40;\r\nconst useNativeDriver = true;\r\n\r\nconst animateIndicator = (position: Animated.Value) => {\r\n    Animated.sequence([\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: 0,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        })\r\n    ]).start();\r\n};\r\n\r\nexport const NavBar: React.FC<NavBarProps> = (props) => {\r\n    const precision =\r\n        props.attemptedTrainingPairs > 0\r\n            ? props.passedTrainingPairs / props.attemptedTrainingPairs\r\n            : 0;\r\n\r\n    const earningsPosition = useMemo(() => new Animated.Value(0), []);\r\n    const precisionPosition = useMemo(() => new Animated.Value(0), []);\r\n    const progressPosition = useMemo(() => new Animated.Value(0), []);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(earningsPosition);\r\n    }, [props.player.cash]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(precisionPosition);\r\n    }, [precision]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(progressPosition);\r\n    }, [props.progress]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                height: 48,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    backgroundColor: 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '25%'\r\n                }}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'center',\r\n                        transform: [{ translateX: earningsPosition }]\r\n                    }}\r\n                >\r\n                    <EarningsIndicator earnings={props.player.cash} />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.precisionIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        alignItems: 'center',\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: precisionPosition }]\r\n                    }}\r\n                >\r\n                    <PrecisionIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        precision={precision}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.progressIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        alignItems: 'center',\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: progressPosition }]\r\n                    }}\r\n                >\r\n                    <ProgressIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        progress={props.progress}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.configMenuButton}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    alignItems: 'center',\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '15%'\r\n                })}\r\n            >\r\n                <ConfigButton\r\n                    areGoldHandsBlockingProgress={props.areGoldHandsBlockingProgress}\r\n                    isEnabled={props.onBoardingStep === -1}\r\n                    navigation={props.navigation}\r\n                    progress={props.progress}\r\n                    routeName={props.routeName}\r\n                />\r\n            </OnBoardingSection>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\n\r\ninterface ButtonProps {\r\n    backgroundColor?: string;\r\n    height: number | string;\r\n    isEnabled: boolean;\r\n    marginBottom?: number;\r\n    marginTop?: number;\r\n    onPress: () => void;\r\n    text: string;\r\n    textColor?: string;\r\n    textSize?: number;\r\n    width: number | string;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = (props) => (\r\n    <TouchableOpacity\r\n        style={{\r\n            height: props.height,\r\n            marginBottom: props.marginBottom,\r\n            marginTop: props.marginTop,\r\n            width: props.width\r\n        }}\r\n        onPress={props.isEnabled ? props.onPress : undefined}\r\n    >\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                backgroundColor: props.backgroundColor,\r\n                height: '100%',\r\n                justifyContent: 'center',\r\n                opacity: props.isEnabled ? 1 : 0.4,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: props.textColor || 'white',\r\n                    fontSize: props.textSize || 20,\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                {props.text}\r\n            </Text>\r\n        </View>\r\n    </TouchableOpacity>\r\n);\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { Button } from './button';\r\n\r\ninterface OnboardingBarProps {\r\n    exitOnboarding: () => void;\r\n    nextStepHandler: () => void;\r\n    onBoardingStep: number;\r\n    previousStepHandler: () => void;\r\n}\r\n\r\nexport const OnboardingBar: React.FC<OnboardingBarProps> = (props) => {\r\n    const currentStep = onBoardingSteps[props.onBoardingStep];\r\n\r\n    return (\r\n        <View style={{ alignItems: 'center', backgroundColor: 'white', flexDirection: 'row' }}>\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep > 0 && !currentStep.hidePreviousButton && (\r\n                    <Button\r\n                        height={56}\r\n                        isEnabled={true}\r\n                        onPress={props.previousStepHandler}\r\n                        text=\"⬅️\"\r\n                        textColor=\"black\"\r\n                        textSize={24}\r\n                        width=\"100%\"\r\n                    />\r\n                )}\r\n            </View>\r\n\r\n            <View style={{ width: '70%' }}>\r\n                <Text style={{ color: 'black', fontSize: 20, padding: 16 }}>\r\n                    {currentStep.text}\r\n                </Text>\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep < onBoardingSteps.length - 1 &&\r\n                    !currentStep.hideNextButton && (\r\n                        <Button\r\n                            height={56}\r\n                            isEnabled={true}\r\n                            onPress={props.nextStepHandler}\r\n                            text=\"➡️\"\r\n                            textColor=\"black\"\r\n                            textSize={24}\r\n                            width=\"100%\"\r\n                        />\r\n                    )}\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                <Button\r\n                    height={56}\r\n                    isEnabled={true}\r\n                    onPress={props.exitOnboarding}\r\n                    text=\"❌\"\r\n                    textColor=\"black\"\r\n                    textSize={20}\r\n                    width=\"100%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { Dictionary } from './types';\r\n\r\nexport const cartesianProduct = <T, U, R>(\r\n    firstArray: T[],\r\n    secondArray: U[],\r\n    elementBuilder: (t: T, u: U) => R\r\n): R[] => {\r\n    return firstArray.reduce<R[]>((product, x) => {\r\n        return product.concat(secondArray.map((y) => elementBuilder(x, y)));\r\n    }, []);\r\n};\r\n\r\nexport const getObjectKeys = <T extends string | number | symbol>(object: { [key in T]: any }) =>\r\n    Object.keys(object) as T[];\r\n\r\nexport const getRandomItem = <T>(items: T[]) =>\r\n    items[Math.round(Math.random() * (items.length - 1))];\r\n\r\nexport const playSound = (sound: Audio.Sound) =>\r\n    sound\r\n        .stopAsync() // In case is already playing and it hasn't finished yet\r\n        .catch(/* Failing to stop audio is not a critical issue */)\r\n        .then(() => sound.playAsync())\r\n        .catch(/* Failing to play audio is not a critical issue */);\r\n\r\nexport const removeDuplicates = (numbers: number[]): number[] => {\r\n    const numbersDictionary = numbers.reduce<Dictionary<number>>(\r\n        (dictionary, next) => ({ ...dictionary, [next]: next }),\r\n        {}\r\n    );\r\n    return Object.keys(numbersDictionary).map((x) => numbersDictionary[x]);\r\n};\r\n\r\nexport const shuffleArray = <T>(array: T[]) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n};\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CardValues,\r\n    SimpleCardSymbol,\r\n    SpecialCardSymbol,\r\n    TenPointsCardSymbol\r\n} from '../types';\r\nimport { cartesianProduct, getObjectKeys, getRandomItem, removeDuplicates } from '../utils';\r\n\r\nconst cardsValue: CardValues = {\r\n    [SimpleCardSymbol.Ace]: [1, 11],\r\n    [SimpleCardSymbol.Two]: [2],\r\n    [SimpleCardSymbol.Three]: [3],\r\n    [SimpleCardSymbol.Four]: [4],\r\n    [SimpleCardSymbol.Five]: [5],\r\n    [SimpleCardSymbol.Six]: [6],\r\n    [SimpleCardSymbol.Seven]: [7],\r\n    [SimpleCardSymbol.Eight]: [8],\r\n    [SimpleCardSymbol.Nine]: [9],\r\n    [SimpleCardSymbol.Ten]: [10],\r\n    [SpecialCardSymbol.Jack]: [10],\r\n    [SpecialCardSymbol.Queen]: [10],\r\n    [SpecialCardSymbol.King]: [10]\r\n};\r\n\r\nconst suits = [CardSuit.clubs, CardSuit.diamonds, CardSuit.hearts, CardSuit.spades];\r\n\r\nconst symbols = getObjectKeys(cardsValue);\r\n\r\nconst deck = cartesianProduct(\r\n    suits,\r\n    symbols,\r\n    (suit, symbol): Card => ({ isBlueCard: false, isGoldCard: false, suit, symbol })\r\n);\r\n\r\nexport const getCardEffectiveValue = (card: Card): number => {\r\n    const values = getCardValues(card);\r\n    return values[values.length - 1];\r\n};\r\n\r\nexport const getCardsValues = (cards: Card[], options?: { peeking?: boolean }) => {\r\n    const cardsValues = cards\r\n        .filter((card) => options?.peeking || !card.isHoleCard)\r\n        .map((card) => getCardValues(card));\r\n    const cardsAggregatedValues = cardsValues.reduce(\r\n        (reducedValues, currentValues) =>\r\n            cartesianProduct(reducedValues, currentValues, (x, y) => x + y),\r\n        [0]\r\n    );\r\n    return removeDuplicates(cardsAggregatedValues);\r\n};\r\n\r\nconst getCardValues = (card: Card): number[] => cardsValue[card.symbol];\r\n\r\nexport const getRandomCard = (options?: { isHoleCard?: boolean }) => {\r\n    let randomCard = getRandomItem(deck);\r\n    if (options?.isHoleCard) {\r\n        randomCard = { ...randomCard, isHoleCard: true };\r\n    }\r\n    return randomCard;\r\n};\r\n\r\nexport const getRandomSuit = () => getRandomItem(suits);\r\n\r\nexport const revealHoleCard = (card: Card) => {\r\n    card.isHoleCard = false;\r\n};\r\n\r\nexport const simpleSymbolToSymbol = (simpleSymbol: SimpleCardSymbol): CardSymbol =>\r\n    simpleSymbol === SimpleCardSymbol.Ten ? getRandomItem(tenPointsSymbols) : simpleSymbol;\r\n\r\nexport const symbolToSimpleSymbol = (symbol: CardSymbol): SimpleCardSymbol =>\r\n    tenPointsSymbols.indexOf(symbol as SpecialCardSymbol) > -1\r\n        ? SimpleCardSymbol.Ten\r\n        : (symbol as SimpleCardSymbol);\r\n\r\nconst tenPointsSymbols: TenPointsCardSymbol[] = [\r\n    SimpleCardSymbol.Ten,\r\n    SpecialCardSymbol.Jack,\r\n    SpecialCardSymbol.Queen,\r\n    SpecialCardSymbol.King\r\n];\r\n\r\nexport const valueToSymbol = (number: number): CardSymbol =>\r\n    number === 10\r\n        ? getRandomItem(tenPointsSymbols)\r\n        : number === 1\r\n        ? SimpleCardSymbol.Ace\r\n        : (String(number) as CardSymbol);\r\n","import { CardSymbol, HandCode, SimpleCardSymbol } from '../types';\r\nimport { valueToSymbol, simpleSymbolToSymbol } from './card';\r\n\r\nexport const getHardHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const value = parseInt(handCode, 10);\r\n\r\n    const minValue = Math.max(2, value - 10);\r\n    const maxValue = Math.min(value - minValue, 10);\r\n\r\n    let firstValue = Math.floor(Math.random() * (maxValue - minValue) + minValue);\r\n    let secondValue = value - firstValue;\r\n\r\n    // If numbers are equal, we would be training a splittable hand. Change them when possible\r\n    // E.g. Transform a 7,7 (for 14) into a 6,8. Do not transform a 10,10 for 20\r\n    if (firstValue === secondValue && firstValue > minValue && firstValue < maxValue) {\r\n        firstValue++;\r\n        secondValue--;\r\n    }\r\n\r\n    return [valueToSymbol(firstValue), valueToSymbol(secondValue)];\r\n};\r\n\r\nexport const getSoftHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const handValues = handCode.split('/').map((s) => parseInt(s, 10));\r\n    const complementarySymbol = valueToSymbol(handValues[0] - 1);\r\n\r\n    // Make Ace the second card sometimes by randomly reversing the symbols\r\n    return Math.floor(Math.random() * 100) % 2\r\n        ? [complementarySymbol, SimpleCardSymbol.Ace]\r\n        : [SimpleCardSymbol.Ace, complementarySymbol];\r\n};\r\n\r\nexport const getSplitHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const splitSymbols = handCode.split(',') as SimpleCardSymbol[];\r\n    return splitSymbols.map(simpleSymbolToSymbol);\r\n};\r\n\r\nexport const isSoftHandCode = (handCode: HandCode) => handCode.includes('/');\r\n\r\nexport const isSplitHandCode = (handCode: HandCode) => handCode.includes(',');\r\n","import {\r\n    Card,\r\n    CardSymbol,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    Hand,\r\n    HandCode,\r\n    HandOutcome,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomItem } from '../utils';\r\nimport {\r\n    getCardEffectiveValue,\r\n    getCardsValues,\r\n    getRandomCard,\r\n    getRandomSuit,\r\n    revealHoleCard,\r\n    symbolToSimpleSymbol,\r\n    valueToSymbol\r\n} from './card';\r\nimport {\r\n    getHardHandSymbols,\r\n    getSoftHandSymbols,\r\n    getSplitHandSymbols,\r\n    isSoftHandCode,\r\n    isSplitHandCode\r\n} from './hand-code';\r\n\r\nexport const areHandsSplitAces = (hands: Hand[]) =>\r\n    hands.length > 1 &&\r\n    hands[0].cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hands[1].cards[0].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const canBeDealerBlackjack = (hand: Hand) => {\r\n    const visibleCard = hand.cards[0];\r\n    const cardSymbol = symbolToSimpleSymbol(visibleCard.symbol);\r\n    return cardSymbol === SimpleCardSymbol.Ace || cardSymbol === SimpleCardSymbol.Ten;\r\n};\r\n\r\nexport const canDouble = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(hand);\r\n    const isHandWithTwoCards = hand.cards.length === 2;\r\n    const isSingleHand = hands.length === 1;\r\n\r\n    const contains9To11 = hand.values.some((handValue) => [9, 10, 11].indexOf(handValue) > -1);\r\n    const is10To11 = handEffectiveValue === 10 || handEffectiveValue === 11;\r\n    const is9To11 = handEffectiveValue === 9 || is10To11;\r\n\r\n    return (\r\n        isHandWithTwoCards &&\r\n        (casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft && contains9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven && is9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven && is10To11)) &&\r\n        (isSingleHand || casinoRules[CasinoRulesKeys.doublingAfterSplit]) &&\r\n        (!areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces])\r\n    );\r\n};\r\n\r\nexport const canHit = (hands: Hand[], casinoRules: CasinoRules) =>\r\n    !areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces];\r\n\r\nexport const canSplit = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    hand.cards.length === 2 &&\r\n    getCardEffectiveValue(hand.cards[0]) === getCardEffectiveValue(hand.cards[1]) &&\r\n    casinoRules[CasinoRulesKeys.splitsNumber] >= handsNumber;\r\n\r\nexport const canSurrender = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    handsNumber === 1 && hand.cards.length === 2 && casinoRules[CasinoRulesKeys.surrender];\r\n\r\nexport const createDealerHand = (casinoRules: CasinoRules, dealerSymbol?: CardSymbol) => {\r\n    const dealerCards: Card[] = [\r\n        dealerSymbol\r\n            ? {\r\n                  isBlueCard: false,\r\n                  isGoldCard: true,\r\n                  suit: getRandomSuit(),\r\n                  symbol: dealerSymbol\r\n              }\r\n            : getRandomCard()\r\n    ];\r\n\r\n    if (casinoRules[CasinoRulesKeys.holeCard]) {\r\n        dealerCards.push(getRandomCard({ isHoleCard: true }));\r\n    }\r\n\r\n    return createHand(dealerCards);\r\n};\r\n\r\nexport const createHand = (cards: Card[], bet = 1): Hand => ({\r\n    bet,\r\n    cards: cards,\r\n    values: getCardsValues(cards)\r\n});\r\n\r\nexport const dealCard = (hand: Hand, card: Card) => {\r\n    hand.cards.push(card);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n\r\n// Called after player hitting, splitting or starting a split hand. It returns a card that\r\n// turns the current player hand into another untrained hand (against the current dealer card).\r\n// If there are no untrained hands (against the current dealer card) or no untrained hands can\r\n// be reached from the current player hand (e.g. a Hard 20), returns a random card\r\nexport const getCardForUntrainedHand = (\r\n    playerHand: Hand,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n): Card => {\r\n    const isPlayerHandSoft = playerHand.values.length > 1;\r\n    const playerHandValues = getCardsValues(playerHand.cards);\r\n\r\n    const valuesToUntrainedHands = Object.values(trainingHands)\r\n        .map((trainingHand) => {\r\n            const isHandUntrainedForDealerSymbol =\r\n                trainingProgress[trainingHand.code][dealerSymbol] === TrainingPairStatus.untrained;\r\n\r\n            let valueToReachThisHand: number;\r\n\r\n            if (isSplitHandCode(trainingHand.code)) {\r\n                // Untrained split hands can never be reached after user action\r\n                valueToReachThisHand = -1;\r\n            } else if (isSoftHandCode(trainingHand.code)) {\r\n                const currentHandMinValue = parseInt(trainingHand.code.split('/')[0], 10);\r\n                const softDifference = currentHandMinValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 3/13. Can reach 4/14+ but not 3/13- (equal or lower)\r\n                    valueToReachThisHand = softDifference > 0 ? softDifference : -1;\r\n                } else {\r\n                    // E.g. Player hand = 8. Can only 9/19 (soft hand)\r\n                    valueToReachThisHand = softDifference === 1 ? softDifference : -1;\r\n                }\r\n            } else {\r\n                const currentHandHardValue = parseInt(trainingHand.code, 10);\r\n                const hardDifference = currentHandHardValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 5/15. Can reach 12-15 but not 11- (soft hand) neither\r\n                    // 16+ (soft hand)\r\n                    const makesSoftHand = playerHandValues[1] + hardDifference <= 21;\r\n                    valueToReachThisHand =\r\n                        !makesSoftHand && hardDifference > 1 && hardDifference <= 10\r\n                            ? hardDifference\r\n                            : -1;\r\n                } else {\r\n                    // E.g. Player hand = 7. Can reach 9-17 but not 7- (equal or lower),\r\n                    // 8 (soft hand), 14 (split hand) neither 18+ (out of scope)\r\n                    valueToReachThisHand =\r\n                        hardDifference > 1 && // Lower & Soft hand\r\n                        hardDifference <= 10 && // Out of scope\r\n                        hardDifference !== playerHandValues[0] // Split hand\r\n                            ? hardDifference\r\n                            : -1;\r\n                }\r\n            }\r\n\r\n            return isHandUntrainedForDealerSymbol && valueToReachThisHand > -1\r\n                ? valueToReachThisHand\r\n                : -1;\r\n        })\r\n        .filter((value) => value > -1);\r\n\r\n    const nextCard: Card =\r\n        valuesToUntrainedHands.length > 0\r\n            ? {\r\n                  isBlueCard: true,\r\n                  isGoldCard: false,\r\n                  suit: getRandomSuit(),\r\n                  symbol: valueToSymbol(getRandomItem(valuesToUntrainedHands))\r\n              }\r\n            : getRandomCard();\r\n\r\n    return nextCard;\r\n};\r\n\r\nexport const getHandEffectiveValue = (hand: Hand) => {\r\n    let effectiveValue = hand.values[0];\r\n    if (hand.values.some((v) => v < 22)) {\r\n        effectiveValue = [...hand.values].reverse().find((v) => v < 22)!;\r\n    }\r\n    return effectiveValue;\r\n};\r\n\r\nexport const getHandValidValues = (hand: Hand): number[] => {\r\n    return hand.values.some((v) => v < 22) ? hand.values.filter((v) => v < 22) : [hand.values[0]];\r\n};\r\n\r\nexport const handCodeToHand = (handCode: HandCode): Hand => {\r\n    const handSymbols = isSplitHandCode(handCode)\r\n        ? getSplitHandSymbols(handCode)\r\n        : isSoftHandCode(handCode)\r\n        ? getSoftHandSymbols(handCode)\r\n        : getHardHandSymbols(handCode);\r\n\r\n    return createHand(\r\n        handSymbols.map(\r\n            (symbol): Card => ({\r\n                isBlueCard: false,\r\n                isGoldCard: true,\r\n                suit: getRandomSuit(),\r\n                symbol\r\n            })\r\n        )\r\n    );\r\n};\r\n\r\nexport const handToHandCode = (hand: Hand): HandCode => {\r\n    const handSymbols = hand.cards.map((c) => symbolToSimpleSymbol(c.symbol));\r\n    const isSplitHand = handSymbols.length === 2 && handSymbols[0] === handSymbols[1];\r\n\r\n    return isSplitHand\r\n        ? (handSymbols.join(',') as HandCode)\r\n        : (getHandValidValues(hand).join('/') as HandCode);\r\n};\r\n\r\nexport const hasHoleCard = (hand: Hand) => hand.cards.length > 1 && hand.cards[1].isHoleCard;\r\n\r\nconst isAcesPair = (hand: Hand) =>\r\n    hand.cards.length === 2 &&\r\n    hand.cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hand.cards[1].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const isBlackjack = (hand: Hand, handsNumber: number) => {\r\n    return (\r\n        handsNumber === 1 &&\r\n        hand.cards.length === 2 &&\r\n        hand.values.length === 2 &&\r\n        hand.values[0] === 11 &&\r\n        hand.values[1] === 21\r\n    );\r\n};\r\n\r\nconst isBust = (hand: Hand) => {\r\n    return getHandEffectiveValue(hand) > 21;\r\n};\r\n\r\nexport const isDealerBlackjack = (hand: Hand) => {\r\n    const cardValues = getCardsValues(hand.cards, { peeking: true });\r\n    return (\r\n        hand.cards.length === 2 &&\r\n        cardValues.length === 2 &&\r\n        cardValues[0] === 11 &&\r\n        cardValues[1] === 21\r\n    );\r\n};\r\n\r\nexport const isFinished = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const isAcesPairHand = isAcesPair(hand);\r\n    return (\r\n        getHandEffectiveValue(hand) >= 21 ||\r\n        (areHandsSplitAces(hands) &&\r\n            ((isAcesPairHand && !canSplit(hand, hands.length, casinoRules)) ||\r\n                (!isAcesPairHand && !casinoRules[CasinoRulesKeys.hitSplitAces])))\r\n    );\r\n};\r\n\r\nexport const resolveHand = (\r\n    playerHand: Hand,\r\n    handsNumber: number,\r\n    dealerHand: Hand\r\n): HandOutcome => {\r\n    const playerHandValue = getHandEffectiveValue(playerHand);\r\n    const dealerHandValue = getHandEffectiveValue(dealerHand!);\r\n    const handOutcome = isBust(playerHand)\r\n        ? HandOutcome.bust\r\n        : isBlackjack(playerHand, handsNumber) && isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.push\r\n        : isBlackjack(playerHand, handsNumber)\r\n        ? HandOutcome.blackjack\r\n        : isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.dealerWins\r\n        : isBust(dealerHand!)\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue > dealerHandValue\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue === dealerHandValue\r\n        ? HandOutcome.push\r\n        : HandOutcome.dealerWins;\r\n\r\n    playerHand.outcome = handOutcome;\r\n    return handOutcome;\r\n};\r\n\r\nexport const revealDealerHoleCard = (hand: Hand) => {\r\n    revealHoleCard(hand.cards[1]);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n","import {\r\n    Card,\r\n    Hand,\r\n    HandOutcome,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { createHand, dealCard, getCardForUntrainedHand, handToHandCode, resolveHand } from './hand';\r\n\r\nexport const createPlayer = (cash = 0): Player => ({\r\n    cash,\r\n    handIndex: 0,\r\n    hands: [],\r\n    lastActionHand: undefined\r\n});\r\n\r\nexport const hitCurrentHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(currentHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(currentHand, nextCard);\r\n};\r\n\r\nexport const doubleCurrentHand = (player: Player, card: Card) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    dealCard(currentHand, card);\r\n    player.cash -= currentHand.bet;\r\n    currentHand.bet *= 2;\r\n};\r\n\r\nexport const getCurrentHand = (player: Player): Hand => player.hands[player.handIndex];\r\n\r\nexport const initializeHands = (player: Player, initialHand: Hand) => {\r\n    player.cash -= initialHand.bet;\r\n    player.hands = [initialHand];\r\n    player.handIndex = 0;\r\n    player.lastActionHand = undefined;\r\n};\r\n\r\nexport const isLastHand = (player: Player) => player.hands.length - 1 <= player.handIndex;\r\n\r\nexport const resolveHands = (player: Player, dealerHand: Hand) => {\r\n    const earnings = player.hands.reduce((earnings, hand) => {\r\n        const handOutcome = resolveHand(hand, player.hands.length, dealerHand);\r\n        return (\r\n            earnings +\r\n            (handOutcome === HandOutcome.blackjack\r\n                ? hand.bet * 2.5\r\n                : handOutcome === HandOutcome.playerWins\r\n                ? hand.bet * 2\r\n                : handOutcome === HandOutcome.push\r\n                ? hand.bet\r\n                : 0)\r\n        );\r\n    }, 0);\r\n    player.cash += earnings;\r\n};\r\n\r\nexport const splitCurrentHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const firstHand = createHand([currentHand.cards[0]]);\r\n    const secondHand = createHand([currentHand.cards[1]]);\r\n    player.cash -= secondHand.bet;\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(firstHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(firstHand, nextCard);\r\n    player.hands.splice(player.handIndex, 1, firstHand, secondHand);\r\n};\r\n\r\nexport const startNextHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    player.handIndex++;\r\n    const nextHand = player.hands[player.handIndex];\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(nextHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(nextHand, nextCard);\r\n};\r\n\r\nexport const standCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n};\r\n\r\nexport const surrenderCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    player.cash += currentHand.bet / 2;\r\n    player.hands.splice(player.handIndex, 1);\r\n};\r\n","import { SimpleCardSymbol, TrainingHandStatus, TrainingPairStatus } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nexport const allDealerSymbols: SimpleCardSymbol[] = [\r\n    SimpleCardSymbol.Two,\r\n    SimpleCardSymbol.Three,\r\n    SimpleCardSymbol.Four,\r\n    SimpleCardSymbol.Five,\r\n    SimpleCardSymbol.Six,\r\n    SimpleCardSymbol.Seven,\r\n    SimpleCardSymbol.Eight,\r\n    SimpleCardSymbol.Nine,\r\n    SimpleCardSymbol.Ten,\r\n    SimpleCardSymbol.Ace\r\n];\r\n\r\nexport const getUntrainedDealerSymbols = (trainingHandStatus: TrainingHandStatus) =>\r\n    getObjectKeys(trainingHandStatus).filter(\r\n        (dealerSymbol) => trainingHandStatus[dealerSymbol] !== TrainingPairStatus.passed\r\n    );\r\n","import { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../types';\r\n\r\nexport const getDefaultCasinoRules = (): CasinoRules => ({\r\n    [CasinoRulesKeys.blackjackPeek]: false,\r\n    [CasinoRulesKeys.dealerHitsSoft17]: false,\r\n    [CasinoRulesKeys.doubling]: Doubling.nineToElevenSoft,\r\n    [CasinoRulesKeys.doublingAfterSplit]: true,\r\n    [CasinoRulesKeys.hitSplitAces]: false,\r\n    [CasinoRulesKeys.holeCard]: false,\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber.three,\r\n    [CasinoRulesKeys.surrender]: false\r\n});\r\n","import {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    HandDecisionSet,\r\n    HandDecisionSetGetters,\r\n    SimpleCardSymbol,\r\n    SplitsNumber\r\n} from '../types';\r\n\r\nconst alwaysHit: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n};\r\n\r\nconst alwaysStand: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n};\r\n\r\nexport const getHandDecisionSetLevel = (decisionSet: HandDecisionSet) =>\r\n    Object.values(decisionSet).reduce<{\r\n        previousValue: string;\r\n        level: number;\r\n    }>(\r\n        (reduced, next) => {\r\n            return reduced.previousValue === next\r\n                ? reduced\r\n                : { previousValue: next, level: reduced.level + 1 };\r\n        },\r\n        {\r\n            previousValue: '',\r\n            level: 0\r\n        }\r\n    ).level;\r\n\r\nexport const handDecisionSetGetters: HandDecisionSetGetters = {\r\n    [HandCode.Split2s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            !casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split3s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split4s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split5s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split6s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split7s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split8s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? casinoRules[CasinoRulesKeys.surrender]\r\n                    ? casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                        ? DynamicDecisions.surrender_split_hit\r\n                        : DynamicDecisions.split_surrender_hit\r\n                    : DynamicDecisions.split_hit\r\n                : casinoRules[CasinoRulesKeys.surrender]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split9s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Split10s]: () => alwaysStand,\r\n    [HandCode.SplitAs]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft18]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft19]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Soft20]: () => alwaysStand,\r\n    [HandCode.Hard5]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard6]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard7]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard8]: () => alwaysHit,\r\n    [HandCode.Hard9]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard10]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard11]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard12]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\r\n                ? DynamicDecisions.surrender_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.surrender] &&\r\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\r\n                ? DynamicDecisions.surrender_stand\r\n                : BaseDecisions.stand\r\n    }),\r\n    [HandCode.Hard18]: () => alwaysStand,\r\n    [HandCode.Hard19]: () => alwaysStand,\r\n    [HandCode.Hard20]: () => alwaysStand\r\n};\r\n","import {\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    GoldHandsLevels,\r\n    HandCode,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { getHandDecisionSetLevel, handDecisionSetGetters } from './hand-decision-set';\r\n\r\nexport const getActiveTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    goldHandsLevels: GoldHandsLevels\r\n) => Object.values(trainingHands).filter((hand) => goldHandsLevels[hand.level]);\r\n\r\nexport const getDefaultTrainingHands = () => getTrainingHands(getDefaultCasinoRules());\r\n\r\nexport const getGoldHandsNumber = (\r\n    trainingHands: TrainingHands,\r\n    goldHandsLevels: GoldHandsLevels\r\n) => allDealerSymbols.length * getActiveTrainingHands(trainingHands, goldHandsLevels).length;\r\n\r\nexport const getTrainingHands = (casinoRules: CasinoRules) => {\r\n    const trainingHands: TrainingHands = {\r\n        [HandCode.Split2s]: {\r\n            code: HandCode.Split2s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split2s](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.splitsNumber,\r\n                CasinoRulesKeys.doublingAfterSplit,\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.blackjackPeek,\r\n                CasinoRulesKeys.dealerHitsSoft17\r\n            ],\r\n            level: -1,\r\n            name: '2,2'\r\n        },\r\n        [HandCode.Split3s]: {\r\n            code: HandCode.Split3s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split3s](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.splitsNumber,\r\n                CasinoRulesKeys.doublingAfterSplit,\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.blackjackPeek\r\n            ],\r\n            level: -1,\r\n            name: '3,3'\r\n        },\r\n        [HandCode.Split4s]: {\r\n            code: HandCode.Split4s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split4s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n            level: -1,\r\n            name: '4,4'\r\n        },\r\n        [HandCode.Split5s]: {\r\n            code: HandCode.Split5s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split5s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: '5,5'\r\n        },\r\n        [HandCode.Split6s]: {\r\n            code: HandCode.Split6s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split6s](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.splitsNumber,\r\n                CasinoRulesKeys.doublingAfterSplit,\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.blackjackPeek\r\n            ],\r\n            level: -1,\r\n            name: '6,6'\r\n        },\r\n        [HandCode.Split7s]: {\r\n            code: HandCode.Split7s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split7s](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.splitsNumber,\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.blackjackPeek\r\n            ],\r\n            level: -1,\r\n            name: '7,7'\r\n        },\r\n        [HandCode.Split8s]: {\r\n            code: HandCode.Split8s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split8s](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.splitsNumber,\r\n                CasinoRulesKeys.blackjackPeek,\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.dealerHitsSoft17\r\n            ],\r\n            level: -1,\r\n            name: '8,8'\r\n        },\r\n        [HandCode.Split9s]: {\r\n            code: HandCode.Split9s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split9s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber],\r\n            level: -1,\r\n            name: '9,9'\r\n        },\r\n        [HandCode.Split10s]: {\r\n            code: HandCode.Split10s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split10s](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: '10,10'\r\n        },\r\n        [HandCode.SplitAs]: {\r\n            code: HandCode.SplitAs,\r\n            decisionSet: handDecisionSetGetters[HandCode.SplitAs](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'A,A'\r\n        },\r\n        [HandCode.Soft13]: {\r\n            code: HandCode.Soft13,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft13](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 13'\r\n        },\r\n        [HandCode.Soft14]: {\r\n            code: HandCode.Soft14,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft14](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 14'\r\n        },\r\n        [HandCode.Soft15]: {\r\n            code: HandCode.Soft15,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft15](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 15'\r\n        },\r\n        [HandCode.Soft16]: {\r\n            code: HandCode.Soft16,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft16](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 16'\r\n        },\r\n        [HandCode.Soft17]: {\r\n            code: HandCode.Soft17,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft17](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 17'\r\n        },\r\n        [HandCode.Soft18]: {\r\n            code: HandCode.Soft18,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft18](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\r\n            level: -1,\r\n            name: 'Soft 18'\r\n        },\r\n        [HandCode.Soft19]: {\r\n            code: HandCode.Soft19,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft19](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\r\n            level: -1,\r\n            name: 'Soft 19'\r\n        },\r\n        [HandCode.Soft20]: {\r\n            code: HandCode.Soft20,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft20](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Soft 20'\r\n        },\r\n        /* Soft 21 => Either Blackjack or maximum score! This hand doesn't need training */\r\n        /* Hard 4 => Only possible with 2,2. Covered in Split hands */\r\n        [HandCode.Hard5]: {\r\n            code: HandCode.Hard5,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard5](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 5'\r\n        },\r\n        [HandCode.Hard6]: {\r\n            code: HandCode.Hard6,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard6](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 6'\r\n        },\r\n        [HandCode.Hard7]: {\r\n            code: HandCode.Hard7,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard7](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 7'\r\n        },\r\n        [HandCode.Hard8]: {\r\n            code: HandCode.Hard8,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard8](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 8'\r\n        },\r\n        [HandCode.Hard9]: {\r\n            code: HandCode.Hard9,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard9](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Hard 9'\r\n        },\r\n        [HandCode.Hard10]: {\r\n            code: HandCode.Hard10,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard10](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Hard 10'\r\n        },\r\n        [HandCode.Hard11]: {\r\n            code: HandCode.Hard11,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard11](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.doubling,\r\n                CasinoRulesKeys.blackjackPeek,\r\n                CasinoRulesKeys.dealerHitsSoft17\r\n            ],\r\n            level: -1,\r\n            name: 'Hard 11'\r\n        },\r\n        [HandCode.Hard12]: {\r\n            code: HandCode.Hard12,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard12](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 12'\r\n        },\r\n        [HandCode.Hard13]: {\r\n            code: HandCode.Hard13,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard13](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 13'\r\n        },\r\n        [HandCode.Hard14]: {\r\n            code: HandCode.Hard14,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard14](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 14'\r\n        },\r\n        [HandCode.Hard15]: {\r\n            code: HandCode.Hard15,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard15](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.blackjackPeek,\r\n                CasinoRulesKeys.dealerHitsSoft17\r\n            ],\r\n            level: -1,\r\n            name: 'Hard 15'\r\n        },\r\n        [HandCode.Hard16]: {\r\n            code: HandCode.Hard16,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard16](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender],\r\n            level: -1,\r\n            name: 'Hard 16'\r\n        },\r\n        [HandCode.Hard17]: {\r\n            code: HandCode.Hard17,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard17](casinoRules),\r\n            dependencies: [\r\n                CasinoRulesKeys.surrender,\r\n                CasinoRulesKeys.blackjackPeek,\r\n                CasinoRulesKeys.dealerHitsSoft17\r\n            ],\r\n            level: -1,\r\n            name: 'Hard 17'\r\n        },\r\n        [HandCode.Hard18]: {\r\n            code: HandCode.Hard18,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard18](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 18'\r\n        },\r\n        [HandCode.Hard19]: {\r\n            code: HandCode.Hard19,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard19](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 19'\r\n        },\r\n        [HandCode.Hard20]: {\r\n            code: HandCode.Hard20,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard20](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 20'\r\n        }\r\n        /* Hard 21 => Maximum score! This hand doesn't need training */\r\n    };\r\n\r\n    Object.values(trainingHands).forEach((trainingHand) => {\r\n        trainingHand.level = getHandDecisionSetLevel(trainingHand.decisionSet);\r\n    });\r\n\r\n    return trainingHands;\r\n};\r\n\r\nexport const getUntrainedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    goldHandsLevels: GoldHandsLevels\r\n) =>\r\n    getActiveTrainingHands(trainingHands, goldHandsLevels).filter(\r\n        (trainingHand) => getUntrainedDealerSymbols(trainingProgress[trainingHand.code]).length > 0\r\n    );\r\n","import {\r\n    CasinoRules,\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPair,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys, getRandomItem } from '../utils';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { createDealerHand, handCodeToHand } from './hand';\r\nimport { getActiveTrainingHands, getUntrainedTrainingHands } from './training-hand';\r\n\r\nexport const allTrainingPairsNumber = allDealerSymbols.length * Object.keys(HandCode).length;\r\n\r\nexport const getRandomTrainingPair = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    gameConfig: GameConfig\r\n): TrainingPair => {\r\n    const untrainedTrainingHands = getUntrainedTrainingHands(\r\n        trainingHands,\r\n        trainingProgress,\r\n        gameConfig.goldHandsLevels\r\n    );\r\n\r\n    const randomTrainingHand =\r\n        untrainedTrainingHands.length > 0\r\n            ? getRandomItem(untrainedTrainingHands)\r\n            : getRandomItem(getActiveTrainingHands(trainingHands, gameConfig.goldHandsLevels)); // In case all hands have been passed\r\n\r\n    const trainingHandStatus = trainingProgress[randomTrainingHand.code];\r\n    const untrainedDealerSymbols = getUntrainedDealerSymbols(trainingHandStatus);\r\n\r\n    const randomDealerSymbol =\r\n        untrainedDealerSymbols.length > 0\r\n            ? getRandomItem(untrainedDealerSymbols)\r\n            : getRandomItem(getObjectKeys(trainingHandStatus)); // In case all hands have been passed\r\n\r\n    return {\r\n        dealer: createDealerHand(gameConfig.casinoRules, randomDealerSymbol),\r\n        player: handCodeToHand(randomTrainingHand.code)\r\n    };\r\n};\r\n\r\nexport const getSpecificTrainingPair = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    casinoRules: CasinoRules\r\n): TrainingPair => {\r\n    return {\r\n        dealer: createDealerHand(casinoRules, dealerSymbol),\r\n        player: handCodeToHand(handCode)\r\n    };\r\n};\r\n","import {\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingHandStatus,\r\n    TrainingPairStatus,\r\n    TrainingProgress,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\nimport { allDealerSymbols } from './dealer-symbols';\r\nimport { getUntrainedTrainingHands } from './training-hand';\r\nimport { allTrainingPairsNumber } from './training-pair';\r\n\r\nexport const getAreGoldHandsBlockingProgress = (\r\n    gameConfig: GameConfig,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    progress: number\r\n) =>\r\n    gameConfig.useGoldHands\r\n        ? progress < 100 &&\r\n          getUntrainedTrainingHands(trainingHands, trainingProgress, gameConfig.goldHandsLevels)\r\n              .length === 0\r\n        : false;\r\n\r\nexport const getDefaultTrainingStatus = (): TrainingStatus => ({\r\n    attemptedTrainingPairs: 0,\r\n    isCompleted: false,\r\n    missedTrainingPairs: [],\r\n    passedTrainingPairs: 0,\r\n    trainingProgress: Object.values(HandCode).reduce<TrainingProgress>(\r\n        (reducedTrainingProgress, handCode) => ({\r\n            ...reducedTrainingProgress,\r\n            [handCode]: allDealerSymbols.reduce<TrainingHandStatus>(\r\n                (reducedDealerSymbols, dealerSymbol) => ({\r\n                    ...reducedDealerSymbols,\r\n                    [dealerSymbol]: TrainingPairStatus.untrained\r\n                }),\r\n                {} as TrainingHandStatus\r\n            )\r\n        }),\r\n        {} as TrainingProgress\r\n    )\r\n});\r\n\r\nexport const isTrainingCompleted = (passedTrainingPairs: number) =>\r\n    passedTrainingPairs === allTrainingPairsNumber;\r\n\r\nconst reduceTrainingHandProgress = (\r\n    handCode: HandCode,\r\n    trainingHandStatus: TrainingHandStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus =>\r\n    getObjectKeys(trainingHandStatus).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, dealerSymbol) =>\r\n            reduceTrainingPairProgress(\r\n                handCode,\r\n                dealerSymbol,\r\n                trainingHandStatus[dealerSymbol],\r\n                reducedTrainingStatus\r\n            ),\r\n        reducedTrainingStatus\r\n    );\r\n\r\nconst reduceTrainingPairProgress = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingPairStatus: TrainingPairStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus => {\r\n    return {\r\n        attemptedTrainingPairs:\r\n            reducedTrainingStatus.attemptedTrainingPairs +\r\n            (trainingPairStatus !== TrainingPairStatus.untrained ? 1 : 0),\r\n        isCompleted: reducedTrainingStatus.isCompleted,\r\n        missedTrainingPairs:\r\n            trainingPairStatus === TrainingPairStatus.missed\r\n                ? reducedTrainingStatus.missedTrainingPairs.concat([\r\n                      {\r\n                          dealerSymbol,\r\n                          handCode\r\n                      }\r\n                  ])\r\n                : reducedTrainingStatus.missedTrainingPairs,\r\n        passedTrainingPairs:\r\n            reducedTrainingStatus.passedTrainingPairs +\r\n            (trainingPairStatus === TrainingPairStatus.passed ? 1 : 0),\r\n        trainingProgress: reducedTrainingStatus.trainingProgress\r\n    };\r\n};\r\n\r\nexport const retrieveTrainingStatus = (trainingProgress: TrainingProgress): TrainingStatus => {\r\n    const trainingStatus = getObjectKeys(trainingProgress).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, handCode) =>\r\n            reduceTrainingHandProgress(handCode, trainingProgress[handCode], reducedTrainingStatus),\r\n        {\r\n            attemptedTrainingPairs: 0,\r\n            isCompleted: false,\r\n            missedTrainingPairs: [],\r\n            passedTrainingPairs: 0,\r\n            trainingProgress: trainingProgress\r\n        } as TrainingStatus\r\n    );\r\n\r\n    trainingStatus.isCompleted = isTrainingCompleted(trainingStatus.passedTrainingPairs);\r\n\r\n    return trainingStatus;\r\n};\r\n","import { updatePlayerEarnings } from '../async-storage';\r\nimport {\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingPairRepresentation,\r\n    TrainingPairStatus,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport {\r\n    dealCard,\r\n    getHandEffectiveValue,\r\n    getHandValidValues,\r\n    hasHoleCard,\r\n    revealDealerHoleCard\r\n} from './hand';\r\nimport { resolveHands } from './player';\r\nimport { isTrainingCompleted } from './training-status';\r\n\r\nexport const handleDealerTurn = (\r\n    dealerHand: Hand,\r\n    gameConfig: GameConfig,\r\n    player: Player,\r\n    setDealerHand: (dealerHand: Hand) => void,\r\n    setPhase: (phase: Phases) => void,\r\n    setPlayer: (player: Player) => void\r\n) => {\r\n    let nextDealerHand = { ...dealerHand };\r\n\r\n    if (\r\n        gameConfig.isDealerAnimationEnabled &&\r\n        mustDealerDraw(nextDealerHand, gameConfig.casinoRules)\r\n    ) {\r\n        setTimeout(() => {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            } else {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n            // Setting the dealerHand will trigger this handler again, through useEffect\r\n        }, 1000);\r\n    } else {\r\n        if (!gameConfig.isDealerAnimationEnabled) {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            }\r\n\r\n            while (mustDealerDraw(nextDealerHand, gameConfig.casinoRules)) {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n        }\r\n\r\n        resolveHands(player, nextDealerHand);\r\n        setPlayer({ ...player });\r\n        updatePlayerEarnings(player.cash);\r\n        setPhase(Phases.finished);\r\n    }\r\n};\r\n\r\nconst getNextMissedTrainingPairs = (\r\n    missedTrainingPairs: TrainingPairRepresentation[],\r\n    isHit: boolean,\r\n    handCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingPairRepresentation[] => {\r\n    return isHit\r\n        ? missedTrainingPairs.filter(\r\n              (missedTrainingPair) =>\r\n                  missedTrainingPair.dealerSymbol !== currentDealerSymbol ||\r\n                  missedTrainingPair.handCode !== handCode\r\n          )\r\n        : missedTrainingPairs.some(\r\n              (missedTrainingPair) =>\r\n                  missedTrainingPair.dealerSymbol === currentDealerSymbol &&\r\n                  missedTrainingPair.handCode === handCode\r\n          )\r\n        ? missedTrainingPairs\r\n        : [{ dealerSymbol: currentDealerSymbol, handCode }].concat(missedTrainingPairs);\r\n};\r\n\r\nexport const getNextTrainingStatus = (\r\n    trainingStatus: TrainingStatus,\r\n    isHit: boolean,\r\n    currentHandCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingStatus => {\r\n    // The current trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol]\r\n    // value must be kept to update attemptedTrainingPairs and passedTrainingPairs\r\n    const currentHandTrainingStatus =\r\n        trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol];\r\n\r\n    trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol] = isHit\r\n        ? TrainingPairStatus.passed\r\n        : TrainingPairStatus.missed;\r\n\r\n    const nextAttemptedTrainingPairs =\r\n        trainingStatus.attemptedTrainingPairs +\r\n        (currentHandTrainingStatus === TrainingPairStatus.untrained ? 1 : 0);\r\n\r\n    const nextMissedTrainingPairs = getNextMissedTrainingPairs(\r\n        trainingStatus.missedTrainingPairs,\r\n        isHit,\r\n        currentHandCode,\r\n        currentDealerSymbol\r\n    );\r\n\r\n    const nextPassedTrainingHands =\r\n        trainingStatus.passedTrainingPairs +\r\n        (isHit && currentHandTrainingStatus !== TrainingPairStatus.passed\r\n            ? 1\r\n            : !isHit && currentHandTrainingStatus === TrainingPairStatus.passed\r\n            ? -1\r\n            : 0);\r\n\r\n    return {\r\n        attemptedTrainingPairs: nextAttemptedTrainingPairs,\r\n        isCompleted: isTrainingCompleted(nextPassedTrainingHands),\r\n        missedTrainingPairs: nextMissedTrainingPairs,\r\n        passedTrainingPairs: nextPassedTrainingHands,\r\n        trainingProgress: trainingStatus.trainingProgress\r\n    };\r\n};\r\n\r\nconst mustDealerDraw = (dealerHand: Hand, casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(dealerHand);\r\n    return (\r\n        handEffectiveValue < 17 ||\r\n        (casinoRules[CasinoRulesKeys.dealerHitsSoft17] &&\r\n            getHandValidValues(dealerHand).length > 1 &&\r\n            handEffectiveValue === 17)\r\n    );\r\n};\r\n","import {\r\n    BaseDecisions,\r\n    DecisionEvaluation,\r\n    DynamicConditions,\r\n    DynamicDecision,\r\n    DynamicDecisions,\r\n    Hand,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    TrainingHands\r\n} from '../types';\r\nimport { symbolToSimpleSymbol } from './card';\r\nimport { handToHandCode } from './hand';\r\n\r\nexport const evaluateDecision = (\r\n    playerHand: Hand,\r\n    dealerHand: Hand,\r\n    trainingHands: TrainingHands,\r\n    dynamicConditions: DynamicConditions,\r\n    playerDecision: PlayerDecision\r\n): DecisionEvaluation => {\r\n    const handCode = handToHandCode(playerHand);\r\n    const trainingHand = trainingHands[handCode];\r\n    const dealerSymbol = symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const dynamicDecision = trainingHand.decisionSet[dealerSymbol];\r\n    const optimalDecision = evaluateDynamicDecision(dynamicDecision, dynamicConditions);\r\n\r\n    return {\r\n        dealerSymbol,\r\n        dynamicDecision,\r\n        handName: trainingHand.name,\r\n        isHit: playerDecision === optimalDecision\r\n    };\r\n};\r\n\r\nconst evaluateDynamicDecision = (\r\n    dynamicDecision: DynamicDecision,\r\n    dynamicConditions: DynamicConditions\r\n): PlayerDecision =>\r\n    dynamicDecision === DynamicDecisions.double_hit\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.double_stand\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.split_stand\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_surrender_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_split_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.surrender_stand\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.stand\r\n        : dynamicDecision;\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, Doubling } from '../../types';\r\n\r\ninterface DoublingPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const DoublingPicker: React.FC<DoublingPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.doubling}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.doubling]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextDoubling = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextDoubling > 0,\r\n                            [CasinoRulesKeys.doubling]: nextDoubling\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"Any pair\" value={Doubling.anyPair} />\r\n                    <Picker.Item label=\"9, 10, 11, S19, S20\" value={Doubling.nineToElevenSoft} />\r\n                    <Picker.Item label=\"9, 10, 11\" value={Doubling.nineToEleven} />\r\n                    <Picker.Item label=\"10, 11\" value={Doubling.tenToEleven} />\r\n                    <Picker.Item label=\"None\" value={Doubling.none} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Text, View } from 'react-native';\r\nimport { hitColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys } from '../../types';\r\n\r\ninterface RuleSwitcherProps {\r\n    casinoRules: CasinoRules;\r\n    hideLabel?: boolean;\r\n    isDisabled?: boolean;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    ruleName:\r\n        | CasinoRulesKeys.blackjackPeek\r\n        | CasinoRulesKeys.dealerHitsSoft17\r\n        | CasinoRulesKeys.doublingAfterSplit\r\n        | CasinoRulesKeys.hitSplitAces\r\n        | CasinoRulesKeys.holeCard\r\n        | CasinoRulesKeys.surrender;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const RuleSwitcher: React.FC<RuleSwitcherProps> = (props) => {\r\n    const SwitchCore = (\r\n        <Switch\r\n            onValueChange={\r\n                props.isDisabled\r\n                    ? undefined\r\n                    : (newValue) => {\r\n                          const nextCasinoRules = {\r\n                              ...props.casinoRules,\r\n                              [props.ruleName]: newValue\r\n                          };\r\n                          if (props.ruleName === CasinoRulesKeys.holeCard && !newValue) {\r\n                              nextCasinoRules[CasinoRulesKeys.blackjackPeek] = false;\r\n                          }\r\n                          props.setCasinoRules(nextCasinoRules);\r\n                          props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                      }\r\n            }\r\n            style={{ marginRight: 8 }}\r\n            trackColor={{ true: hitColor, false: 'white' }}\r\n            value={props.casinoRules[props.ruleName]}\r\n        />\r\n    );\r\n\r\n    return props.hideLabel ? (\r\n        SwitchCore\r\n    ) : (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                opacity: props.isDisabled ? 0.3 : undefined,\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {SwitchCore}\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {props.ruleName}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, SplitsNumber } from '../../types';\r\n\r\ninterface SplitsNumberPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const SplitsNumberPicker: React.FC<SplitsNumberPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.splitsNumber}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.splitsNumber]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextSplitsNumber = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.hitSplitAces]:\r\n                                props.casinoRules[CasinoRulesKeys.hitSplitAces] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.splitsNumber]: nextSplitsNumber\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"None\" value={SplitsNumber.none} />\r\n                    <Picker.Item label=\"1\" value={SplitsNumber.one} />\r\n                    <Picker.Item label=\"2\" value={SplitsNumber.two} />\r\n                    <Picker.Item label=\"3\" value={SplitsNumber.three} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { colors } from '../constants';\r\nimport { allDealerSymbols } from '../logic/dealer-symbols';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    BaseDecisions,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    SplitsNumber\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nconst actionsAbbreviationMap: Dictionary<string, BaseDecisions | DynamicDecisions> = {\r\n    [BaseDecisions.hit]: 'H',\r\n    [BaseDecisions.stand]: 'S',\r\n    [DynamicDecisions.double_hit]: 'Dh',\r\n    [DynamicDecisions.double_stand]: 'Ds',\r\n    [DynamicDecisions.split_hit]: 'Ph',\r\n    [DynamicDecisions.split_stand]: 'Ps',\r\n    [DynamicDecisions.split_surrender_hit]: 'Pr',\r\n    [DynamicDecisions.surrender_hit]: 'Rh',\r\n    [DynamicDecisions.surrender_split_hit]: 'Rp',\r\n    [DynamicDecisions.surrender_stand]: 'Rs'\r\n};\r\n\r\nconst handCodesAbbreviationMap: Partial<Dictionary<string, HandCode>> = {\r\n    [HandCode.Split2s]: '2s',\r\n    [HandCode.Split3s]: '3s',\r\n    [HandCode.Split4s]: '4s',\r\n    [HandCode.Split5s]: '5s',\r\n    [HandCode.Split6s]: '6s',\r\n    [HandCode.Split7s]: '7s',\r\n    [HandCode.Split8s]: '8s',\r\n    [HandCode.Split9s]: '9s',\r\n    [HandCode.Split10s]: 'Xs',\r\n    [HandCode.SplitAs]: 'As',\r\n    [HandCode.Soft13]: 'A2',\r\n    [HandCode.Soft14]: 'A3',\r\n    [HandCode.Soft15]: 'A4',\r\n    [HandCode.Soft16]: 'A5',\r\n    [HandCode.Soft17]: 'A6',\r\n    [HandCode.Soft18]: 'A7',\r\n    [HandCode.Soft19]: 'A8',\r\n    [HandCode.Soft20]: 'A9'\r\n};\r\n\r\nconst cellWidth = Math.floor((100 * 100) / (allDealerSymbols.length + 1)) / 100;\r\n\r\ninterface TextCellProps {\r\n    backgroundColor?: string;\r\n}\r\n\r\nconst TextCell: React.FC<TextCellProps> = (props) => (\r\n    <Text\r\n        style={{\r\n            backgroundColor: props.backgroundColor,\r\n            color: 'white',\r\n            fontSize: 16,\r\n            marginVertical: 1,\r\n            paddingVertical: 2,\r\n            textAlign: 'center',\r\n            width: `${cellWidth}%`\r\n        }}\r\n    >\r\n        {props.children}\r\n    </Text>\r\n);\r\n\r\ninterface BasicStrategyTableProps {\r\n    casinoRules: CasinoRules;\r\n}\r\n\r\nexport const BasicStrategyTable: React.FC<BasicStrategyTableProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    return (\r\n        <ScrollView style={{ width: '100%' }}>\r\n            <View style={{ paddingHorizontal: 16, marginBottom: 16 }}>\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.blackjackPeek}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <DoublingPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={\r\n                        props.casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                        props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                    }\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <SplitsNumberPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </View>\r\n\r\n            <View style={{ flexDirection: 'row', width: '100%' }}>\r\n                {[''].concat(Object.values(allDealerSymbols)).map((dealerSymbol) => (\r\n                    <TextCell key={dealerSymbol}>{dealerSymbol}</TextCell>\r\n                ))}\r\n            </View>\r\n\r\n            {Object.values(HandCode).map((handCode) => {\r\n                const trainingHand = trainingHands[handCode];\r\n                return (\r\n                    <View key={handCode} style={{ flexDirection: 'row', width: '100%' }}>\r\n                        <TextCell>{handCodesAbbreviationMap[handCode] || handCode}</TextCell>\r\n                        {getObjectKeys(trainingHand.decisionSet).map((cardSymbol) => (\r\n                            <TextCell\r\n                                key={cardSymbol}\r\n                                backgroundColor={colors[trainingHand.decisionSet[cardSymbol]]}\r\n                            >\r\n                                {actionsAbbreviationMap[trainingHand.decisionSet[cardSymbol]]}\r\n                            </TextCell>\r\n                        ))}\r\n                    </View>\r\n                );\r\n            })}\r\n\r\n            <View style={{ paddingHorizontal: 16, marginVertical: 16 }}>\r\n                {getObjectKeys(actionsAbbreviationMap).map((action) => (\r\n                    <Text\r\n                        key={action}\r\n                        style={{\r\n                            backgroundColor: colors[action],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 8,\r\n                            paddingVertical: 4,\r\n                            marginBottom: 4\r\n                        }}\r\n                    >\r\n                        {actionsAbbreviationMap[action]} = {action}\r\n                    </Text>\r\n                ))}\r\n            </View>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { playSound } from '../utils';\r\n\r\ntype SoundQueue = { isActive: boolean; sounds: Audio.Sound[] };\r\n\r\nexport const createSoundQueue = (): SoundQueue => ({\r\n    isActive: false,\r\n    sounds: []\r\n});\r\n\r\nconst playNextSound = (soundQueue: SoundQueue) => {\r\n    const nextSound = soundQueue.sounds.pop();\r\n    if (nextSound) {\r\n        playSound(nextSound).then(() => {\r\n            setTimeout(() => playNextSound(soundQueue), 250);\r\n        });\r\n    } else {\r\n        soundQueue.isActive = false;\r\n    }\r\n};\r\n\r\nexport const pushSound = (soundQueue: SoundQueue, sound: Audio.Sound) => {\r\n    soundQueue.sounds.push(sound);\r\n    if (!soundQueue.isActive) {\r\n        soundQueue.isActive = true;\r\n        playNextSound(soundQueue);\r\n    }\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\r\nimport cardSlideSoundMp3 from '../../assets/card-slide.mp3';\r\nimport { createSoundQueue, pushSound } from '../logic/sound-queue';\r\nimport { AppNavigation, Card, RouteNames, SimpleCardSymbol } from '../types';\r\n\r\ninterface CardComponentProps {\r\n    card: Card;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nconst animationsDuration = 400;\r\nconst initialOpacity = 0;\r\nconst initialPosition = -20;\r\n\r\nconst soundQueue = createSoundQueue();\r\n\r\nexport const CardComponent: React.FC<CardComponentProps> = (props) => {\r\n    const opacity = useMemo(() => new Animated.Value(initialOpacity), []);\r\n    const position = useMemo(() => new Animated.Value(initialPosition), []);\r\n    const [cardSlideSound, setCardSlideSound] = useState<Audio.Sound | false>();\r\n\r\n    const animateCard = (sound?: Audio.Sound | false) => {\r\n        if (!props.skipAnimation) {\r\n            Animated.parallel([\r\n                Animated.timing(opacity, {\r\n                    useNativeDriver: true,\r\n                    toValue: 1,\r\n                    duration: animationsDuration * 2\r\n                }),\r\n                Animated.timing(position, {\r\n                    useNativeDriver: true,\r\n                    toValue: 0,\r\n                    duration: animationsDuration\r\n                })\r\n            ]).start();\r\n        }\r\n\r\n        if (props.isSoundEnabled && sound) {\r\n            pushSound(soundQueue, sound);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cardSlideSound === undefined) {\r\n            Audio.Sound.createAsync(cardSlideSoundMp3, { volume: 0.5 })\r\n                .then((result) => {\r\n                    animateCard(result.sound);\r\n                    setCardSlideSound(result.sound);\r\n                })\r\n                .catch(() => {\r\n                    /* Failing to load audio is not a critical issue */\r\n                    animateCard();\r\n                    setCardSlideSound(false);\r\n                });\r\n        } else {\r\n            if (!props.skipAnimation) {\r\n                opacity.setValue(initialOpacity);\r\n                position.setValue(initialPosition);\r\n            }\r\n\r\n            animateCard(cardSlideSound);\r\n        }\r\n    }, [props.card]);\r\n\r\n    const cardColor = props.card.isBlueCard\r\n        ? '#346fa1'\r\n        : props.card.isGoldCard\r\n        ? '#e5c100'\r\n        : props.card.suit === '♦' || props.card.suit === '♥'\r\n        ? 'red'\r\n        : 'black';\r\n\r\n    const backgroundColor = props.card.isHoleCard ? 'lightgrey' : 'white';\r\n\r\n    return (\r\n        <Animated.View\r\n            style={{\r\n                backgroundColor,\r\n                borderRadius: 8,\r\n                height: 66,\r\n                marginBottom: 8,\r\n                marginRight: 8,\r\n                opacity: props.skipAnimation ? undefined : opacity,\r\n                transform: props.skipAnimation ? undefined : [{ translateY: position }],\r\n                width: 56\r\n            }}\r\n        >\r\n            {!props.card.isHoleCard && (\r\n                <TouchableOpacity\r\n                    onPress={\r\n                        props.navigation\r\n                            ? () => {\r\n                                  if (props.card.isBlueCard) {\r\n                                      props.navigation!.navigate(RouteNames.blueCardsInfo);\r\n                                  } else if (props.card.isGoldCard) {\r\n                                      props.navigation!.navigate(RouteNames.goldHandsInfo);\r\n                                  }\r\n                              }\r\n                            : undefined\r\n                    }\r\n                >\r\n                    {props.card.isBlueCard || props.card.isGoldCard ? (\r\n                        <View\r\n                            style={{\r\n                                backgroundColor: cardColor,\r\n                                borderRadius: props.card.isBlueCard ? 12 : undefined,\r\n                                height: 12,\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                top: 8,\r\n                                width: 12\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        <Text\r\n                            style={{\r\n                                color: cardColor,\r\n                                fontSize: 16,\r\n                                position: 'absolute',\r\n                                right: 4,\r\n                                top: 4\r\n                            }}\r\n                        >\r\n                            {props.card.suit}\r\n                        </Text>\r\n                    )}\r\n                    <Text\r\n                        style={{\r\n                            color: cardColor,\r\n                            fontSize: 40,\r\n                            marginRight: props.card.symbol === SimpleCardSymbol.Ten ? 0 : 8,\r\n                            marginTop: 12,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.card.symbol}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            )}\r\n        </Animated.View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { getHandValidValues, isBlackjack } from '../logic/hand';\r\nimport { AppNavigation, Hand } from '../types';\r\nimport { CardComponent } from './card-component';\r\n\r\ninterface HandComponentProps {\r\n    hand: Hand;\r\n    handsNumber: number;\r\n    isCurrentHand: boolean;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    peeking?: boolean;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nexport const HandComponent: React.FC<HandComponentProps> = (props) => {\r\n    const handValues = getHandValidValues(props.hand).join('/');\r\n    const displayValues = isBlackjack(props.hand, props.handsNumber)\r\n        ? 'Blackjack'\r\n        : handValues.indexOf('21') > -1\r\n        ? '21'\r\n        : handValues;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                backgroundColor: props.isCurrentHand ? 'rgba(255, 255, 255, 0.2)' : undefined,\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'center',\r\n                maxWidth: '100%',\r\n                paddingTop: 8,\r\n                paddingHorizontal: 8\r\n            }}\r\n        >\r\n            {props.hand.cards.map((card, index) => (\r\n                <CardComponent\r\n                    card={card}\r\n                    isSoundEnabled={props.isSoundEnabled}\r\n                    key={index}\r\n                    navigation={props.navigation}\r\n                    skipAnimation={props.skipAnimation}\r\n                />\r\n            ))}\r\n            <View style={{ alignItems: 'center', justifyContent: 'center', marginBottom: 8 }}>\r\n                {props.peeking ? (\r\n                    <Text style={{ color: 'black', fontSize: 32, height: '100%' }}>👁️</Text>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Text style={{ color: 'white', fontSize: 25 }}> {displayValues}</Text>\r\n                        {props.hand.outcome && (\r\n                            <Text style={{ color: 'white', fontSize: 25, fontWeight: 'bold' }}>\r\n                                {props.hand.outcome}\r\n                            </Text>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { CardComponent } from '../components/card-component';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { CardSuit, Hand, SimpleCardSymbol } from '../types';\r\n\r\nexport const BlueCardsInfo: React.FC = () => {\r\n    const hardFourteen: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Five\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.diamonds,\r\n                symbol: SimpleCardSymbol.Nine\r\n            }\r\n        ],\r\n        values: [14]\r\n    };\r\n\r\n    const splitFour: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Four\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.spades,\r\n                symbol: SimpleCardSymbol.Four\r\n            }\r\n        ],\r\n        values: [8]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Blue cards\r\n            </Text>\r\n\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    When Blue cards are enabled, each time you Hit or Split a hand, instead of being\r\n                    a dealt a random card, you will be dealt a card that turns your current hand\r\n                    into a hand you haven't trained yet (or a hand you didn't get right) against the\r\n                    dealer's up card.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Blue cards have blue symbols and a blue circle (instead of the suit):\r\n                </Text>\r\n\r\n                <View style={{ alignItems: 'center' }}>\r\n                    <CardComponent\r\n                        card={{\r\n                            isBlueCard: true,\r\n                            isGoldCard: false,\r\n                            suit: CardSuit.spades,\r\n                            symbol: SimpleCardSymbol.Eight\r\n                        }}\r\n                        isSoundEnabled={false}\r\n                        skipAnimation={true}\r\n                    />\r\n                </View>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontWeight: 'bold', marginVertical: 16 }}\r\n                >\r\n                    Notice that enabling this option will increase your probabilities of winning,\r\n                    since you won't get busted as much as you would when being dealt random cards\r\n                    (specially on high value hands like Hard 16).\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardFourteen}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    Let's say you have a Hard 14 and the dealer's up card is a 9. If you decide to\r\n                    Hit, the app will check whether there are any hands greater than 14 which you\r\n                    haven't trained yet (or you didn't get right) against a dealer's 9. Hands\r\n                    greater than 14 are:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            }\r\n                        ],\r\n                        values: [15]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.clubs,\r\n                                symbol: SimpleCardSymbol.Two\r\n                            }\r\n                        ],\r\n                        values: [16]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Six\r\n                            }\r\n                        ],\r\n                        values: [20]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    - If you haven't trained any of those hands yet (against a dealer's 9), you will\r\n                    be dealt a blue card that turns the Hard 14 into one of those hands\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    - If you have already trained all of those hands (against a dealer's 9), you\r\n                    will then be dealt a random card\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    The same behavior will be applied when splitting a hand. Let's say the dealer\r\n                    has a 6, you have a 4,4 and you decide to Split it.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={splitFour}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    The app will then check which hands greater than 4 you haven't trained yet (or\r\n                    didn't get right) against a dealer's 6 and turn each of the 4s into one of those\r\n                    hands. Available hands greater than 4 are:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            }\r\n                        ],\r\n                        values: [5, 15]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SimpleCardSymbol.Two\r\n                            }\r\n                        ],\r\n                        values: [6]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.clubs,\r\n                                symbol: SimpleCardSymbol.Ten\r\n                            }\r\n                        ],\r\n                        values: [14]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    After you have trained each hand at least once Blue cards won't apply anymore.\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\nexport const Divider: React.FC = () => (\r\n    <View\r\n        style={{\r\n            backgroundColor: 'white',\r\n            height: 2,\r\n            width: '100%'\r\n        }}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity } from 'react-native';\r\nimport { tableColor } from '../constants';\r\n\r\ninterface HelpIconProps {\r\n    onPress: () => void;\r\n}\r\n\r\nexport const HelpIcon: React.FC<HelpIconProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity onPress={props.onPress}>\r\n            <Text\r\n                style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: 16,\r\n                    color: tableColor,\r\n                    fontSize: 18,\r\n                    fontWeight: 'bold',\r\n                    marginLeft: 8,\r\n                    marginTop: 2,\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                ?\r\n            </Text>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Alert, ScrollView, Switch, Text, View } from 'react-native';\r\nimport { updateGameConfig, updatePlayerEarnings, updateTrainingProgress } from '../async-storage';\r\nimport { Button } from '../components/button';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { Divider } from '../components/divider';\r\nimport { HelpIcon } from '../components/help-icon';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { dangerColor, doubleColor, hitColor, splitColor, warningColor } from '../constants';\r\nimport { getGoldHandsNumber, getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    getAreGoldHandsBlockingProgress,\r\n    getDefaultTrainingStatus\r\n} from '../logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    GoldHandsLevels,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    SplitsNumber,\r\n    TrainingHands,\r\n    TrainingStatus\r\n} from '../types';\r\n\r\ntype ConfigMenuProps = {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    progress: number;\r\n    setGameConfig: (gameConfig: GameConfig) => void;\r\n    setTrainingStatus: (trainingStatus: TrainingStatus) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingStatus: TrainingStatus;\r\n};\r\n\r\nconst textStyle = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nexport const ConfigMenu: React.FC<ConfigMenuProps> = (props) => {\r\n    const [areGoldHandsBlockingProgress, setAreGoldHandsBlockingProgress] = useState(\r\n        props.progress < 100 && props.areGoldHandsBlockingProgress\r\n    );\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n    const [goldHandsLevels, setGoldHandsLevels] = useState(props.gameConfig.goldHandsLevels);\r\n    const [goldHandsNumber, setGoldHandsNumber] = useState(\r\n        getGoldHandsNumber(props.trainingHands, props.gameConfig.goldHandsLevels)\r\n    );\r\n    const [isDealerAnimationEnabled, setIsDealerAnimationEnabled] = useState(\r\n        props.gameConfig.isDealerAnimationEnabled\r\n    );\r\n    const [isSoundEnabled, setIsSoundEnabled] = useState(props.gameConfig.isSoundEnabled);\r\n    const [trainingHands, setTrainingHands] = useState(props.trainingHands);\r\n    const [useBlueCards, setUseBlueCards] = useState(props.gameConfig.useBlueCards);\r\n    const [useGoldHands, setUseGoldHands] = useState(props.gameConfig.useGoldHands);\r\n\r\n    const isSomeLevelSelected = (_goldHandsLevels: GoldHandsLevels) =>\r\n        _goldHandsLevels[1] || _goldHandsLevels[2] || _goldHandsLevels[3] || _goldHandsLevels[4];\r\n\r\n    const areGoldHandsBlockingProgressHandler = (options?: {\r\n        nextCasinoRules?: CasinoRules;\r\n        nextGoldHandsLevels?: GoldHandsLevels;\r\n        nextTrainingHands?: TrainingHands;\r\n        nextUseGoldHands?: boolean;\r\n    }) => {\r\n        setAreGoldHandsBlockingProgress(\r\n            isSomeLevelSelected((options && options.nextGoldHandsLevels) || goldHandsLevels) &&\r\n                getAreGoldHandsBlockingProgress(\r\n                    {\r\n                        casinoRules: (options && options.nextCasinoRules) || casinoRules,\r\n                        goldHandsLevels:\r\n                            (options && options.nextGoldHandsLevels) || goldHandsLevels,\r\n                        isDealerAnimationEnabled,\r\n                        isSoundEnabled,\r\n                        useBlueCards,\r\n                        useGoldHands:\r\n                            options && options.nextUseGoldHands !== undefined\r\n                                ? options.nextUseGoldHands\r\n                                : useGoldHands\r\n                    },\r\n                    (options && options.nextTrainingHands) || trainingHands,\r\n                    props.trainingStatus.trainingProgress,\r\n                    props.progress\r\n                )\r\n        );\r\n    };\r\n\r\n    const casinoRuleChangeHandler = (nextCasinoRules: CasinoRules) => {\r\n        const nextTrainingHands = getTrainingHands(nextCasinoRules);\r\n        const nextGoldHandsNumber = getGoldHandsNumber(nextTrainingHands, goldHandsLevels);\r\n\r\n        setGoldHandsNumber(nextGoldHandsNumber);\r\n        setTrainingHands(nextTrainingHands);\r\n        areGoldHandsBlockingProgressHandler({ nextCasinoRules, nextTrainingHands });\r\n    };\r\n\r\n    const saveHandler = () => {\r\n        const nextGameConfig: GameConfig = {\r\n            casinoRules,\r\n            goldHandsLevels,\r\n            isDealerAnimationEnabled,\r\n            isSoundEnabled,\r\n            useBlueCards,\r\n            useGoldHands\r\n        };\r\n        props.setGameConfig(nextGameConfig);\r\n        updateGameConfig(nextGameConfig);\r\n        props.navigation.navigate(RouteNames.table);\r\n    };\r\n\r\n    const isSaveButtonEnabled =\r\n        (props.gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\r\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doublingAfterSplit] !==\r\n                casinoRules[CasinoRulesKeys.doublingAfterSplit] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                casinoRules[CasinoRulesKeys.doubling] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                casinoRules[CasinoRulesKeys.hitSplitAces] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                casinoRules[CasinoRulesKeys.holeCard] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                casinoRules[CasinoRulesKeys.splitsNumber] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                casinoRules[CasinoRulesKeys.surrender] ||\r\n            props.gameConfig.goldHandsLevels[1] !== goldHandsLevels[1] ||\r\n            props.gameConfig.goldHandsLevels[2] !== goldHandsLevels[2] ||\r\n            props.gameConfig.goldHandsLevels[3] !== goldHandsLevels[3] ||\r\n            props.gameConfig.goldHandsLevels[4] !== goldHandsLevels[4] ||\r\n            props.gameConfig.isDealerAnimationEnabled !== isDealerAnimationEnabled ||\r\n            props.gameConfig.isSoundEnabled !== isSoundEnabled ||\r\n            props.gameConfig.useBlueCards !== useBlueCards ||\r\n            props.gameConfig.useGoldHands !== useGoldHands) &&\r\n        isSomeLevelSelected(goldHandsLevels);\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            style={{\r\n                flexGrow: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.basicStrategyTable}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 8,\r\n                    paddingHorizontal: 16,\r\n                    paddingVertical: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={splitColor}\r\n                    isEnabled={true}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.basicStrategyTable);\r\n                    }}\r\n                    text=\"Basic strategy table\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                {areGoldHandsBlockingProgress && (\r\n                    <Text\r\n                        style={{\r\n                            color: warningColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingTop: 16\r\n                        }}\r\n                    >\r\n                        ⚠️ The selected Gold hands levels are blocking untrained hands. Modify the\r\n                        selected levels or disable Gold Hands to train the missing hands\r\n                    </Text>\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.casinoRules}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Casino rules\r\n                </Text>\r\n                <Divider />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <DoublingPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={\r\n                        casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                        casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                    }\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                {/* TODO Create a help icon on Hit split aces */}\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.hitSplitAces}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        hideLabel={true}\r\n                        onValueChange={casinoRuleChangeHandler}\r\n                        ruleName={CasinoRulesKeys.holeCard}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <View>\r\n                        {/* TODO Create a help icon on Hole card */}\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20\r\n                            }}\r\n                        >\r\n                            {CasinoRulesKeys.holeCard}\r\n                        </Text>\r\n\r\n                        <RuleSwitcher\r\n                            casinoRules={casinoRules}\r\n                            isDisabled={!casinoRules[CasinoRulesKeys.holeCard]}\r\n                            onValueChange={casinoRuleChangeHandler}\r\n                            ruleName={CasinoRulesKeys.blackjackPeek}\r\n                            setCasinoRules={setCasinoRules}\r\n                        />\r\n                    </View>\r\n                </View>\r\n\r\n                <SplitsNumberPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.appSettings}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    App settings\r\n                </Text>\r\n                <Divider />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsDealerAnimationEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isDealerAnimationEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Dealer cards animation\r\n                    </Text>\r\n                </View>\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <Switch\r\n                        onValueChange={(value) => {\r\n                            setUseGoldHands(value);\r\n                            areGoldHandsBlockingProgressHandler({ nextUseGoldHands: value });\r\n                        }}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={useGoldHands}\r\n                    />\r\n\r\n                    <View>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                            <Text\r\n                                style={{\r\n                                    color: areGoldHandsBlockingProgress ? warningColor : 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Untrained pairs priority\r\n                            </Text>\r\n                            <HelpIcon\r\n                                onPress={() => {\r\n                                    props.navigation.navigate(RouteNames.untrainedPairsPriority);\r\n                                }}\r\n                            />\r\n                        </View>\r\n\r\n                        <View\r\n                            style={{\r\n                                marginTop: 16,\r\n                                opacity: useGoldHands ? undefined : 0.3\r\n                            }}\r\n                        >\r\n                            <View style={{ flexDirection: 'row' }}>\r\n                                <Text\r\n                                    style={{\r\n                                        ...textStyle,\r\n                                        color: areGoldHandsBlockingProgress ? warningColor : 'white'\r\n                                    }}\r\n                                >\r\n                                    Initial hand levels\r\n                                </Text>\r\n                                <HelpIcon\r\n                                    onPress={() => {\r\n                                        props.navigation.navigate(RouteNames.handLevel);\r\n                                    }}\r\n                                />\r\n                            </View>\r\n\r\n                            <View\r\n                                style={{\r\n                                    flexDirection: 'row',\r\n                                    flexWrap: 'wrap'\r\n                                }}\r\n                            >\r\n                                {Object.keys(goldHandsLevels).map((numberKey) => {\r\n                                    const number = parseInt(numberKey, 10);\r\n                                    return (\r\n                                        <React.Fragment key={numberKey}>\r\n                                            <Switch\r\n                                                disabled={!useGoldHands}\r\n                                                onValueChange={(newValue) => {\r\n                                                    const nextGoldHandsLevels = {\r\n                                                        ...goldHandsLevels,\r\n                                                        [number]: newValue\r\n                                                    };\r\n                                                    setGoldHandsLevels(nextGoldHandsLevels);\r\n                                                    setGoldHandsNumber(\r\n                                                        getGoldHandsNumber(\r\n                                                            trainingHands,\r\n                                                            nextGoldHandsLevels\r\n                                                        )\r\n                                                    );\r\n                                                    areGoldHandsBlockingProgressHandler({\r\n                                                        nextGoldHandsLevels\r\n                                                    });\r\n                                                }}\r\n                                                style={{ marginTop: 16 }}\r\n                                                trackColor={{ true: hitColor, false: 'white' }}\r\n                                                value={goldHandsLevels[number] || false}\r\n                                            />\r\n                                            <Text\r\n                                                style={{\r\n                                                    ...textStyle,\r\n                                                    color: areGoldHandsBlockingProgress\r\n                                                        ? warningColor\r\n                                                        : 'white',\r\n                                                    marginTop: 16,\r\n                                                    paddingLeft: 4\r\n                                                }}\r\n                                            >\r\n                                                {numberKey}\r\n                                            </Text>\r\n                                        </React.Fragment>\r\n                                    );\r\n                                })}\r\n                            </View>\r\n                            <Text style={{ ...textStyle, marginTop: 16, textAlign: 'center' }}>\r\n                                ({goldHandsNumber} training pairs)\r\n                            </Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsSoundEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isSoundEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Sound effects 🔊\r\n                    </Text>\r\n                </View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16,\r\n                    paddingTop: 24\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={isSaveButtonEnabled}\r\n                    marginBottom={40}\r\n                    onPress={saveHandler}\r\n                    text=\"Save\"\r\n                    width=\"100%\"\r\n                />\r\n\r\n                <Divider />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={props.phase === Phases.finished}\r\n                    marginTop={40}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.onboarding);\r\n                    }}\r\n                    text=\"Onboarding\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.resetTraining}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 16,\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={dangerColor}\r\n                    isEnabled={true}\r\n                    marginTop={8}\r\n                    onPress={() => {\r\n                        Alert.alert(\r\n                            'Reset training',\r\n                            'Resetting the training will mark all hands as untrained, ' +\r\n                                'setting the progress and precision indicators to 0%, ' +\r\n                                'and set the player earnings to 0$ as well. ' +\r\n                                'Are you sure you want to reset the training?',\r\n                            [\r\n                                {\r\n                                    text: 'Cancel',\r\n                                    style: 'cancel'\r\n                                },\r\n                                {\r\n                                    text: 'Reset',\r\n                                    onPress: () => {\r\n                                        const nextTrainingStatus = getDefaultTrainingStatus();\r\n                                        props.setTrainingStatus(nextTrainingStatus);\r\n                                        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n                                        updatePlayerEarnings(0);\r\n                                    }\r\n                                }\r\n                            ]\r\n                        );\r\n                    }}\r\n                    text=\"Reset training\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { CardSuit, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const GoldHandsInfo: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Gold hands\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    When Gold hands are enabled you will be dealt specific initial hands and dealer\r\n                    will be dealt specific up cards, prioritizing those you haven't trained yet and\r\n                    those which you didn't get right.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Gold cards have golden symbols and a golden square (instead of the suit):\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: true,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Nine\r\n                            },\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: true,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SimpleCardSymbol.Eight\r\n                            }\r\n                        ],\r\n                        values: [17]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    Additionally, you can filter the hands you will be dealt by configuring the gold\r\n                    hands Levels.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontWeight: 'bold', marginBottom: 16 }}\r\n                >\r\n                    Notice that when enabling Gold hands you will get hands that are infrequent when\r\n                    playing in real scenarios so the results (i.e. the money earnings) are not\r\n                    relevant.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Once you have trained each possible hand, disable Gold hands in order to train\r\n                    in more similar conditions to the ones in real scenarios.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Another consequence of enabling Gold hands, for example, is that you will never\r\n                    be dealt a Blackjack as initial hand (because it's a hand that requires no\r\n                    training).\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            },\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SpecialCardSymbol.Jack\r\n                            }\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { HandDecisionSet } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ninterface HandDecisionsTableProps {\r\n    handDecisionSet: HandDecisionSet;\r\n}\r\n\r\nexport const HandDecisionsTable: React.FC<HandDecisionsTableProps> = (props) => (\r\n    <View style={{ width: '100%' }}>\r\n        {getObjectKeys(props.handDecisionSet).map((simpleCardSymbol) => {\r\n            return (\r\n                <View key={simpleCardSymbol} style={{ flexDirection: 'row', width: '100%' }}>\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            paddingTop: 12,\r\n                            textAlign: 'center',\r\n                            width: '15%'\r\n                        }}\r\n                    >\r\n                        {simpleCardSymbol}\r\n                    </Text>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: colors[props.handDecisionSet[simpleCardSymbol]],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            marginTop: 8,\r\n                            paddingVertical: 4,\r\n                            paddingHorizontal: 8,\r\n                            textAlign: 'center',\r\n                            width: '85%'\r\n                        }}\r\n                    >\r\n                        {props.handDecisionSet[simpleCardSymbol]}\r\n                    </Text>\r\n                </View>\r\n            );\r\n        })}\r\n    </View>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\n\r\nimport {\r\n    CardSuit,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    SplitsNumber\r\n} from '../types';\r\n\r\ntype GoldHandsLevelsInfoProps = {\r\n    gameConfig: GameConfig;\r\n};\r\n\r\nconst levelsColor: Dictionary<string, number> = {\r\n    1: '#a0c5e4',\r\n    2: '#5496cf',\r\n    3: '#2e618d',\r\n    4: '#1a3750'\r\n};\r\n\r\nexport const GoldHandsLevelsInfo: React.FC<GoldHandsLevelsInfoProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    const hardEight: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Five\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.hearts,\r\n                symbol: SimpleCardSymbol.Three\r\n            }\r\n        ],\r\n        values: [8]\r\n    };\r\n    const splitNine: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.spades,\r\n                symbol: SimpleCardSymbol.Nine\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.diamonds,\r\n                symbol: SimpleCardSymbol.Nine\r\n            }\r\n        ],\r\n        values: [18]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Hand levels\r\n            </Text>\r\n\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    The level of a hand tells how many different actions must be memorized for that\r\n                    hand depending on the dealer's up card.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    For example, a Hard 8 has a single optimal action, regardless the dealer's up\r\n                    card, thus it is level 1.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardEight}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandDecisionsTable handDecisionSet={trainingHands[HandCode.Hard8].decisionSet} />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 32 }}>\r\n                    The more optimal actions you need to memorize for a hand, the higher the hand\r\n                    level is. For a 9,9 for example 4 different actions must be memorized depending\r\n                    on the dealer's up card, so it's level 4.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={splitNine}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandDecisionsTable handDecisionSet={trainingHands[HandCode.Split9s].decisionSet} />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 32 }}>\r\n                    When disabling a level, the hands on that level will never be dealt as initial\r\n                    hands if Gold hands are enabled. For example, disabling level 1 will prevent\r\n                    Hard 8 from being dealt as initial hand while disabling level 4 will prevent\r\n                    9,9.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Notice that the casino rules modify the level of some hands. For example, Hard\r\n                    16 is level 2 when Surrender is disabled but it becomes level 3 when Surrender\r\n                    is enabled. Here is a list of each hand level:\r\n                </Text>\r\n\r\n                <View style={{ flexDirection: 'row', marginBottom: 16 }}>\r\n                    {Object.keys(props.gameConfig.goldHandsLevels).map((level) => (\r\n                        <View\r\n                            key={level}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                flexDirection: 'row',\r\n                                width: '25%'\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'white', fontSize: 20 }}>{level}</Text>\r\n                            <View\r\n                                style={{\r\n                                    marginLeft: 8,\r\n                                    backgroundColor: levelsColor[parseInt(level)],\r\n                                    height: 20,\r\n                                    width: 40\r\n                                }}\r\n                            />\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                    {Object.values(trainingHands).map((trainingHand) => (\r\n                        <Text\r\n                            key={trainingHand.name}\r\n                            style={{\r\n                                backgroundColor: levelsColor[trainingHand.level],\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                marginHorizontal: '1.5%',\r\n                                marginVertical: 4,\r\n                                textAlign: 'center',\r\n                                width: '30%'\r\n                            }}\r\n                        >\r\n                            {trainingHand.name}\r\n                        </Text>\r\n                    ))}\r\n                </View>\r\n\r\n                <View style={{ marginBottom: 16 }}>\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.blackjackPeek}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.dealerHitsSoft17}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <DoublingPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        isDisabled={\r\n                            casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                            casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                        }\r\n                        ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <SplitsNumberPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.surrender}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                </View>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getHandDecisionSetLevel, handDecisionSetGetters } from '../logic/hand-decision-set';\r\nimport { AppRoute, CasinoRules, CasinoRulesKeys, RouteNames } from '../types';\r\n\r\ntype HandDecisionsProps = {\r\n    casinoRules: CasinoRules;\r\n    route: AppRoute<RouteNames.handDecisions>;\r\n};\r\n\r\nexport const HandDecisions: React.FC<HandDecisionsProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n\r\n    const trainingHand = props.route.params['trainingHand'];\r\n    const handDecisionSet = handDecisionSetGetters[trainingHand.code](casinoRules);\r\n\r\n    return (\r\n        <ScrollView\r\n            style={{\r\n                flex: 1,\r\n                paddingHorizontal: 16,\r\n                marginVertical: 16,\r\n                width: '100%'\r\n            }}\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between',\r\n                    paddingBottom: 16,\r\n                    width: '100%'\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 24 }}>{trainingHand.name} decisions</Text>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontStyle: 'italic'\r\n                    }}\r\n                >\r\n                    Level {getHandDecisionSetLevel(handDecisionSet)}\r\n                </Text>\r\n            </View>\r\n\r\n            <HandDecisionsTable handDecisionSet={handDecisionSet} />\r\n\r\n            {trainingHand.dependencies.map((dependency) => {\r\n                return dependency === CasinoRulesKeys.doubling ? (\r\n                    <DoublingPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : dependency === CasinoRulesKeys.splitsNumber ? (\r\n                    <SplitsNumberPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : (\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        ruleName={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                );\r\n            })}\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairRepresentation\r\n} from '../types';\r\n\r\ntype MissedPairsProps = {\r\n    gameConfig: GameConfig;\r\n    missedTrainingPairs: TrainingPairRepresentation[];\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const MissedPairs: React.FC<MissedPairsProps> = (props) => {\r\n    return (\r\n        <OnBoardingSection\r\n            onBoardingStep={props.onBoardingStep}\r\n            style={{ alignItems: undefined, flex: 1 }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Missed pairs\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{ flex: 1 }}\r\n            >\r\n                {props.missedTrainingPairs.length === 0 ? (\r\n                    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>\r\n                        <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                            No missed pairs so far. Nice job!\r\n                        </Text>\r\n                    </View>\r\n                ) : (\r\n                    Object.values(props.missedTrainingPairs).map((missedTrainingPair) => {\r\n                        const handName = props.trainingHands[missedTrainingPair.handCode].name;\r\n\r\n                        return (\r\n                            <View key={handName} style={{ marginBottom: 16, width: '100%' }}>\r\n                                <View\r\n                                    style={{\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row',\r\n                                        justifyContent: 'space-between'\r\n                                    }}\r\n                                >\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row'\r\n                                        }}\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName}\r\n                                        </Text>\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            vs dealer's{' '}\r\n                                        </Text>\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {missedTrainingPair.dealerSymbol}\r\n                                        </Text>\r\n                                    </View>\r\n                                    <View\r\n                                        style={{\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        <TouchableOpacity\r\n                                            onPress={\r\n                                                props.phase !== Phases.finished\r\n                                                    ? undefined\r\n                                                    : () => {\r\n                                                          const trainingPair = getSpecificTrainingPair(\r\n                                                              missedTrainingPair.handCode,\r\n                                                              missedTrainingPair.dealerSymbol,\r\n                                                              props.gameConfig.casinoRules\r\n                                                          );\r\n                                                          props.startTrainingRound(\r\n                                                              trainingPair.player,\r\n                                                              trainingPair.dealer\r\n                                                          );\r\n                                                          props.navigation.navigate(\r\n                                                              RouteNames.table\r\n                                                          );\r\n                                                      }\r\n                                            }\r\n                                        >\r\n                                            <Text\r\n                                                style={{\r\n                                                    backgroundColor: doubleColor,\r\n                                                    borderRadius: 16,\r\n                                                    color: 'white',\r\n                                                    fontSize: 20,\r\n                                                    marginBottom: 16,\r\n                                                    paddingHorizontal: 16,\r\n                                                    paddingVertical: 4,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                Train ➡️\r\n                                            </Text>\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                </View>\r\n                                <Divider />\r\n                            </View>\r\n                        );\r\n                    })\r\n                )}\r\n            </ScrollView>\r\n        </OnBoardingSection>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { doubleColor, hitColor } from '../constants';\r\nimport { CardSuit } from '../types';\r\n\r\ninterface OnboardingProps {\r\n    skipOnboardingHandler: () => void;\r\n    startOnboardingHandler: () => void;\r\n}\r\n\r\nexport const Onboarding: React.FC<OnboardingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Welcome to\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 30,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    {CardSuit.clubs}\r\n                    {CardSuit.hearts} Blackjump {CardSuit.diamonds}\r\n                    {CardSuit.spades}\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        paddingBottom: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    The app that will help you master Blackjack basic strategy\r\n                </Text>\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={true}\r\n                    onPress={props.startOnboardingHandler}\r\n                    text=\"Start onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={true}\r\n                    marginTop={16}\r\n                    onPress={props.skipOnboardingHandler}\r\n                    text=\"Skip onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { getRandomCard } from '../logic/card';\r\nimport { createDealerHand, createHand } from '../logic/hand';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { getRandomTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    BaseDecisions,\r\n    CardSuit,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingStepEvent,\r\n    Phases,\r\n    PlayerDecisions,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { Button } from './button';\r\n\r\nexport interface ActionsProps {\r\n    gameConfig: GameConfig;\r\n    handlers: {\r\n        double: () => void;\r\n        hit: () => void;\r\n        split: () => void;\r\n        stand: () => void;\r\n        surrender: () => void;\r\n    };\r\n    isDoubleEnabled: boolean;\r\n    isHitEnabled: boolean;\r\n    isSplitEnabled: boolean;\r\n    isSurrenderEnabled: boolean;\r\n    phase: Phases;\r\n    onBoardingStep: number;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n}\r\n\r\nexport const Actions: React.FC<ActionsProps> = (props) => {\r\n    const isPlayerTurn = props.phase === Phases.player;\r\n\r\n    const isDoublingAvailable =\r\n        props.gameConfig.casinoRules[CasinoRulesKeys.doubling] > Doubling.none;\r\n    const isSurrenderAvailable = props.gameConfig.casinoRules[CasinoRulesKeys.surrender];\r\n\r\n    const activeOptionalButtons = 1 + Number(isDoublingAvailable) + Number(isSurrenderAvailable);\r\n    const optionalButtonsWidth = Math.floor((100 * 100) / activeOptionalButtons) / 100;\r\n\r\n    return props.phase === Phases.finished ? (\r\n        <Button\r\n            height={112}\r\n            backgroundColor={colors[BaseDecisions.hit]}\r\n            isEnabled={true}\r\n            onPress={() => {\r\n                let dealerHand: Hand;\r\n                let playerHand: Hand;\r\n\r\n                if (\r\n                    onBoardingSteps[props.onBoardingStep] &&\r\n                    onBoardingSteps[props.onBoardingStep].event === OnBoardingStepEvent.startRound\r\n                ) {\r\n                    /* Prevent dealing a Blackjack as initial hand when onboarding is active */\r\n                    playerHand = createHand([\r\n                        {\r\n                            isBlueCard: false,\r\n                            isGoldCard: true,\r\n                            suit: CardSuit.clubs,\r\n                            symbol: SimpleCardSymbol.Seven\r\n                        },\r\n                        getRandomCard()\r\n                    ]);\r\n                    dealerHand = createDealerHand(\r\n                        props.gameConfig.casinoRules,\r\n                        SimpleCardSymbol.Six\r\n                    );\r\n                } else if (props.gameConfig.useGoldHands) {\r\n                    const trainingPair = getRandomTrainingPair(\r\n                        props.trainingHands,\r\n                        props.trainingProgress,\r\n                        props.gameConfig\r\n                    );\r\n                    playerHand = trainingPair.player;\r\n                    dealerHand = trainingPair.dealer;\r\n                } else {\r\n                    playerHand = createHand([getRandomCard(), getRandomCard()]);\r\n                    dealerHand = createDealerHand(props.gameConfig.casinoRules);\r\n                }\r\n\r\n                props.startTrainingRound(playerHand, dealerHand);\r\n            }}\r\n            text=\"Random\"\r\n            width=\"100%\"\r\n        />\r\n    ) : (\r\n        <React.Fragment>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={isPlayerTurn && props.isHitEnabled}\r\n                    onPress={props.handlers.hit}\r\n                    text={BaseDecisions.hit}\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={isPlayerTurn}\r\n                    onPress={props.handlers.stand}\r\n                    text={BaseDecisions.stand}\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[PlayerDecisions.split]}\r\n                    isEnabled={isPlayerTurn && props.isSplitEnabled}\r\n                    onPress={props.handlers.split}\r\n                    text={PlayerDecisions.split}\r\n                    width={`${optionalButtonsWidth}%`}\r\n                />\r\n                {isDoublingAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.double]}\r\n                        isEnabled={isPlayerTurn && props.isDoubleEnabled}\r\n                        onPress={props.handlers.double}\r\n                        text={PlayerDecisions.double}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n                {isSurrenderAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.surrender]}\r\n                        isEnabled={isPlayerTurn && props.isSurrenderEnabled}\r\n                        onPress={props.handlers.surrender}\r\n                        text={PlayerDecisions.surrender}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n            </View>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { dangerColor, splitColor } from '../constants';\r\nimport { DecisionEvaluation } from '../types';\r\n\r\ninterface DecisionEvaluationProps {\r\n    decisionEvaluation: DecisionEvaluation;\r\n    showDecisionsHandler?: () => void;\r\n}\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center'\r\n};\r\n\r\nexport const DecisionEvaluationComponent: React.FC<DecisionEvaluationProps> = (props) => (\r\n    <View\r\n        style={{\r\n            alignItems: 'center',\r\n            backgroundColor: props.decisionEvaluation.isHit ? splitColor : dangerColor,\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            width: '100%'\r\n        }}\r\n    >\r\n        {props.decisionEvaluation.isHit ? (\r\n            <Text style={textProperties}>Well done</Text>\r\n        ) : (\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'center',\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.handName}\r\n                </Text>\r\n                <Text style={textProperties}> must </Text>\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.dynamicDecision}\r\n                </Text>\r\n                <Text style={textProperties}> vs dealer's </Text>\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold',\r\n                        marginRight: 8\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.dealerSymbol}\r\n                </Text>\r\n                <TouchableOpacity onPress={props.showDecisionsHandler} style={{ marginTop: 8 }}>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: 'white',\r\n                            borderRadius: 16,\r\n                            color: dangerColor,\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 16,\r\n                            paddingVertical: 2,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.decisionEvaluation.handName} decisions ➡️\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )}\r\n    </View>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { Actions, ActionsProps } from '../components/actions';\r\nimport { DecisionEvaluationComponent } from '../components/decision-evaluation';\r\nimport { Divider } from '../components/divider';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    Player,\r\n    RouteNames,\r\n    TrainingHands\r\n} from '../types';\r\n\r\ntype TableProps = ActionsProps & {\r\n    dealerHand?: Hand;\r\n    decisionEvaluation?: DecisionEvaluation;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    peeking: boolean;\r\n    phase: Phases;\r\n    player: Player;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const Table: React.FC<TableProps> = (props) => (\r\n    <React.Fragment>\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableDealerHand}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ minHeight: 128, justifyContent: 'center' }}\r\n            >\r\n                {props.dealerHand && (\r\n                    <HandComponent\r\n                        hand={props.dealerHand}\r\n                        handsNumber={1}\r\n                        isCurrentHand={props.phase === Phases.dealer}\r\n                        isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                        navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\r\n                        peeking={props.peeking}\r\n                    />\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableFeedback}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ height: 80, justifyContent: 'center', width: '100%' }}\r\n            >\r\n                <Divider />\r\n                {props.decisionEvaluation ? (\r\n                    <DecisionEvaluationComponent\r\n                        decisionEvaluation={props.decisionEvaluation}\r\n                        showDecisionsHandler={\r\n                            props.onBoardingStep > -1\r\n                                ? undefined\r\n                                : () => {\r\n                                      props.navigation.navigate(RouteNames.handDecisions, {\r\n                                          trainingHand:\r\n                                              props.trainingHands[props.player.lastActionHand!]\r\n                                      });\r\n                                  }\r\n                        }\r\n                    />\r\n                ) : (\r\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingHorizontal: 8,\r\n                                paddingTop: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            Dealer must draw to 16\r\n                        </Text>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingBottom: 8,\r\n                                paddingHorizontal: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            and stand on{' '}\r\n                            {props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17]\r\n                                ? 'hard 17'\r\n                                : 'all 17s'}\r\n                        </Text>\r\n                    </View>\r\n                )}\r\n                <Divider />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tablePlayerHands}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ flex: 1 }}\r\n            >\r\n                <ScrollView\r\n                    contentContainerStyle={{\r\n                        flexGrow: 1,\r\n                        justifyContent: 'space-evenly'\r\n                    }}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {props.player.hands.map((hand, index) => (\r\n                        <HandComponent\r\n                            hand={hand}\r\n                            handsNumber={props.player.hands.length}\r\n                            isCurrentHand={\r\n                                props.phase === Phases.player && index === props.player.handIndex\r\n                            }\r\n                            isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                            key={index}\r\n                            navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\r\n                        />\r\n                    ))}\r\n                </ScrollView>\r\n            </OnBoardingSection>\r\n        </View>\r\n\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.tableActions}\r\n            onBoardingStep={props.onBoardingStep}\r\n        >\r\n            <Actions\r\n                gameConfig={props.gameConfig}\r\n                handlers={props.handlers}\r\n                isDoubleEnabled={props.isDoubleEnabled}\r\n                isHitEnabled={props.isHitEnabled}\r\n                isSplitEnabled={props.isSplitEnabled}\r\n                isSurrenderEnabled={props.isSurrenderEnabled}\r\n                phase={props.phase}\r\n                onBoardingStep={props.onBoardingStep}\r\n                startTrainingRound={props.startTrainingRound}\r\n                trainingHands={props.trainingHands}\r\n                trainingProgress={props.trainingProgress}\r\n            />\r\n        </OnBoardingSection>\r\n    </React.Fragment>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\n\r\nexport const TrainingCompleted: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingTop: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training completed\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 64, marginVertical: 32 }}>🎉🍾</Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 24, marginBottom: 32 }}>\r\n                    Congratulations! You have trained every possible hand. You can now test your\r\n                    skills in a real casino 💸💸\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20 }}>\r\n                    Master the Basic Strategy: reset the training stats from the configuration menu\r\n                    and keep practicing until you make no errors at all\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype TrainingPairsProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n};\r\n\r\nexport const TrainingPairs: React.FC<TrainingPairsProps> = (props) => {\r\n    const [unfoldedHand, setUnfoldedHand] = useState<HandCode | undefined>(HandCode.Hard5);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training pairs\r\n                </Text>\r\n            </OnBoardingSection>\r\n            <ScrollView\r\n                style={{\r\n                    flex: 1\r\n                }}\r\n                contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            >\r\n                {getObjectKeys(props.trainingProgress).map((handCode) => {\r\n                    const trainingHandStatus = props.trainingProgress[handCode];\r\n                    const handName = props.trainingHands[handCode].name;\r\n\r\n                    return (\r\n                        <OnBoardingSection\r\n                            isHighlighted={unfoldedHand === handCode}\r\n                            key={handCode}\r\n                            onBoardingStep={props.onBoardingStep}\r\n                            style={{ paddingVertical: 8, paddingHorizontal: 16, width: '100%' }}\r\n                        >\r\n                            <TouchableOpacity\r\n                                onPress={() => {\r\n                                    setUnfoldedHand(\r\n                                        unfoldedHand !== handCode ? handCode : undefined\r\n                                    );\r\n                                }}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20,\r\n                                        marginBottom: 16,\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {handName}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            {unfoldedHand && unfoldedHand === handCode && (\r\n                                <React.Fragment>\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            justifyContent: 'space-around',\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        {getObjectKeys(trainingHandStatus).map((dealerSymbol) => {\r\n                                            const backgroundColor =\r\n                                                trainingHandStatus[dealerSymbol] ===\r\n                                                TrainingPairStatus.untrained\r\n                                                    ? '#333'\r\n                                                    : trainingHandStatus[dealerSymbol] ===\r\n                                                      TrainingPairStatus.passed\r\n                                                    ? 'lightgreen'\r\n                                                    : 'lightcoral';\r\n\r\n                                            return (\r\n                                                <TouchableOpacity\r\n                                                    key={dealerSymbol}\r\n                                                    onPress={\r\n                                                        props.onBoardingStep > -1 ||\r\n                                                        props.phase !== Phases.finished\r\n                                                            ? undefined\r\n                                                            : () => {\r\n                                                                  const trainingPair = getSpecificTrainingPair(\r\n                                                                      handCode,\r\n                                                                      dealerSymbol,\r\n                                                                      props.gameConfig.casinoRules\r\n                                                                  );\r\n                                                                  props.startTrainingRound(\r\n                                                                      trainingPair.player,\r\n                                                                      trainingPair.dealer\r\n                                                                  );\r\n                                                                  props.navigation.navigate(\r\n                                                                      RouteNames.table\r\n                                                                  );\r\n                                                              }\r\n                                                    }\r\n                                                    style={{\r\n                                                        alignItems: 'center',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        borderRadius: 8,\r\n                                                        marginBottom: 8,\r\n                                                        paddingVertical: 4,\r\n                                                        width: '18%'\r\n                                                    }}\r\n                                                >\r\n                                                    <Text\r\n                                                        style={{\r\n                                                            color: 'white',\r\n                                                            fontSize: 20,\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        {dealerSymbol}\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                            );\r\n                                        })}\r\n                                    </View>\r\n                                    <TouchableOpacity\r\n                                        onPress={\r\n                                            props.onBoardingStep > -1\r\n                                                ? undefined\r\n                                                : () => {\r\n                                                      props.navigation.navigate(\r\n                                                          RouteNames.handDecisions,\r\n                                                          {\r\n                                                              trainingHand:\r\n                                                                  props.trainingHands[handCode]\r\n                                                          }\r\n                                                      );\r\n                                                  }\r\n                                        }\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                backgroundColor: doubleColor,\r\n                                                borderRadius: 16,\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginVertical: 16,\r\n                                                marginHorizontal: 24,\r\n                                                paddingVertical: 4,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName} decisions ➡️\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                </React.Fragment>\r\n                            )}\r\n                            <Divider />\r\n                        </OnBoardingSection>\r\n                    );\r\n                })}\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Audio } from 'expo-av';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport hitSoundMp3 from './assets/hit.mp3';\r\nimport missSoundMp3 from './assets/miss.mp3';\r\nimport {\r\n    getGameConfig,\r\n    getHasCompletedOnboarding,\r\n    getPlayerEarnings,\r\n    getTrainingProgress,\r\n    updateHasCompletedOnboarding,\r\n    updateTrainingProgress\r\n} from './src/async-storage';\r\nimport { NavBar } from './src/components/nav-bar';\r\nimport { OnboardingBar } from './src/components/onboarding-bar';\r\nimport { tableColor } from './src/constants';\r\nimport { getNextTrainingStatus, handleDealerTurn } from './src/logic/app-state';\r\nimport { evaluateDecision } from './src/logic/basic-strategy';\r\nimport { getRandomCard, symbolToSimpleSymbol } from './src/logic/card';\r\nimport { getDefaultGameConfig } from './src/logic/game-config';\r\nimport {\r\n    canBeDealerBlackjack,\r\n    canDouble,\r\n    canHit,\r\n    canSplit,\r\n    canSurrender,\r\n    isDealerBlackjack,\r\n    isFinished,\r\n    revealDealerHoleCard\r\n} from './src/logic/hand';\r\nimport { handToHandCode } from './src/logic/hand';\r\nimport { onBoardingSteps } from './src/logic/onboarding';\r\nimport {\r\n    createPlayer,\r\n    doubleCurrentHand,\r\n    getCurrentHand,\r\n    hitCurrentHand,\r\n    initializeHands,\r\n    isLastHand,\r\n    splitCurrentHand,\r\n    standCurrentHand,\r\n    startNextHand,\r\n    surrenderCurrentHand\r\n} from './src/logic/player';\r\nimport { getDefaultTrainingHands, getTrainingHands } from './src/logic/training-hand';\r\nimport { allTrainingPairsNumber } from './src/logic/training-pair';\r\nimport {\r\n    getAreGoldHandsBlockingProgress,\r\n    getDefaultTrainingStatus,\r\n    retrieveTrainingStatus\r\n} from './src/logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    Hand,\r\n    HandCode,\r\n    initialRouteName,\r\n    OnBoardingStepEvent,\r\n    Phases,\r\n    Player,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    RouteNames,\r\n    RouteParams,\r\n    TrainingStatus\r\n} from './src/types';\r\nimport { playSound } from './src/utils';\r\nimport { BasicStrategyTable } from './src/views/basic-strategy-table';\r\nimport { BlueCardsInfo } from './src/views/blue-cards-info';\r\nimport { ConfigMenu } from './src/views/config-menu';\r\nimport { GoldHandsInfo } from './src/views/gold-hands-info';\r\nimport { GoldHandsLevelsInfo } from './src/views/gold-hands-levels-info';\r\nimport { HandDecisions } from './src/views/hand-decisions';\r\nimport { MissedPairs } from './src/views/missed-pairs';\r\nimport { Onboarding } from './src/views/onboarding';\r\nimport { Table } from './src/views/table';\r\nimport { TrainingCompleted } from './src/views/training-completed';\r\nimport { TrainingPairs } from './src/views/training-pairs';\r\n\r\nconst Stack = createStackNavigator<RouteParams>();\r\nlet navigationListener: Function | undefined;\r\n\r\nconst initializeSounds = () =>\r\n    Promise.all([Audio.Sound.createAsync(hitSoundMp3), Audio.Sound.createAsync(missSoundMp3)])\r\n        .then((results) => ({\r\n            hit: results[0].sound,\r\n            miss: results[1].sound\r\n        }))\r\n        .catch((errors) => {\r\n            console.log(errors);\r\n            /* Failing to load audio is not a critical issue */\r\n            return undefined;\r\n        });\r\n\r\nexport default function App() {\r\n    const [areGoldHandsBlockingProgress, setAreGoldHandsBlockingProgress] = useState(false);\r\n    const [currentRoute, setCurrentRoute] = useState<string>(initialRouteName);\r\n    const [dealerHand, setDealerHand] = useState<Hand>();\r\n    const [decisionEvaluation, setDecisionEvaluation] = useState<DecisionEvaluation>();\r\n    const [decisionEvaluationTimeout, setDecisionEvaluationTimeout] = useState(0);\r\n    const [gameConfig, setGameConfig] = useState(getDefaultGameConfig());\r\n    const [onBoardingStep, setOnBoardingStep] = useState(-1);\r\n    const [peeking, setPeeking] = useState(false);\r\n    const [phase, setPhase] = useState<Phases>(Phases.finished);\r\n    const [player, setPlayer] = useState<Player>(createPlayer());\r\n    const [trainingHands, setTrainingHands] = useState(getDefaultTrainingHands());\r\n    const [sounds, setSounds] = useState<{ hit: Audio.Sound; miss: Audio.Sound }>();\r\n    const [trainingStatus, setTrainingStatus] = useState(getDefaultTrainingStatus());\r\n\r\n    const navigationRef = useRef<NavigationContainerRef>(null);\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            getGameConfig(gameConfig),\r\n            getHasCompletedOnboarding(),\r\n            getPlayerEarnings(),\r\n            getTrainingProgress(),\r\n            initializeSounds()\r\n        ]).then((results) => {\r\n            setGameConfig(results[0]);\r\n            const nextTrainingHands = getTrainingHands(results[0].casinoRules);\r\n            setTrainingHands(nextTrainingHands);\r\n\r\n            if (!results[1]) {\r\n                ((navigationRef.current as unknown) as AppNavigation).navigate(\r\n                    RouteNames.onboarding\r\n                );\r\n            }\r\n\r\n            if (results[2]) {\r\n                setPlayer({ ...player, cash: results[2] });\r\n            }\r\n\r\n            if (results[3]) {\r\n                const nextTrainingStatus = retrieveTrainingStatus(results[3]);\r\n\r\n                setTrainingStatus(nextTrainingStatus);\r\n                setAreGoldHandsBlockingProgress(\r\n                    getAreGoldHandsBlockingProgress(\r\n                        results[0],\r\n                        nextTrainingHands,\r\n                        results[3],\r\n                        getProgress(nextTrainingStatus)\r\n                    )\r\n                );\r\n            }\r\n\r\n            setSounds(results[4]);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (navigationRef.current && !navigationListener) {\r\n            navigationListener = navigationRef.current.addListener('state', (event) => {\r\n                setCurrentRoute(event.data.state!.routes[event.data.state!.index!].name);\r\n            });\r\n        }\r\n    }, [navigationRef.current]);\r\n\r\n    const currentHand = getCurrentHand(player);\r\n    const isDoubleEnabled =\r\n        currentHand !== undefined && canDouble(currentHand, player.hands, gameConfig.casinoRules);\r\n    const isHitEnabled = currentHand !== undefined && canHit(player.hands, gameConfig.casinoRules);\r\n    const isSplitEnabled =\r\n        currentHand !== undefined &&\r\n        canSplit(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const isSurrenderEnabled =\r\n        currentHand !== undefined &&\r\n        canSurrender(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const currentDealerSymbol = dealerHand && symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const updateOnBoardingStep = (direction: 'forward' | 'backward') => {\r\n        const nextStep = onBoardingStep + (direction === 'forward' ? 1 : -1);\r\n        onBoardingSteps[nextStep] &&\r\n            onBoardingSteps[nextStep].load &&\r\n            onBoardingSteps[nextStep].load!((navigationRef.current as unknown) as AppNavigation);\r\n        setOnBoardingStep(nextStep);\r\n    };\r\n\r\n    const exitOnboarding = () => {\r\n        setOnBoardingStep(-1);\r\n        updateHasCompletedOnboarding(true);\r\n        ((navigationRef.current as unknown) as AppNavigation).navigate(RouteNames.table);\r\n    };\r\n\r\n    const getProgress = (_trainingStatus: TrainingStatus) =>\r\n        Math.floor((_trainingStatus.attemptedTrainingPairs * 1000) / allTrainingPairsNumber) / 10;\r\n    const progress = getProgress(trainingStatus);\r\n\r\n    useEffect(() => {\r\n        if (decisionEvaluationTimeout) {\r\n            clearTimeout(decisionEvaluationTimeout);\r\n        }\r\n        if (decisionEvaluation && decisionEvaluation.isHit) {\r\n            const nextTimeout = setTimeout(() => {\r\n                setDecisionEvaluation(undefined);\r\n            }, 1000);\r\n            setDecisionEvaluationTimeout(nextTimeout);\r\n        }\r\n    }, [decisionEvaluation]);\r\n\r\n    useEffect(() => {\r\n        if (phase === 'dealer') {\r\n            handleDealerTurn(dealerHand!, gameConfig, player, setDealerHand, setPhase, setPlayer);\r\n        }\r\n    }, [phase, dealerHand]);\r\n\r\n    const startTrainingRound = (playerHand: Hand, dealerHand: Hand) => {\r\n        const nextPlayer = { ...player };\r\n        initializeHands(nextPlayer, playerHand);\r\n\r\n        if (\r\n            gameConfig.casinoRules[CasinoRulesKeys.holeCard] &&\r\n            gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            canBeDealerBlackjack(dealerHand)\r\n        ) {\r\n            setPeeking(true);\r\n            setTimeout(() => {\r\n                setPeeking(false);\r\n                if (isDealerBlackjack(dealerHand)) {\r\n                    revealDealerHoleCard(dealerHand);\r\n                    setPhase(Phases.dealer);\r\n                } else {\r\n                    setPhase(Phases.player);\r\n                }\r\n            }, 1500);\r\n        } else {\r\n            setPhase(\r\n                isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)\r\n                    ? Phases.dealer\r\n                    : Phases.player\r\n            );\r\n        }\r\n\r\n        setDealerHand(dealerHand);\r\n        setPlayer(nextPlayer);\r\n        setDecisionEvaluation(undefined);\r\n\r\n        if (\r\n            onBoardingSteps[onBoardingStep] &&\r\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.startRound\r\n        ) {\r\n            updateOnBoardingStep('forward');\r\n        }\r\n    };\r\n\r\n    const finishCurrentHand = (player: Player) => {\r\n        if (isLastHand(player)) {\r\n            setPhase(Phases.dealer);\r\n            // By setting the phase to dealer, the corresponding useEffect hook will be executed\r\n        } else {\r\n            const nextPlayer = { ...player };\r\n            startNextHand(\r\n                nextPlayer,\r\n                gameConfig.useBlueCards,\r\n                currentDealerSymbol!,\r\n                trainingHands,\r\n                trainingStatus.trainingProgress\r\n            );\r\n            setPlayer(nextPlayer);\r\n            if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n                finishCurrentHand(nextPlayer);\r\n            }\r\n        }\r\n    };\r\n\r\n    const evaluatePlayerDecision = (playerDecision: PlayerDecision, hand: Hand) => {\r\n        const nextDecisionEvaluation = evaluateDecision(\r\n            hand,\r\n            dealerHand!,\r\n            trainingHands,\r\n            {\r\n                canDouble: isDoubleEnabled,\r\n                canSplit: isSplitEnabled,\r\n                canSurrender: isSurrenderEnabled\r\n            },\r\n            playerDecision\r\n        );\r\n\r\n        if (gameConfig.isSoundEnabled && sounds) {\r\n            playSound(nextDecisionEvaluation.isHit ? sounds.hit : sounds.miss);\r\n        }\r\n\r\n        setDecisionEvaluation(nextDecisionEvaluation);\r\n\r\n        const handCode = handToHandCode(currentHand);\r\n        let nextTrainingStatus = getNextTrainingStatus(\r\n            trainingStatus,\r\n            nextDecisionEvaluation.isHit,\r\n            handCode,\r\n            currentDealerSymbol!\r\n        );\r\n\r\n        if (handCode === HandCode.Split5s) {\r\n            // A 5,5 must also set the corresponding state for Hard 10\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard10,\r\n                currentDealerSymbol!\r\n            );\r\n        } else if (handCode === HandCode.Split10s) {\r\n            // A 10,10 must also set the corresponding state for Hard 20\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard20,\r\n                currentDealerSymbol!\r\n            );\r\n        }\r\n\r\n        setTrainingStatus(nextTrainingStatus);\r\n        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n\r\n        if (\r\n            onBoardingSteps[onBoardingStep] &&\r\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.playerAction\r\n        ) {\r\n            updateOnBoardingStep('forward');\r\n        }\r\n\r\n        if (nextTrainingStatus.isCompleted && !trainingStatus.isCompleted) {\r\n            navigationRef.current?.navigate(RouteNames.trainingCompleted);\r\n        }\r\n\r\n        setAreGoldHandsBlockingProgress(\r\n            getAreGoldHandsBlockingProgress(\r\n                gameConfig,\r\n                trainingHands,\r\n                nextTrainingStatus.trainingProgress,\r\n                getProgress(nextTrainingStatus)\r\n            )\r\n        );\r\n    };\r\n\r\n    const doubleHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.double, currentHand);\r\n        doubleCurrentHand(nextPlayer, getRandomCard());\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const hitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.hit, currentHand);\r\n        hitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.useBlueCards,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(currentHand, nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const standHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.stand, currentHand);\r\n        standCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const splitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.split, currentHand);\r\n        splitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.useBlueCards,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const surrenderHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.surrender, currentHand);\r\n        surrenderCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    return (\r\n        <NavigationContainer ref={navigationRef}>\r\n            <StatusBar hidden={true} />\r\n            <NavBar\r\n                areGoldHandsBlockingProgress={areGoldHandsBlockingProgress}\r\n                attemptedTrainingPairs={trainingStatus.attemptedTrainingPairs}\r\n                navigation={(navigationRef.current as unknown) as AppNavigation}\r\n                onBoardingStep={onBoardingStep}\r\n                passedTrainingPairs={trainingStatus.passedTrainingPairs}\r\n                player={player}\r\n                progress={progress}\r\n                routeName={currentRoute}\r\n            />\r\n            <Stack.Navigator\r\n                initialRouteName={initialRouteName}\r\n                screenOptions={{\r\n                    headerShown: false,\r\n                    cardStyle: {\r\n                        backgroundColor: tableColor\r\n                    }\r\n                }}\r\n            >\r\n                <Stack.Screen name={RouteNames.basicStrategyTable}>\r\n                    {() => <BasicStrategyTable casinoRules={gameConfig.casinoRules} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.blueCardsInfo} component={BlueCardsInfo} />\r\n                <Stack.Screen name={RouteNames.configMenu}>\r\n                    {(props) => (\r\n                        <ConfigMenu\r\n                            areGoldHandsBlockingProgress={areGoldHandsBlockingProgress}\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            progress={progress}\r\n                            setGameConfig={(_gameConfig) => {\r\n                                const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\r\n                                setAreGoldHandsBlockingProgress(\r\n                                    getAreGoldHandsBlockingProgress(\r\n                                        _gameConfig,\r\n                                        nextTrainingHands,\r\n                                        trainingStatus.trainingProgress,\r\n                                        progress\r\n                                    )\r\n                                );\r\n                                setGameConfig(_gameConfig);\r\n                                setTrainingHands(nextTrainingHands);\r\n                            }}\r\n                            setTrainingStatus={(_trainingStatus) => {\r\n                                setTrainingStatus(_trainingStatus);\r\n                                setAreGoldHandsBlockingProgress(\r\n                                    getAreGoldHandsBlockingProgress(\r\n                                        gameConfig,\r\n                                        trainingHands,\r\n                                        _trainingStatus.trainingProgress,\r\n                                        getProgress(_trainingStatus)\r\n                                    )\r\n                                );\r\n                                setPlayer({ ...player, cash: 0 });\r\n                            }}\r\n                            trainingHands={trainingHands}\r\n                            trainingStatus={trainingStatus}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.goldHandsInfo} component={GoldHandsInfo} />\r\n                <Stack.Screen name={RouteNames.goldHandsLevelsInfo}>\r\n                    {() => <GoldHandsLevelsInfo gameConfig={gameConfig} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.handDecisions}>\r\n                    {(props) => (\r\n                        <HandDecisions casinoRules={gameConfig.casinoRules} route={props.route} />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.missedPairs}>\r\n                    {(props) => (\r\n                        <MissedPairs\r\n                            gameConfig={gameConfig}\r\n                            missedTrainingPairs={trainingStatus.missedTrainingPairs}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.onboarding}>\r\n                    {() => (\r\n                        <Onboarding\r\n                            skipOnboardingHandler={exitOnboarding}\r\n                            startOnboardingHandler={() => updateOnBoardingStep('forward')}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.table}>\r\n                    {(props) => (\r\n                        <Table\r\n                            dealerHand={dealerHand}\r\n                            decisionEvaluation={decisionEvaluation}\r\n                            gameConfig={gameConfig}\r\n                            handlers={{\r\n                                double: doubleHandler,\r\n                                hit: hitHandler,\r\n                                split: splitHandler,\r\n                                stand: standHandler,\r\n                                surrender: surrenderHandler\r\n                            }}\r\n                            isDoubleEnabled={isDoubleEnabled}\r\n                            isHitEnabled={isHitEnabled}\r\n                            isSplitEnabled={isSplitEnabled}\r\n                            isSurrenderEnabled={isSurrenderEnabled}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            peeking={peeking}\r\n                            phase={phase}\r\n                            player={player}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.trainingCompleted} component={TrainingCompleted} />\r\n                <Stack.Screen name={RouteNames.trainingPairs}>\r\n                    {(props) => (\r\n                        <TrainingPairs\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n            </Stack.Navigator>\r\n\r\n            {onBoardingStep > -1 && (\r\n                <OnboardingBar\r\n                    exitOnboarding={exitOnboarding}\r\n                    nextStepHandler={() => updateOnBoardingStep('forward')}\r\n                    onBoardingStep={onBoardingStep}\r\n                    previousStepHandler={() => updateOnBoardingStep('backward')}\r\n                />\r\n            )}\r\n        </NavigationContainer>\r\n    );\r\n}\r\n","import { GameConfig } from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\n\r\nexport const getDefaultGameConfig = (): GameConfig => ({\r\n    casinoRules: getDefaultCasinoRules(),\r\n    goldHandsLevels: {\r\n        1: true,\r\n        2: true,\r\n        3: true,\r\n        4: true\r\n    },\r\n    isDealerAnimationEnabled: true,\r\n    isSoundEnabled: true,\r\n    useBlueCards: false,\r\n    useGoldHands: false\r\n});\r\n"],"sourceRoot":""}