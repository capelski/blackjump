{"version":3,"sources":["assets/hit.mp3","assets/miss.mp3","assets/card-slide.mp3","src/types/card.ts","src/types/casino-rules.ts","src/types/decisions.ts","src/types/hand.ts","src/types/navigation.ts","src/types/onboarding.ts","src/types/phases.ts","src/types/training-pair.ts","src/async-storage.ts","src/constants.ts","src/utils.ts","src/logic/dealer-symbols.ts","src/logic/casino-rules.ts","src/logic/hand-decision-set.ts","src/logic/training-hand.ts","src/logic/card.ts","src/logic/hand-code.ts","src/logic/hand.ts","src/logic/training-pair.ts","src/logic/training-status.ts","src/components/nav-bar-items/config-button.tsx","src/components/nav-bar-items/earnings-indicator.tsx","src/components/nav-bar-items/precision-indicator.tsx","src/components/nav-bar-items/progress-indicator.tsx","src/logic/onboarding.ts","src/components/onboarding-section.tsx","src/components/nav-bar.tsx","src/components/button.tsx","src/components/onboarding-bar.tsx","src/logic/player.ts","src/logic/app-state.ts","src/logic/basic-strategy.ts","src/logic/game-config.ts","src/components/casino-rules/doubling-picker.tsx","src/components/switcher.tsx","src/components/casino-rules/rule-switcher.tsx","src/components/casino-rules/splits-number-picker.tsx","src/views/basic-strategy-table.tsx","src/logic/sound-queue.ts","src/components/card-component.tsx","src/components/hand-component.tsx","src/views/blackjack-peek.tsx","src/components/divider.tsx","src/components/help-icon.tsx","src/views/config-menu.tsx","src/views/earnings-chart.tsx","src/components/hand-decisions-table.tsx","src/views/hand-decisions.tsx","src/views/hit-split-aces.tsx","src/views/missed-pairs.tsx","src/views/onboarding.tsx","src/components/actions.tsx","src/components/decision-evaluation.tsx","src/views/table.tsx","src/views/training-completed.tsx","src/views/training-pairs.tsx","src/views/untrained-pairs-priority.tsx","src/blackjump.tsx","App.tsx"],"names":["module","exports","CardSuit","SimpleCardSymbol","SpecialCardSymbol","CasinoRulesKeys","Doubling","SplitsNumber","BaseDecisions","DynamicDecisions","PlayerDecisions","HandCode","HandOutcome","RouteNames","OnBoardingSections","OnBoardingStepEvent","Phases","TrainingPairStatus","initialRouteName","table","updatePlayerEarnings","playerEarnings","AsyncStorage","setItem","JSON","stringify","catch","updatePlayerEarningsHistorical","playerEarningsHistorical","updateTrainingProgress","TrainingProgress","colors","hit","stand","double_hit","double_stand","split_hit","split_stand","split_surrender_hit","surrender_hit","surrender_split_hit","surrender_stand","double","split","surrender","cartesianProduct","firstArray","secondArray","elementBuilder","reduce","product","x","concat","map","y","getObjectKeys","object","Object","keys","getRandomItem","items","Math","round","random","length","playSound","sound","stopAsync","then","playAsync","allDealerSymbols","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Ace","getUntrainedDealerSymbols","trainingHandStatus","filter","dealerSymbol","passed","getDefaultCasinoRules","blackjackPeek","dealerHitsSoft17","doubling","nineToElevenSoft","doublingAfterSplit","hitSplitAces","splitsNumber","three","alwaysHit","alwaysStand","handDecisionSetGetters","Split2s","casinoRules","none","Split3s","Split4s","Split5s","tenToEleven","Split6s","Split7s","Split8s","Split9s","Split10s","SplitAs","Soft13","anyPair","Soft14","Soft15","Soft16","Soft17","Soft18","Soft19","Soft20","Hard5","Hard6","Hard7","Hard8","Hard9","nineToEleven","Hard10","Hard11","Hard12","Hard13","Hard14","Hard15","Hard16","Hard17","Hard18","Hard19","Hard20","getSelectedTrainingHands","trainingHands","selectedHands","values","hand","code","getTrainingHands","decisionSet","dependencies","name","getUntrainedTrainingHands","trainingProgress","trainingHand","cardsValue","Jack","Queen","King","createCard","symbol","suit","isHoleCard","isRandom","undefined","getRandomSuit","suits","clubs","diamonds","hearts","spades","symbols","deck","getCardEffectiveValue","card","getCardValues","getCardsValues","cards","options","numbers","numbersDictionary","dictionary","next","removeDuplicates","peeking","reducedValues","currentValues","getRandomCard","randomCard","simpleSymbolToSymbol","simpleSymbol","tenPointsSymbols","symbolToSimpleSymbol","indexOf","valueToSymbol","number","String","isSoftHandCode","handCode","includes","isSplitHandCode","areHandsSplitAces","hands","canSplit","handsNumber","createDealerHand","dealerSuit","dealerCards","push","createHand","bet","dealCard","getCardForUntrainedHand","playerHand","nextCard","isPlayerHandSoft","playerHandValues","valuesToUntrainedHands","valueToReachThisHand","isHandUntrainedForDealerSymbol","untrained","softDifference","parseInt","hardDifference","value","getHandEffectiveValue","effectiveValue","some","v","reverse","find","getHandValidValues","handCodeToHand","handSymbols","getSplitHandSymbols","handValues","s","complementarySymbol","floor","getSoftHandSymbols","minValue","max","maxValue","min","firstValue","secondValue","getHardHandSymbols","handToHandCode","c","join","hasHoleCard","isBlackjack","isBust","isFinished","isAcesPairHand","isAcesPair","revealDealerHoleCard","allTrainingPairsNumber","getSpecificTrainingPair","dealer","player","getDefaultTrainingStatus","attemptedTrainingPairs","isCompleted","isProgressBlocked","missedTrainingPairs","passedTrainingPairs","reducedTrainingProgress","reducedDealerSymbols","getIsProgressBlocked","trainingStatus","selectedHandsOnly","getProgressPercentage","getNextTrainingStatus","gameConfig","isHit","currentHandCode","currentDealerSymbol","currentHandTrainingStatus","missed","nextAttemptedTrainingPairs","nextMissedTrainingPairs","missedTrainingPair","getNextMissedTrainingPairs","nextPassedTrainingHands","nextTrainingStatus","isTrainingCompleted","reduceTrainingPairProgress","trainingPairStatus","reducedTrainingStatus","retrieveTrainingStatus","reduceTrainingHandProgress","ConfigButton","props","TouchableOpacity","onPress","isEnabled","routeName","navigation","navigate","configMenu","goBack","style","alignItems","flexGrow","justifyContent","width","Fragment","height","viewBox","fill","d","progress","View","position","right","bottom","Text","color","fontWeight","EarningsIndicator","earningsColor","earnings","earningsChart","flexDirection","fontSize","marginTop","transform","PrecisionIndicator","precision","missedPairs","marginLeft","ProgressIndicator","trainingPairs","onBoardingSteps","activeSection","tableActions","event","startRound","hideNextButton","load","text","tablePlayerHands","hidePreviousButton","tableDealerHand","playerAction","tableFeedback","progressIndicator","precisionIndicator","earningsIndicator","configMenuButton","basicStrategyTable","appSettings","resetTraining","OnBoardingSection","isOnboardingActive","onBoardingStep","isHighlighted","children","backgroundColor","opacity","top","left","animateIndicator","Animated","sequence","timing","toValue","duration","useNativeDriver","start","NavBar","earningsPosition","useMemo","Value","precisionPosition","progressPosition","progressPercentage","useEffect","cash","translateX","Button","marginBottom","textColor","textSize","OnboardingBar","currentStep","previousStepHandler","padding","nextStepHandler","exitOnboarding","getCurrentHand","handIndex","resolvePlayerEarnings","dealerHand","handOutcome","playerHandValue","dealerHandValue","bust","blackjack","dealerWins","playerWins","outcome","resolveHand","mustDealerDraw","handEffectiveValue","evaluateDynamicDecision","dynamicDecision","dynamicConditions","canDouble","canSurrender","DoublingPicker","paddingTop","flex","selectedValue","onValueChange","newValue","nextDoubling","nextCasinoRules","Item","label","Switcher","disabled","Switch","marginRight","trackColor","true","false","RuleSwitcher","ruleName","SplitsNumberPicker","nextSplitsNumber","one","two","actionsAbbreviationMap","handCodesAbbreviationMap","cellWidth","TextCell","marginVertical","paddingVertical","textAlign","BasicStrategyTable","useState","setCasinoRules","ScrollView","Linking","fontStyle","paddingHorizontal","cardSymbol","action","pushSound","soundQueue","sounds","isActive","playNextSound","nextSound","pop","setTimeout","CardComponent","cardSlideSound","setCardSlideSound","animateCard","skipAnimation","parallel","animationsDuration","isSoundEnabled","Audio","Sound","createAsync","cardSlideSoundMp3","volume","result","setValue","cardColor","borderRadius","translateY","untrainedPairsPriority","HandComponent","displayValues","isCurrentHand","flexWrap","maxWidth","index","BlackjackPeek","margin","Divider","HelpIcon","ConfigMenu","isDealerAnimationEnabled","setIsDealerAnimationEnabled","setIsProgressBlocked","setIsSoundEnabled","setSelectedHands","setSelectedHandsOnly","setTrainingHands","setUntrainedPairsPriority","isSomeHandSelected","_selectedHandsOnly","_selectedHands","isProgressBlockedHandler","nextSelectedHandsOnly","nextSelectedHands","nextTrainingHands","casinoRuleChangeHandler","isSaveButtonEnabled","key","contentContainerStyle","paddingBottom","borderLeftColor","borderLeftWidth","setGameConfig","phase","finished","onboarding","body","Platform","OS","window","confirm","resetTrainingStatus","Alert","alert","getChartDimensions","data","absoluteMax","ceil","reduced","abs","Number","MIN_VALUE","primeFactors","factors","divisor","getPrimeFactors","boundaries","scale","Dimensions","get","screenHorizontalMargin","getCurrentPage","nextIndex","slice","EarningsChart","dimensions","earningsHistorical","page","setPage","formattedData","boundaryDots","boundaryDotsWidth","chartWidth","source","getFormattedData","marginHorizontal","overflow","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","linejoinType","propsForLabels","datasets","labels","segments","withVerticalLines","HandDecisionsTable","handDecisionSet","simpleCardSymbol","HandDecisions","route","params","previousValue","ranges","dependency","HitSplitAces","textProperties","boldTextProperties","MissedPairs","handName","trainingPair","startTrainingRound","Onboarding","startOnboardingHandler","skipOnboardingHandler","Actions","isPlayerTurn","isDoublingAvailable","isSurrenderAvailable","activeOptionalButtons","optionalButtonsWidth","untrainedTrainingHands","randomTrainingHand","untrainedDealerSymbols","randomDealerSymbol","getUntrainedTrainingPair","isHitEnabled","handlers","isSplitEnabled","isDoubleEnabled","isSurrenderEnabled","DecisionEvaluationComponent","decisionEvaluation","showDecisionsHandler","Table","minHeight","handDecisions","lastActionHand","TrainingCompleted","TrainingPairs","unfoldedHand","setUnfoldedHand","UntrainedPairsPriority","hardNine","navigationListener","Stack","createStackNavigator","BlackJump","currentRoute","setCurrentRoute","setDealerHand","setDecisionEvaluation","decisionEvaluationTimeout","setDecisionEvaluationTimeout","setOnBoardingStep","setPeeking","setPhase","setPlayer","setSounds","setTrainingStatus","navigationRef","useRef","currentGameConfig","Promise","all","getItem","storedGameConfig","parse","hitSoundMp3","missSoundMp3","results","miss","errors","console","log","_gameConfig","hasCompletedOnboarding","_sounds","current","addListener","state","routes","currentHand","isHandWithTwoCards","isSingleHand","contains9To11","handValue","is10To11","is9To11","updateOnBoardingStep","direction","nextStep","clearTimeout","nextTimeout","nextDealerHand","nextCash","nextEarningsHistorical","handleDealerTurn","saveGameConfig","nextGameConfig","updateGameConfig","nextPlayer","initialHand","initializeHands","visibleCard","canBeDealerBlackjack","cardValues","isDealerBlackjack","finishCurrentHand","isLastHand","nextHand","startNextHand","evaluatePlayerDecision","playerDecision","nextDecisionEvaluation","optimalDecision","evaluateDecision","trainingCompleted","doubleHandler","doubleCurrentHand","hitHandler","hitCurrentHand","standHandler","standCurrentHand","splitHandler","firstHand","secondHand","splice","splitCurrentHand","surrenderHandler","surrenderCurrentHand","NavigationContainer","ref","StatusBar","hidden","Navigator","screenOptions","headerShown","cardStyle","Screen","component","App"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,wECS/BC,EAWAC,EAaAC,ECvBAC,EAUAC,EAQAC,EC1BAC,EAoBAC,EAaAC,EC1BAC,EAqCAC,ECtCAC,E,mJJCAX,K,eAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAWAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,E,SAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,SAAAA,E,UAAAA,M,cAaAC,K,SAAAA,E,UAAAA,E,UAAAA,M,cCvBAC,K,+BAAAA,E,uCAAAA,E,oBAAAA,E,0CAAAA,E,8BAAAA,E,6BAAAA,E,uBAAAA,M,cAUAC,O,eAAAA,I,6BAAAA,I,+BAAAA,I,uCAAAA,I,sBAAAA,M,cAQAC,O,eAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,cC1BAC,K,UAAAA,E,eAAAA,M,cAoBAC,K,0BAAAA,E,8BAAAA,E,wBAAAA,E,4BAAAA,E,wCAAAA,E,gCAAAA,E,wCAAAA,E,qCAAAA,M,cAaAC,K,gBAAAA,E,cAAAA,E,uBAAAA,M,cC1BAC,K,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,cAqCAC,K,sBAAAA,E,YAAAA,E,yBAAAA,E,yBAAAA,E,aAAAA,M,cCtCAC,K,wCAAAA,E,8BAAAA,E,wBAAAA,E,8BAAAA,E,8BAAAA,E,4BAAAA,E,0BAAAA,E,wBAAAA,E,cAAAA,E,sCAAAA,E,8BAAAA,E,iDAAAA,M,KAeL,ICrBKC,EAyBAC,EC3BAC,ECaAC,EHUCC,EAAmBL,EAAWM,O,SCrB/BL,K,0BAAAA,E,wCAAAA,E,0BAAAA,E,oCAAAA,E,sCAAAA,E,0BAAAA,E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","file":"static/js/app.7e299fe7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hit.dc863917.mp3\";","module.exports = __webpack_public_path__ + \"static/media/miss.497d59f1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-slide.d80ce25b.mp3\";","import { Dictionary } from './dictionary';\n\nexport interface Card {\n    isHoleCard?: boolean;\n    isRandom: boolean;\n    suit: CardSuit;\n    symbol: CardSymbol;\n}\n\nexport enum CardSuit {\n    clubs = '\\u2663',\n    diamonds = '\\u2666',\n    hearts = '\\u2665',\n    spades = '\\u2660'\n}\n\nexport type CardSymbol = SimpleCardSymbol | SpecialCardSymbol;\n\nexport type CardValues = Dictionary<number[], CardSymbol>;\n\nexport enum SimpleCardSymbol {\n    Ace = 'A',\n    Two = '2',\n    Three = '3',\n    Four = '4',\n    Five = '5',\n    Six = '6',\n    Seven = '7',\n    Eight = '8',\n    Nine = '9',\n    Ten = '10'\n}\n\nexport enum SpecialCardSymbol {\n    Jack = 'J',\n    Queen = 'Q',\n    King = 'K'\n}\n\nexport type TenPointsCardSymbol = SimpleCardSymbol.Ten | SpecialCardSymbol;\n","export interface CasinoRules {\n    [CasinoRulesKeys.blackjackPeek]: boolean;\n    [CasinoRulesKeys.dealerHitsSoft17]: boolean;\n    [CasinoRulesKeys.doubling]: Doubling;\n    [CasinoRulesKeys.doublingAfterSplit]: boolean;\n    [CasinoRulesKeys.hitSplitAces]: boolean;\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber;\n    [CasinoRulesKeys.surrender]: boolean;\n}\n\nexport enum CasinoRulesKeys {\n    blackjackPeek = 'Blackjack Peek',\n    dealerHitsSoft17 = 'Dealer hits soft 17',\n    doubling = 'Doubling',\n    doublingAfterSplit = 'Doubling after split',\n    hitSplitAces = 'Hit split aces',\n    splitsNumber = 'Splits number',\n    surrender = 'Surrender'\n}\n\nexport enum Doubling {\n    none = 0,\n    tenToEleven = 1,\n    nineToEleven = 2,\n    nineToElevenSoft = 3,\n    anyPair = 4\n}\n\nexport enum SplitsNumber {\n    none = 0,\n    one = 1,\n    two = 2,\n    three = 3\n}\n","import { SimpleCardSymbol } from './card';\n\nexport enum BaseDecisions {\n    hit = 'Hit',\n    stand = 'Stand'\n}\n\nexport interface DecisionEvaluation {\n    dealerSymbol: SimpleCardSymbol;\n    dynamicDecision: DynamicDecision;\n    handName: string;\n    isHit: boolean;\n}\n\nexport interface DynamicConditions {\n    canDouble: boolean;\n    canSplit: boolean;\n    canSurrender: boolean;\n}\n\nexport type DynamicDecision = BaseDecisions | DynamicDecisions;\n\nexport enum DynamicDecisions {\n    double_hit = 'Double / Hit',\n    double_stand = 'Double / Stand',\n    split_hit = 'Split / Hit',\n    split_stand = 'Split / Stand',\n    split_surrender_hit = 'Split / Surrender',\n    surrender_hit = 'Surrender / Hit',\n    surrender_split_hit = 'Surrender / Split',\n    surrender_stand = 'Surrender / Stand'\n}\n\nexport type PlayerDecision = BaseDecisions | PlayerDecisions;\n\nexport enum PlayerDecisions {\n    double = 'Double',\n    split = 'Split',\n    surrender = 'Surrender'\n}\n","import { Card } from './card';\n\nexport interface Hand {\n    bet: number;\n    cards: Card[];\n    outcome?: string;\n    values: number[];\n}\n\nexport enum HandCode {\n    Split2s = '2,2',\n    Split3s = '3,3',\n    Split4s = '4,4',\n    Split5s = '5,5',\n    Split6s = '6,6',\n    Split7s = '7,7',\n    Split8s = '8,8',\n    Split9s = '9,9',\n    Split10s = '10,10',\n    SplitAs = 'A,A',\n    Soft13 = '3/13',\n    Soft14 = '4/14',\n    Soft15 = '5/15',\n    Soft16 = '6/16',\n    Soft17 = '7/17',\n    Soft18 = '8/18',\n    Soft19 = '9/19',\n    Soft20 = '10/20',\n    Hard5 = '5',\n    Hard6 = '6',\n    Hard7 = '7',\n    Hard8 = '8',\n    Hard9 = '9',\n    Hard10 = '10',\n    Hard11 = '11',\n    Hard12 = '12',\n    Hard13 = '13',\n    Hard14 = '14',\n    Hard15 = '15',\n    Hard16 = '16',\n    Hard17 = '17',\n    Hard18 = '18',\n    Hard19 = '19',\n    Hard20 = '20'\n}\n\nexport enum HandOutcome {\n    blackjack = 'Blackjack',\n    bust = 'Bust',\n    dealerWins = 'Dealer wins',\n    playerWins = 'Player wins',\n    push = 'Push'\n}\n","import { Route } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { TrainingHand } from './training-hand';\n\nexport type AppNavigation = StackNavigationProp<RouteParams>;\n\nexport type AppRoute<T extends RouteNames> = Route<T, RouteParams[T]>;\n\nexport enum RouteNames {\n    basicStrategyTable = 'basicStrategyTable',\n    blackjackPeek = 'blackjackPeek',\n    configMenu = 'configMenu',\n    earningsChart = 'earningsChart',\n    handDecisions = 'handDecisions',\n    hitSplitAces = 'hitSplitAces',\n    missedPairs = 'missedPairs',\n    onboarding = 'onboarding',\n    table = 'table',\n    trainingCompleted = 'trainingCompleted',\n    trainingPairs = 'trainingPairs',\n    untrainedPairsPriority = 'untrainedPairsPriority'\n}\n\nexport const initialRouteName = RouteNames.table;\n\nexport type RouteParams = {\n    [RouteNames.basicStrategyTable]: undefined;\n    [RouteNames.blackjackPeek]: undefined;\n    [RouteNames.configMenu]: undefined;\n    [RouteNames.earningsChart]: undefined;\n    [RouteNames.handDecisions]: {\n        trainingHand: TrainingHand;\n    };\n    [RouteNames.hitSplitAces]: undefined;\n    [RouteNames.missedPairs]: undefined;\n    [RouteNames.onboarding]: undefined;\n    [RouteNames.table]: undefined;\n    [RouteNames.trainingCompleted]: undefined;\n    [RouteNames.trainingPairs]: undefined;\n    [RouteNames.untrainedPairsPriority]: undefined;\n};\n","import { AppNavigation } from './navigation';\n\nexport enum OnBoardingSections {\n    appSettings = 'appSettings',\n    basicStrategyTable = 'basicStrategyTable',\n    casinoRules = 'casinoRules',\n    configMenuButton = 'configMenuButton',\n    earningsIndicator = 'earningsIndicator',\n    missedPairs = 'missedPairs',\n    precisionIndicator = 'precisionIndicator',\n    progressIndicator = 'progressIndicator',\n    resetTraining = 'resetTraining',\n    tableActions = 'tableActions',\n    tableDealerHand = 'tableDealerHand',\n    tableFeedback = 'tableFeedback',\n    tablePlayerHands = 'tablePlayerHands'\n}\n\nexport type OnBoardingStep = {\n    activeSection?: OnBoardingSections[];\n    event?: OnBoardingStepEvent;\n    hideNextButton?: boolean;\n    hidePreviousButton?: boolean;\n    load?: (navigation: AppNavigation) => void;\n    text: string;\n};\n\nexport enum OnBoardingStepEvent {\n    startRound = 0,\n    playerAction = 1\n}\n","export enum Phases {\n    dealer = 'dealer',\n    finished = 'finished',\n    player = 'player'\n}\n","import { SimpleCardSymbol } from './card';\nimport { Hand, HandCode } from './hand';\n\nexport interface TrainingPair {\n    dealer: Hand;\n    player: Hand;\n}\n\nexport interface TrainingPairRepresentation {\n    dealerSymbol: SimpleCardSymbol;\n    handCode: HandCode;\n}\n\nexport enum TrainingPairStatus {\n    untrained = 0,\n    passed = 1,\n    missed = 2\n}\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { CasinoRulesKeys, GameConfig, Player, TrainingProgress } from './types';\n\nconst gameConfigKey = 'gameConfig';\nconst hasCompletedOnboardingKey = 'hasCompletedOnboarding';\nconst playerEarningsKey = 'playerEarnings';\nconst playerEarningsHistoricalKey = 'playerEarningsHistorical';\nconst trainingProgressKey = 'trainedHands';\n\nexport const getGameConfig = (currentGameConfig: GameConfig) =>\n    AsyncStorage.getItem(gameConfigKey)\n        .then<GameConfig>((value) => {\n            const storedGameConfig: Partial<GameConfig> | undefined = value && JSON.parse(value);\n            return {\n                casinoRules:\n                    storedGameConfig && storedGameConfig.casinoRules !== undefined\n                        ? {\n                              [CasinoRulesKeys.blackjackPeek]:\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\n                                  undefined\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek]\n                                      : currentGameConfig.casinoRules[\n                                            CasinoRulesKeys.blackjackPeek\n                                        ],\n                              [CasinoRulesKeys.dealerHitsSoft17]:\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\n                                  undefined\n                                      ? storedGameConfig.casinoRules[\n                                            CasinoRulesKeys.dealerHitsSoft17\n                                        ]\n                                      : currentGameConfig.casinoRules[\n                                            CasinoRulesKeys.dealerHitsSoft17\n                                        ],\n                              [CasinoRulesKeys.doubling]:\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubling] !==\n                                  undefined\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.doubling]\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.doubling],\n                              [CasinoRulesKeys.doublingAfterSplit]:\n                                  storedGameConfig.casinoRules[\n                                      CasinoRulesKeys.doublingAfterSplit\n                                  ] !== undefined\n                                      ? storedGameConfig.casinoRules[\n                                            CasinoRulesKeys.doublingAfterSplit\n                                        ]\n                                      : currentGameConfig.casinoRules[\n                                            CasinoRulesKeys.doublingAfterSplit\n                                        ],\n                              [CasinoRulesKeys.hitSplitAces]:\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\n                                  undefined\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces]\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces],\n                              [CasinoRulesKeys.splitsNumber]:\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\n                                  undefined\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber]\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.splitsNumber],\n                              [CasinoRulesKeys.surrender]:\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.surrender] !==\n                                  undefined\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.surrender]\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.surrender]\n                          }\n                        : currentGameConfig.casinoRules,\n                isDealerAnimationEnabled:\n                    storedGameConfig && storedGameConfig.isDealerAnimationEnabled !== undefined\n                        ? storedGameConfig.isDealerAnimationEnabled\n                        : currentGameConfig.isDealerAnimationEnabled,\n                isSoundEnabled:\n                    storedGameConfig && storedGameConfig.isSoundEnabled !== undefined\n                        ? storedGameConfig.isSoundEnabled\n                        : currentGameConfig.isSoundEnabled,\n                selectedHands:\n                    storedGameConfig && storedGameConfig.selectedHands !== undefined\n                        ? storedGameConfig.selectedHands\n                        : currentGameConfig.selectedHands,\n                selectedHandsOnly:\n                    storedGameConfig && storedGameConfig.selectedHandsOnly !== undefined\n                        ? storedGameConfig.selectedHandsOnly\n                        : currentGameConfig.selectedHandsOnly,\n                untrainedPairsPriority:\n                    storedGameConfig && storedGameConfig.untrainedPairsPriority !== undefined\n                        ? storedGameConfig.untrainedPairsPriority\n                        : currentGameConfig.untrainedPairsPriority\n            };\n        })\n        .catch(() => currentGameConfig);\n\nexport const getHasCompletedOnboarding = () =>\n    AsyncStorage.getItem(hasCompletedOnboardingKey)\n        .then<boolean>((value) => (value ? JSON.parse(value) : false))\n        .catch(() => false);\n\nexport const getPlayerEarnings = () =>\n    AsyncStorage.getItem(playerEarningsKey)\n        .then<Player['cash']>((value) => (value ? parseInt(value) : 0))\n        .catch(() => 0);\n\nexport const getPlayerEarningsHistorical = () =>\n    AsyncStorage.getItem(playerEarningsHistoricalKey)\n        .then<Player['earningsHistorical']>((value) => (value ? JSON.parse(value) : []))\n        .catch(() => []);\n\nexport const getTrainingProgress = () =>\n    AsyncStorage.getItem(trainingProgressKey)\n        .then<TrainingProgress>((value) => (value ? JSON.parse(value) : undefined))\n        .catch(() => undefined);\n\nexport const updateGameConfig = (gameConfig: GameConfig) => {\n    AsyncStorage.setItem(gameConfigKey, JSON.stringify(gameConfig)).catch(() => {});\n};\n\nexport const updateHasCompletedOnboarding = (hasCompletedOnboarding: boolean) => {\n    AsyncStorage.setItem(\n        hasCompletedOnboardingKey,\n        JSON.stringify(hasCompletedOnboarding)\n    ).catch(() => {});\n};\n\nexport const updatePlayerEarnings = (playerEarnings: Player['cash']) => {\n    AsyncStorage.setItem(playerEarningsKey, JSON.stringify(playerEarnings)).catch(() => {});\n};\n\nexport const updatePlayerEarningsHistorical = (\n    playerEarningsHistorical: Player['earningsHistorical']\n) => {\n    AsyncStorage.setItem(\n        playerEarningsHistoricalKey,\n        JSON.stringify(playerEarningsHistorical)\n    ).catch(() => {});\n};\n\nexport const updateTrainingProgress = (TrainingProgress: TrainingProgress) => {\n    AsyncStorage.setItem(trainingProgressKey, JSON.stringify(TrainingProgress)).catch(() => {});\n};\n","import { BaseDecisions, Dictionary, DynamicDecisions, PlayerDecisions } from './types';\n\nexport const doubleColor = '#a1a669';\nexport const hitColor = '#428bca';\nexport const splitColor = '#5cb85c';\nexport const standColor = '#46b8da';\nexport const surrenderColor = '#8f6088';\n\nexport const dangerColor = '#dc3545';\nexport const nonRandomColor = '#e5c100';\nexport const untrainedColor = '#333';\nexport const warningColor = '#ffc107';\n\nexport const tableColor = '#088446';\n\nexport const colors: Dictionary<string, BaseDecisions | DynamicDecisions | PlayerDecisions> = {\n    [BaseDecisions.hit]: hitColor,\n    [BaseDecisions.stand]: standColor,\n    [DynamicDecisions.double_hit]: doubleColor,\n    [DynamicDecisions.double_stand]: doubleColor,\n    [DynamicDecisions.split_hit]: splitColor,\n    [DynamicDecisions.split_stand]: splitColor,\n    [DynamicDecisions.split_surrender_hit]: splitColor,\n    [DynamicDecisions.surrender_hit]: surrenderColor,\n    [DynamicDecisions.surrender_split_hit]: surrenderColor,\n    [DynamicDecisions.surrender_stand]: surrenderColor,\n    [PlayerDecisions.double]: doubleColor,\n    [PlayerDecisions.split]: splitColor,\n    [PlayerDecisions.surrender]: surrenderColor\n};\n","import { Audio } from 'expo-av';\nimport { Dictionary } from './types';\n\nexport const cartesianProduct = <T, U, R>(\n    firstArray: T[],\n    secondArray: U[],\n    elementBuilder: (t: T, u: U) => R\n): R[] => {\n    return firstArray.reduce<R[]>((product, x) => {\n        return product.concat(secondArray.map((y) => elementBuilder(x, y)));\n    }, []);\n};\n\nexport const getAbsoluteMax = (numbers: number[]) =>\n    Math.ceil(\n        numbers.reduce((reduced, next) => Math.max(reduced, Math.abs(next)), Number.MIN_VALUE)\n    );\n\nexport const getObjectKeys = <T extends string | number | symbol>(object: { [key in T]: any }) =>\n    Object.keys(object) as T[];\n\nexport const getPrimeFactors = (number: number) => {\n    const factors: number[] = [];\n    let divisor = 2;\n\n    while (number >= 2) {\n        if (number % divisor == 0) {\n            factors.push(divisor);\n            number = number / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors.reverse();\n};\n\nexport const getRandomItem = <T>(items: T[]) =>\n    items[Math.round(Math.random() * (items.length - 1))];\n\nexport const playSound = (sound: Audio.Sound) =>\n    sound\n        .stopAsync() // In case is already playing and it hasn't finished yet\n        .catch(/* Failing to stop audio is not a critical issue */)\n        .then(() => sound.playAsync())\n        .catch(/* Failing to play audio is not a critical issue */);\n\nexport const removeDuplicates = (numbers: number[]): number[] => {\n    const numbersDictionary = numbers.reduce<Dictionary<number>>(\n        (dictionary, next) => ({ ...dictionary, [next]: next }),\n        {}\n    );\n    return Object.keys(numbersDictionary).map((x) => numbersDictionary[x]);\n};\n\nexport const shuffleArray = <T>(array: T[]) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n};\n","import { SimpleCardSymbol, TrainingHandStatus, TrainingPairStatus } from '../types';\nimport { getObjectKeys } from '../utils';\n\nexport const allDealerSymbols: SimpleCardSymbol[] = [\n    SimpleCardSymbol.Two,\n    SimpleCardSymbol.Three,\n    SimpleCardSymbol.Four,\n    SimpleCardSymbol.Five,\n    SimpleCardSymbol.Six,\n    SimpleCardSymbol.Seven,\n    SimpleCardSymbol.Eight,\n    SimpleCardSymbol.Nine,\n    SimpleCardSymbol.Ten,\n    SimpleCardSymbol.Ace\n];\n\nexport const getUntrainedDealerSymbols = (trainingHandStatus: TrainingHandStatus) =>\n    getObjectKeys(trainingHandStatus).filter(\n        (dealerSymbol) => trainingHandStatus[dealerSymbol] !== TrainingPairStatus.passed\n    );\n","import { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../types';\n\nexport const getDefaultCasinoRules = (): CasinoRules => ({\n    [CasinoRulesKeys.blackjackPeek]: false,\n    [CasinoRulesKeys.dealerHitsSoft17]: false,\n    [CasinoRulesKeys.doubling]: Doubling.nineToElevenSoft,\n    [CasinoRulesKeys.doublingAfterSplit]: true,\n    [CasinoRulesKeys.hitSplitAces]: false,\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber.three,\n    [CasinoRulesKeys.surrender]: false\n});\n","import {\n    BaseDecisions,\n    CasinoRulesKeys,\n    Doubling,\n    DynamicDecisions,\n    HandCode,\n    HandDecisionSet,\n    HandDecisionSetGetters,\n    SimpleCardSymbol,\n    SplitsNumber\n} from '../types';\n\nconst alwaysHit: HandDecisionSet = {\n    [SimpleCardSymbol.Two]: BaseDecisions.hit,\n    [SimpleCardSymbol.Three]: BaseDecisions.hit,\n    [SimpleCardSymbol.Four]: BaseDecisions.hit,\n    [SimpleCardSymbol.Five]: BaseDecisions.hit,\n    [SimpleCardSymbol.Six]: BaseDecisions.hit,\n    [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n    [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n    [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n    [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n    [SimpleCardSymbol.Ace]: BaseDecisions.hit\n};\n\nconst alwaysStand: HandDecisionSet = {\n    [SimpleCardSymbol.Two]: BaseDecisions.stand,\n    [SimpleCardSymbol.Three]: BaseDecisions.stand,\n    [SimpleCardSymbol.Four]: BaseDecisions.stand,\n    [SimpleCardSymbol.Five]: BaseDecisions.stand,\n    [SimpleCardSymbol.Six]: BaseDecisions.stand,\n    [SimpleCardSymbol.Seven]: BaseDecisions.stand,\n    [SimpleCardSymbol.Eight]: BaseDecisions.stand,\n    [SimpleCardSymbol.Nine]: BaseDecisions.stand,\n    [SimpleCardSymbol.Ten]: BaseDecisions.stand,\n    [SimpleCardSymbol.Ace]: BaseDecisions.stand\n};\n\nexport const getHandRangesNumber = (decisionSet: HandDecisionSet) =>\n    Object.values(decisionSet).reduce<{\n        previousValue: string;\n        ranges: number;\n    }>(\n        (reduced, next) => {\n            return reduced.previousValue === next\n                ? reduced\n                : { previousValue: next, ranges: reduced.ranges + 1 };\n        },\n        {\n            previousValue: '',\n            ranges: 0\n        }\n    ).ranges;\n\nexport const handDecisionSetGetters: HandDecisionSetGetters = {\n    [HandCode.Split2s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] &&\n            !casinoRules[CasinoRulesKeys.blackjackPeek] &&\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Split3s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Split4s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Split5s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Split6s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Split7s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Split8s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? casinoRules[CasinoRulesKeys.surrender]\n                    ? DynamicDecisions.split_surrender_hit\n                    : DynamicDecisions.split_hit\n                : casinoRules[CasinoRulesKeys.surrender]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? casinoRules[CasinoRulesKeys.surrender]\n                    ? DynamicDecisions.split_surrender_hit\n                    : DynamicDecisions.split_hit\n                : casinoRules[CasinoRulesKeys.surrender]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? casinoRules[CasinoRulesKeys.surrender]\n                    ? casinoRules[CasinoRulesKeys.dealerHitsSoft17]\n                        ? DynamicDecisions.surrender_split_hit\n                        : DynamicDecisions.split_surrender_hit\n                    : DynamicDecisions.split_hit\n                : casinoRules[CasinoRulesKeys.surrender]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Split9s]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\n        [SimpleCardSymbol.Eight]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Nine]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\n    }),\n    [HandCode.Split10s]: () => alwaysStand,\n    [HandCode.SplitAs]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\n            casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.split_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Soft13]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Soft14]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Soft15]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Soft16]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Soft17]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Soft18]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair &&\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\n                ? DynamicDecisions.double_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\n                ? DynamicDecisions.double_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Soft19]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft &&\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\n                ? DynamicDecisions.double_stand\n                : BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\n    }),\n    [HandCode.Soft20]: () => alwaysStand,\n    [HandCode.Hard5]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard6]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard7]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\n        [SimpleCardSymbol.Five]: BaseDecisions.hit,\n        [SimpleCardSymbol.Six]: BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard8]: () => alwaysHit,\n    [HandCode.Hard9]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Hard10]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\n    }),\n    [HandCode.Hard11]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Three]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Four]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Five]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Six]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Seven]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]:\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven &&\n            casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.blackjackPeek] &&\n            casinoRules[CasinoRulesKeys.dealerHitsSoft17]\n                ? DynamicDecisions.double_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard12]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard13]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard14]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] && !casinoRules[CasinoRulesKeys.blackjackPeek]\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard15]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\n            ? DynamicDecisions.surrender_hit\n            : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] &&\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\n                ? DynamicDecisions.surrender_hit\n                : BaseDecisions.hit\n    }),\n    [HandCode.Hard16]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\n        [SimpleCardSymbol.Nine]: casinoRules[CasinoRulesKeys.surrender]\n            ? DynamicDecisions.surrender_hit\n            : BaseDecisions.hit,\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\n            ? DynamicDecisions.surrender_hit\n            : BaseDecisions.hit,\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.surrender]\n            ? DynamicDecisions.surrender_hit\n            : BaseDecisions.hit\n    }),\n    [HandCode.Hard17]: (casinoRules) => ({\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\n        [SimpleCardSymbol.Nine]: BaseDecisions.stand,\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\n        [SimpleCardSymbol.Ace]:\n            casinoRules[CasinoRulesKeys.surrender] &&\n            (!casinoRules[CasinoRulesKeys.blackjackPeek] ||\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17])\n                ? DynamicDecisions.surrender_stand\n                : BaseDecisions.stand\n    }),\n    [HandCode.Hard18]: () => alwaysStand,\n    [HandCode.Hard19]: () => alwaysStand,\n    [HandCode.Hard20]: () => alwaysStand\n};\n","import {\n    CasinoRules,\n    CasinoRulesKeys,\n    HandCode,\n    SelectedHands,\n    TrainingHands,\n    TrainingProgress\n} from '../types';\nimport { getDefaultCasinoRules } from './casino-rules';\nimport { getUntrainedDealerSymbols } from './dealer-symbols';\nimport { handDecisionSetGetters } from './hand-decision-set';\n\nexport const getDefaultTrainingHands = () => getTrainingHands(getDefaultCasinoRules());\n\nexport const getSelectedTrainingHands = (\n    trainingHands: TrainingHands,\n    selectedHands?: SelectedHands\n) =>\n    selectedHands\n        ? Object.values(trainingHands).filter((hand) => selectedHands[hand.code])\n        : Object.values(trainingHands);\n\nexport const getTrainingHands = (casinoRules: CasinoRules): TrainingHands => ({\n    [HandCode.Split2s]: {\n        code: HandCode.Split2s,\n        decisionSet: handDecisionSetGetters[HandCode.Split2s](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.splitsNumber,\n            CasinoRulesKeys.doublingAfterSplit,\n            CasinoRulesKeys.surrender,\n\n            CasinoRulesKeys.blackjackPeek,\n            CasinoRulesKeys.dealerHitsSoft17\n        ],\n        name: '2,2'\n    },\n    [HandCode.Split3s]: {\n        code: HandCode.Split3s,\n        decisionSet: handDecisionSetGetters[HandCode.Split3s](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.splitsNumber,\n            CasinoRulesKeys.doublingAfterSplit,\n            CasinoRulesKeys.surrender,\n\n            CasinoRulesKeys.blackjackPeek\n        ],\n        name: '3,3'\n    },\n    [HandCode.Split4s]: {\n        code: HandCode.Split4s,\n        decisionSet: handDecisionSetGetters[HandCode.Split4s](casinoRules),\n        dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\n        name: '4,4'\n    },\n    [HandCode.Split5s]: {\n        code: HandCode.Split5s,\n        decisionSet: handDecisionSetGetters[HandCode.Split5s](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: '5,5'\n    },\n    [HandCode.Split6s]: {\n        code: HandCode.Split6s,\n        decisionSet: handDecisionSetGetters[HandCode.Split6s](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.splitsNumber,\n            CasinoRulesKeys.doublingAfterSplit,\n            CasinoRulesKeys.surrender,\n\n            CasinoRulesKeys.blackjackPeek\n        ],\n        name: '6,6'\n    },\n    [HandCode.Split7s]: {\n        code: HandCode.Split7s,\n        decisionSet: handDecisionSetGetters[HandCode.Split7s](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.splitsNumber,\n            CasinoRulesKeys.surrender,\n\n            CasinoRulesKeys.blackjackPeek\n        ],\n        name: '7,7'\n    },\n    [HandCode.Split8s]: {\n        code: HandCode.Split8s,\n        decisionSet: handDecisionSetGetters[HandCode.Split8s](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.splitsNumber,\n\n            CasinoRulesKeys.blackjackPeek,\n            CasinoRulesKeys.surrender,\n            CasinoRulesKeys.dealerHitsSoft17\n        ],\n        name: '8,8'\n    },\n    [HandCode.Split9s]: {\n        code: HandCode.Split9s,\n        decisionSet: handDecisionSetGetters[HandCode.Split9s](casinoRules),\n        dependencies: [CasinoRulesKeys.splitsNumber],\n        name: '9,9'\n    },\n    [HandCode.Split10s]: {\n        code: HandCode.Split10s,\n        decisionSet: handDecisionSetGetters[HandCode.Split10s](casinoRules),\n        dependencies: [],\n        name: '10,10'\n    },\n    [HandCode.SplitAs]: {\n        code: HandCode.SplitAs,\n        decisionSet: handDecisionSetGetters[HandCode.SplitAs](casinoRules),\n        dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.blackjackPeek],\n        name: 'A,A'\n    },\n    [HandCode.Soft13]: {\n        code: HandCode.Soft13,\n        decisionSet: handDecisionSetGetters[HandCode.Soft13](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Soft 13'\n    },\n    [HandCode.Soft14]: {\n        code: HandCode.Soft14,\n        decisionSet: handDecisionSetGetters[HandCode.Soft14](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Soft 14'\n    },\n    [HandCode.Soft15]: {\n        code: HandCode.Soft15,\n        decisionSet: handDecisionSetGetters[HandCode.Soft15](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Soft 15'\n    },\n    [HandCode.Soft16]: {\n        code: HandCode.Soft16,\n        decisionSet: handDecisionSetGetters[HandCode.Soft16](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Soft 16'\n    },\n    [HandCode.Soft17]: {\n        code: HandCode.Soft17,\n        decisionSet: handDecisionSetGetters[HandCode.Soft17](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Soft 17'\n    },\n    [HandCode.Soft18]: {\n        code: HandCode.Soft18,\n        decisionSet: handDecisionSetGetters[HandCode.Soft18](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\n        name: 'Soft 18'\n    },\n    [HandCode.Soft19]: {\n        code: HandCode.Soft19,\n        decisionSet: handDecisionSetGetters[HandCode.Soft19](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.dealerHitsSoft17],\n        name: 'Soft 19'\n    },\n    [HandCode.Soft20]: {\n        code: HandCode.Soft20,\n        decisionSet: handDecisionSetGetters[HandCode.Soft20](casinoRules),\n        dependencies: [],\n        name: 'Soft 20'\n    },\n    /* Soft 21 => Either Blackjack or maximum score! This hand doesn't need training */\n    /* Hard 4 => Only possible with 2,2. Covered in Split hands */\n    [HandCode.Hard5]: {\n        code: HandCode.Hard5,\n        decisionSet: handDecisionSetGetters[HandCode.Hard5](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\n        name: 'Hard 5'\n    },\n    [HandCode.Hard6]: {\n        code: HandCode.Hard6,\n        decisionSet: handDecisionSetGetters[HandCode.Hard6](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\n        name: 'Hard 6'\n    },\n    [HandCode.Hard7]: {\n        code: HandCode.Hard7,\n        decisionSet: handDecisionSetGetters[HandCode.Hard7](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\n        name: 'Hard 7'\n    },\n    [HandCode.Hard8]: {\n        code: HandCode.Hard8,\n        decisionSet: handDecisionSetGetters[HandCode.Hard8](casinoRules),\n        dependencies: [],\n        name: 'Hard 8'\n    },\n    [HandCode.Hard9]: {\n        code: HandCode.Hard9,\n        decisionSet: handDecisionSetGetters[HandCode.Hard9](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Hard 9'\n    },\n    [HandCode.Hard10]: {\n        code: HandCode.Hard10,\n        decisionSet: handDecisionSetGetters[HandCode.Hard10](casinoRules),\n        dependencies: [CasinoRulesKeys.doubling],\n        name: 'Hard 10'\n    },\n    [HandCode.Hard11]: {\n        code: HandCode.Hard11,\n        decisionSet: handDecisionSetGetters[HandCode.Hard11](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.doubling,\n\n            CasinoRulesKeys.blackjackPeek,\n            CasinoRulesKeys.dealerHitsSoft17\n        ],\n        name: 'Hard 11'\n    },\n    [HandCode.Hard12]: {\n        code: HandCode.Hard12,\n        decisionSet: handDecisionSetGetters[HandCode.Hard12](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\n        name: 'Hard 12'\n    },\n    [HandCode.Hard13]: {\n        code: HandCode.Hard13,\n        decisionSet: handDecisionSetGetters[HandCode.Hard13](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\n        name: 'Hard 13'\n    },\n    [HandCode.Hard14]: {\n        code: HandCode.Hard14,\n        decisionSet: handDecisionSetGetters[HandCode.Hard14](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender, CasinoRulesKeys.blackjackPeek],\n        name: 'Hard 14'\n    },\n    [HandCode.Hard15]: {\n        code: HandCode.Hard15,\n        decisionSet: handDecisionSetGetters[HandCode.Hard15](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.surrender,\n\n            CasinoRulesKeys.blackjackPeek,\n            CasinoRulesKeys.dealerHitsSoft17\n        ],\n        name: 'Hard 15'\n    },\n    [HandCode.Hard16]: {\n        code: HandCode.Hard16,\n        decisionSet: handDecisionSetGetters[HandCode.Hard16](casinoRules),\n        dependencies: [CasinoRulesKeys.surrender],\n        name: 'Hard 16'\n    },\n    [HandCode.Hard17]: {\n        code: HandCode.Hard17,\n        decisionSet: handDecisionSetGetters[HandCode.Hard17](casinoRules),\n        dependencies: [\n            CasinoRulesKeys.surrender,\n\n            CasinoRulesKeys.blackjackPeek,\n            CasinoRulesKeys.dealerHitsSoft17\n        ],\n        name: 'Hard 17'\n    },\n    [HandCode.Hard18]: {\n        code: HandCode.Hard18,\n        decisionSet: handDecisionSetGetters[HandCode.Hard18](casinoRules),\n        dependencies: [],\n        name: 'Hard 18'\n    },\n    [HandCode.Hard19]: {\n        code: HandCode.Hard19,\n        decisionSet: handDecisionSetGetters[HandCode.Hard19](casinoRules),\n        dependencies: [],\n        name: 'Hard 19'\n    },\n    [HandCode.Hard20]: {\n        code: HandCode.Hard20,\n        decisionSet: handDecisionSetGetters[HandCode.Hard20](casinoRules),\n        dependencies: [],\n        name: 'Hard 20'\n    }\n    /* Hard 21 => Maximum score! This hand doesn't need training */\n});\n\nexport const getUntrainedTrainingHands = (\n    trainingHands: TrainingHands,\n    trainingProgress: TrainingProgress,\n    selectedHands?: SelectedHands\n) =>\n    getSelectedTrainingHands(trainingHands, selectedHands).filter(\n        (trainingHand) => getUntrainedDealerSymbols(trainingProgress[trainingHand.code]).length > 0\n    );\n","import {\n    Card,\n    CardSuit,\n    CardSymbol,\n    CardValues,\n    SimpleCardSymbol,\n    SpecialCardSymbol,\n    TenPointsCardSymbol\n} from '../types';\nimport { cartesianProduct, getObjectKeys, getRandomItem, removeDuplicates } from '../utils';\n\nconst cardsValue: CardValues = {\n    [SimpleCardSymbol.Ace]: [1, 11],\n    [SimpleCardSymbol.Two]: [2],\n    [SimpleCardSymbol.Three]: [3],\n    [SimpleCardSymbol.Four]: [4],\n    [SimpleCardSymbol.Five]: [5],\n    [SimpleCardSymbol.Six]: [6],\n    [SimpleCardSymbol.Seven]: [7],\n    [SimpleCardSymbol.Eight]: [8],\n    [SimpleCardSymbol.Nine]: [9],\n    [SimpleCardSymbol.Ten]: [10],\n    [SpecialCardSymbol.Jack]: [10],\n    [SpecialCardSymbol.Queen]: [10],\n    [SpecialCardSymbol.King]: [10]\n};\n\nexport const createCard = (symbol: CardSymbol, suit?: CardSuit, isHoleCard?: boolean): Card => ({\n    isHoleCard,\n    isRandom: suit !== undefined,\n    suit: suit || getRandomSuit(),\n    symbol\n});\n\nconst suits = [CardSuit.clubs, CardSuit.diamonds, CardSuit.hearts, CardSuit.spades];\n\nconst symbols = getObjectKeys(cardsValue);\n\nconst deck = cartesianProduct(symbols, suits, createCard);\n\nexport const getCardEffectiveValue = (card: Card): number => {\n    const values = getCardValues(card);\n    return values[values.length - 1];\n};\n\nexport const getCardsValues = (cards: Card[], options?: { peeking?: boolean }) => {\n    const cardsValues = cards\n        .filter((card) => options?.peeking || !card.isHoleCard)\n        .map((card) => getCardValues(card));\n    const cardsAggregatedValues = cardsValues.reduce(\n        (reducedValues, currentValues) =>\n            cartesianProduct(reducedValues, currentValues, (x, y) => x + y),\n        [0]\n    );\n    return removeDuplicates(cardsAggregatedValues);\n};\n\nconst getCardValues = (card: Card): number[] => cardsValue[card.symbol];\n\nexport const getRandomCard = (options?: { isHoleCard?: boolean }) => {\n    let randomCard = getRandomItem(deck);\n    if (options?.isHoleCard) {\n        randomCard = { ...randomCard, isHoleCard: true };\n    }\n    return randomCard;\n};\n\nexport const getRandomSuit = () => getRandomItem(suits);\n\nexport const revealHoleCard = (card: Card) => {\n    card.isHoleCard = false;\n};\n\nexport const simpleSymbolToSymbol = (simpleSymbol: SimpleCardSymbol): CardSymbol =>\n    simpleSymbol === SimpleCardSymbol.Ten ? getRandomItem(tenPointsSymbols) : simpleSymbol;\n\nexport const symbolToSimpleSymbol = (symbol: CardSymbol): SimpleCardSymbol =>\n    tenPointsSymbols.indexOf(symbol as SpecialCardSymbol) > -1\n        ? SimpleCardSymbol.Ten\n        : (symbol as SimpleCardSymbol);\n\nconst tenPointsSymbols: TenPointsCardSymbol[] = [\n    SimpleCardSymbol.Ten,\n    SpecialCardSymbol.Jack,\n    SpecialCardSymbol.Queen,\n    SpecialCardSymbol.King\n];\n\nexport const valueToSymbol = (number: number): CardSymbol =>\n    number === 10\n        ? getRandomItem(tenPointsSymbols)\n        : number === 1\n        ? SimpleCardSymbol.Ace\n        : (String(number) as CardSymbol);\n","import { CardSymbol, HandCode, SimpleCardSymbol } from '../types';\nimport { valueToSymbol, simpleSymbolToSymbol } from './card';\n\nexport const getHardHandSymbols = (handCode: HandCode): CardSymbol[] => {\n    const value = parseInt(handCode, 10);\n\n    const minValue = Math.max(2, value - 10);\n    const maxValue = Math.min(value - minValue, 10);\n\n    let firstValue = Math.floor(Math.random() * (maxValue - minValue) + minValue);\n    let secondValue = value - firstValue;\n\n    // If numbers are equal, we would be training a splittable hand. Change them when possible\n    // E.g. Transform a 7,7 (for 14) into a 6,8. Do not transform a 10,10 for 20\n    if (firstValue === secondValue && firstValue > minValue && firstValue < maxValue) {\n        firstValue++;\n        secondValue--;\n    }\n\n    return [valueToSymbol(firstValue), valueToSymbol(secondValue)];\n};\n\nexport const getSoftHandSymbols = (handCode: HandCode): CardSymbol[] => {\n    const handValues = handCode.split('/').map((s) => parseInt(s, 10));\n    const complementarySymbol = valueToSymbol(handValues[0] - 1);\n\n    // Make Ace the second card sometimes by randomly reversing the symbols\n    return Math.floor(Math.random() * 100) % 2\n        ? [complementarySymbol, SimpleCardSymbol.Ace]\n        : [SimpleCardSymbol.Ace, complementarySymbol];\n};\n\nexport const getSplitHandSymbols = (handCode: HandCode): CardSymbol[] => {\n    const splitSymbols = handCode.split(',') as SimpleCardSymbol[];\n    return splitSymbols.map(simpleSymbolToSymbol);\n};\n\nexport const isSoftHandCode = (handCode: HandCode) => handCode.includes('/');\n\nexport const isSplitHandCode = (handCode: HandCode) => handCode.includes(',');\n","import {\n    Card,\n    CardSuit,\n    CardSymbol,\n    CasinoRules,\n    CasinoRulesKeys,\n    Doubling,\n    Hand,\n    HandCode,\n    HandOutcome,\n    SimpleCardSymbol,\n    TrainingHands,\n    TrainingPairStatus,\n    TrainingProgress\n} from '../types';\nimport { getRandomItem } from '../utils';\nimport {\n    createCard,\n    getCardEffectiveValue,\n    getCardsValues,\n    getRandomCard,\n    revealHoleCard,\n    symbolToSimpleSymbol,\n    valueToSymbol\n} from './card';\nimport {\n    getHardHandSymbols,\n    getSoftHandSymbols,\n    getSplitHandSymbols,\n    isSoftHandCode,\n    isSplitHandCode\n} from './hand-code';\n\nexport const areHandsSplitAces = (hands: Hand[]) =>\n    hands.length > 1 &&\n    hands[0].cards[0].symbol === SimpleCardSymbol.Ace &&\n    hands[1].cards[0].symbol === SimpleCardSymbol.Ace;\n\nexport const canBeDealerBlackjack = (hand: Hand) => {\n    const visibleCard = hand.cards[0];\n    const cardSymbol = symbolToSimpleSymbol(visibleCard.symbol);\n    return cardSymbol === SimpleCardSymbol.Ace || cardSymbol === SimpleCardSymbol.Ten;\n};\n\nconst canBustOnNextCard = (hand: Hand) => {\n    return hand.values[0] > 11;\n};\n\nexport const canDouble = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\n    const handEffectiveValue = getHandEffectiveValue(hand);\n    const isHandWithTwoCards = hand.cards.length === 2;\n    const isSingleHand = hands.length === 1;\n\n    const contains9To11 = hand.values.some((handValue) => [9, 10, 11].indexOf(handValue) > -1);\n    const is10To11 = handEffectiveValue === 10 || handEffectiveValue === 11;\n    const is9To11 = handEffectiveValue === 9 || is10To11;\n\n    return (\n        isHandWithTwoCards &&\n        (casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair ||\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft && contains9To11) ||\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven && is9To11) ||\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven && is10To11)) &&\n        (isSingleHand || casinoRules[CasinoRulesKeys.doublingAfterSplit]) &&\n        (!areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces])\n    );\n};\n\nexport const canHit = (hands: Hand[], casinoRules: CasinoRules) =>\n    !areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces];\n\nexport const canSplit = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\n    hand.cards.length === 2 &&\n    getCardEffectiveValue(hand.cards[0]) === getCardEffectiveValue(hand.cards[1]) &&\n    casinoRules[CasinoRulesKeys.splitsNumber] >= handsNumber;\n\nexport const canSurrender = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\n    handsNumber === 1 && hand.cards.length === 2 && casinoRules[CasinoRulesKeys.surrender];\n\nexport const createDealerHand = (\n    casinoRules: CasinoRules,\n    dealerSymbol?: CardSymbol,\n    dealerSuit?: CardSuit\n) => {\n    const dealerCards: Card[] = [\n        dealerSymbol ? createCard(dealerSymbol, dealerSuit) : getRandomCard()\n    ];\n\n    if (casinoRules[CasinoRulesKeys.blackjackPeek]) {\n        dealerCards.push(getRandomCard({ isHoleCard: true }));\n    }\n\n    return createHand(dealerCards);\n};\n\nexport const createHand = (cards: Card[], bet = 1): Hand => ({\n    bet,\n    cards: cards,\n    values: getCardsValues(cards)\n});\n\nexport const dealCard = (hand: Hand, card: Card) => {\n    hand.cards.push(card);\n    hand.values = getCardsValues(hand.cards);\n};\n\n// - If the player hand has no risk (0% probabilities of busting) and some untrained pair can\n//   be reached by adding a specific card to the player hand, it returns that card. Returns a\n//   a random card otherwise\n// - Called after player hitting, splitting or starting a split hand.\nexport const getCardForUntrainedHand = (\n    playerHand: Hand,\n    dealerSymbol: SimpleCardSymbol,\n    trainingHands: TrainingHands,\n    trainingProgress: TrainingProgress\n): Card => {\n    let nextCard = getRandomCard();\n\n    if (!canBustOnNextCard(playerHand)) {\n        const isPlayerHandSoft = playerHand.values.length > 1;\n        const playerHandValues = getCardsValues(playerHand.cards);\n\n        const valuesToUntrainedHands = Object.values(trainingHands)\n            .map((trainingHand) => {\n                const isHandUntrainedForDealerSymbol =\n                    trainingProgress[trainingHand.code][dealerSymbol] ===\n                    TrainingPairStatus.untrained;\n\n                let valueToReachThisHand: number;\n\n                if (isSplitHandCode(trainingHand.code)) {\n                    // Untrained split hands can never be reached after user action\n                    valueToReachThisHand = -1;\n                } else if (isSoftHandCode(trainingHand.code)) {\n                    const currentHandMinValue = parseInt(trainingHand.code.split('/')[0], 10);\n                    const softDifference = currentHandMinValue - playerHandValues[0];\n\n                    if (isPlayerHandSoft) {\n                        // E.g. Player hand = 3/13. Can reach 4/14+ but not 3/13- (equal or lower)\n                        valueToReachThisHand = softDifference > 0 ? softDifference : -1;\n                    } else {\n                        // E.g. Player hand = 8. Can only 9/19 (soft hand)\n                        valueToReachThisHand = softDifference === 1 ? softDifference : -1;\n                    }\n                } else {\n                    const currentHandHardValue = parseInt(trainingHand.code, 10);\n                    const hardDifference = currentHandHardValue - playerHandValues[0];\n\n                    if (isPlayerHandSoft) {\n                        // E.g. Player hand = 5/15. Can reach 12-15 but not 11- (soft hand) neither\n                        // 16+ (soft hand)\n                        const makesSoftHand = playerHandValues[1] + hardDifference <= 21;\n                        valueToReachThisHand =\n                            !makesSoftHand && hardDifference > 1 && hardDifference <= 10\n                                ? hardDifference\n                                : -1;\n                    } else {\n                        // E.g. Player hand = 7. Can reach 9-17 but not 7- (equal or lower),\n                        // 8 (soft hand), 14 (split hand) neither 18+ (out of scope)\n                        valueToReachThisHand =\n                            hardDifference > 1 && // Lower & Soft hand\n                            hardDifference <= 10 && // Out of scope\n                            hardDifference !== playerHandValues[0] // Split hand\n                                ? hardDifference\n                                : -1;\n                    }\n                }\n\n                return isHandUntrainedForDealerSymbol && valueToReachThisHand > -1\n                    ? valueToReachThisHand\n                    : -1;\n            })\n            .filter((value) => value > -1);\n\n        if (valuesToUntrainedHands.length > 0) {\n            nextCard = createCard(valueToSymbol(getRandomItem(valuesToUntrainedHands)));\n        }\n    }\n\n    return nextCard;\n};\n\nexport const getHandEffectiveValue = (hand: Hand) => {\n    let effectiveValue = hand.values[0];\n    if (hand.values.some((v) => v < 22)) {\n        effectiveValue = [...hand.values].reverse().find((v) => v < 22)!;\n    }\n    return effectiveValue;\n};\n\nexport const getHandValidValues = (hand: Hand): number[] => {\n    return hand.values.some((v) => v < 22) ? hand.values.filter((v) => v < 22) : [hand.values[0]];\n};\n\nexport const handCodeToHand = (handCode: HandCode): Hand => {\n    const handSymbols = isSplitHandCode(handCode)\n        ? getSplitHandSymbols(handCode)\n        : isSoftHandCode(handCode)\n        ? getSoftHandSymbols(handCode)\n        : getHardHandSymbols(handCode);\n\n    return createHand(handSymbols.map((symbol) => createCard(symbol)));\n};\n\nexport const handToHandCode = (hand: Hand): HandCode => {\n    const handSymbols = hand.cards.map((c) => symbolToSimpleSymbol(c.symbol));\n    const isSplitHand = handSymbols.length === 2 && handSymbols[0] === handSymbols[1];\n\n    return isSplitHand\n        ? (handSymbols.join(',') as HandCode)\n        : (getHandValidValues(hand).join('/') as HandCode);\n};\n\nexport const hasHoleCard = (hand: Hand) => hand.cards.length > 1 && hand.cards[1].isHoleCard;\n\nconst isAcesPair = (hand: Hand) =>\n    hand.cards.length === 2 &&\n    hand.cards[0].symbol === SimpleCardSymbol.Ace &&\n    hand.cards[1].symbol === SimpleCardSymbol.Ace;\n\nexport const isBlackjack = (hand: Hand, handsNumber: number) => {\n    return (\n        handsNumber === 1 &&\n        hand.cards.length === 2 &&\n        hand.values.length === 2 &&\n        hand.values[0] === 11 &&\n        hand.values[1] === 21\n    );\n};\n\nconst isBust = (hand: Hand) => {\n    return getHandEffectiveValue(hand) > 21;\n};\n\nexport const isDealerBlackjack = (hand: Hand) => {\n    const cardValues = getCardsValues(hand.cards, { peeking: true });\n    return (\n        hand.cards.length === 2 &&\n        cardValues.length === 2 &&\n        cardValues[0] === 11 &&\n        cardValues[1] === 21\n    );\n};\n\nexport const isFinished = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\n    const isAcesPairHand = isAcesPair(hand);\n    return (\n        getHandEffectiveValue(hand) >= 21 ||\n        (areHandsSplitAces(hands) &&\n            ((isAcesPairHand && !canSplit(hand, hands.length, casinoRules)) ||\n                (!isAcesPairHand && !casinoRules[CasinoRulesKeys.hitSplitAces])))\n    );\n};\n\nexport const resolveHand = (\n    playerHand: Hand,\n    handsNumber: number,\n    dealerHand: Hand\n): HandOutcome => {\n    const playerHandValue = getHandEffectiveValue(playerHand);\n    const dealerHandValue = getHandEffectiveValue(dealerHand!);\n    const handOutcome = isBust(playerHand)\n        ? HandOutcome.bust\n        : isBlackjack(playerHand, handsNumber) && isBlackjack(dealerHand!, handsNumber)\n        ? HandOutcome.push\n        : isBlackjack(playerHand, handsNumber)\n        ? HandOutcome.blackjack\n        : isBlackjack(dealerHand!, handsNumber)\n        ? HandOutcome.dealerWins\n        : isBust(dealerHand!)\n        ? HandOutcome.playerWins\n        : playerHandValue > dealerHandValue\n        ? HandOutcome.playerWins\n        : playerHandValue === dealerHandValue\n        ? HandOutcome.push\n        : HandOutcome.dealerWins;\n\n    playerHand.outcome = handOutcome;\n    return handOutcome;\n};\n\nexport const revealDealerHoleCard = (hand: Hand) => {\n    revealHoleCard(hand.cards[1]);\n    hand.values = getCardsValues(hand.cards);\n};\n","import {\n    CasinoRules,\n    GameConfig,\n    HandCode,\n    SimpleCardSymbol,\n    TrainingHands,\n    TrainingPair,\n    TrainingProgress\n} from '../types';\nimport { getObjectKeys, getRandomItem } from '../utils';\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\nimport { createDealerHand, handCodeToHand } from './hand';\nimport { getSelectedTrainingHands, getUntrainedTrainingHands } from './training-hand';\n\nexport const allTrainingPairsNumber = allDealerSymbols.length * Object.keys(HandCode).length;\n\nexport const getSpecificTrainingPair = (\n    handCode: HandCode,\n    dealerSymbol: SimpleCardSymbol,\n    casinoRules: CasinoRules\n): TrainingPair => {\n    return {\n        dealer: createDealerHand(casinoRules, dealerSymbol),\n        player: handCodeToHand(handCode)\n    };\n};\n\nexport const getUntrainedTrainingPair = (\n    trainingHands: TrainingHands,\n    trainingProgress: TrainingProgress,\n    gameConfig: GameConfig\n): TrainingPair => {\n    const untrainedTrainingHands = getUntrainedTrainingHands(\n        trainingHands,\n        trainingProgress,\n        gameConfig.selectedHandsOnly ? gameConfig.selectedHands : undefined\n    );\n\n    const randomTrainingHand =\n        untrainedTrainingHands.length > 0\n            ? getRandomItem(untrainedTrainingHands)\n            : getRandomItem(\n                  getSelectedTrainingHands(\n                      trainingHands,\n                      gameConfig.selectedHandsOnly ? gameConfig.selectedHands : undefined\n                  )\n              ); // In case all hands have been passed\n\n    const trainingHandStatus = trainingProgress[randomTrainingHand.code];\n    const untrainedDealerSymbols = getUntrainedDealerSymbols(trainingHandStatus);\n\n    const randomDealerSymbol =\n        untrainedDealerSymbols.length > 0\n            ? getRandomItem(untrainedDealerSymbols)\n            : getRandomItem(getObjectKeys(trainingHandStatus)); // In case all hands have been passed\n\n    return {\n        dealer: createDealerHand(gameConfig.casinoRules, randomDealerSymbol),\n        player: handCodeToHand(randomTrainingHand.code)\n    };\n};\n","import {\n    GameConfig,\n    HandCode,\n    SelectedHands,\n    SimpleCardSymbol,\n    TrainingHands,\n    TrainingHandStatus,\n    TrainingPairRepresentation,\n    TrainingPairStatus,\n    TrainingProgress,\n    TrainingStatus\n} from '../types';\nimport { getObjectKeys } from '../utils';\nimport { allDealerSymbols } from './dealer-symbols';\nimport { getUntrainedTrainingHands } from './training-hand';\nimport { allTrainingPairsNumber } from './training-pair';\n\nexport const getDefaultTrainingStatus = (): TrainingStatus => ({\n    attemptedTrainingPairs: 0,\n    isCompleted: false,\n    isProgressBlocked: false,\n    missedTrainingPairs: [],\n    passedTrainingPairs: 0,\n    trainingProgress: Object.values(HandCode).reduce<TrainingProgress>(\n        (reducedTrainingProgress, handCode) => ({\n            ...reducedTrainingProgress,\n            [handCode]: allDealerSymbols.reduce<TrainingHandStatus>(\n                (reducedDealerSymbols, dealerSymbol) => ({\n                    ...reducedDealerSymbols,\n                    [dealerSymbol]: TrainingPairStatus.untrained\n                }),\n                {} as TrainingHandStatus\n            )\n        }),\n        {} as TrainingProgress\n    )\n});\n\nexport const getIsProgressBlocked = (\n    trainingStatus: TrainingStatus,\n    trainingHands: TrainingHands,\n    selectedHandsOnly: boolean,\n    selectedHands: SelectedHands\n) =>\n    selectedHandsOnly &&\n    getProgressPercentage(trainingStatus.attemptedTrainingPairs) < 100 &&\n    getUntrainedTrainingHands(trainingHands, trainingStatus.trainingProgress, selectedHands)\n        .length === 0;\n\nconst getNextMissedTrainingPairs = (\n    missedTrainingPairs: TrainingPairRepresentation[],\n    isHit: boolean,\n    handCode: HandCode,\n    currentDealerSymbol: SimpleCardSymbol\n): TrainingPairRepresentation[] => {\n    return isHit\n        ? missedTrainingPairs.filter(\n              (missedTrainingPair) =>\n                  missedTrainingPair.dealerSymbol !== currentDealerSymbol ||\n                  missedTrainingPair.handCode !== handCode\n          )\n        : missedTrainingPairs.some(\n              (missedTrainingPair) =>\n                  missedTrainingPair.dealerSymbol === currentDealerSymbol &&\n                  missedTrainingPair.handCode === handCode\n          )\n        ? missedTrainingPairs\n        : [{ dealerSymbol: currentDealerSymbol, handCode }].concat(missedTrainingPairs);\n};\n\nexport const getNextTrainingStatus = (\n    trainingStatus: TrainingStatus,\n    trainingHands: TrainingHands,\n    gameConfig: GameConfig,\n    isHit: boolean,\n    currentHandCode: HandCode,\n    currentDealerSymbol: SimpleCardSymbol\n): TrainingStatus => {\n    // The current trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol]\n    // value must be kept to update attemptedTrainingPairs and passedTrainingPairs\n    const currentHandTrainingStatus =\n        trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol];\n\n    trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol] = isHit\n        ? TrainingPairStatus.passed\n        : TrainingPairStatus.missed;\n\n    const nextAttemptedTrainingPairs =\n        trainingStatus.attemptedTrainingPairs +\n        (currentHandTrainingStatus === TrainingPairStatus.untrained ? 1 : 0);\n\n    const nextMissedTrainingPairs = getNextMissedTrainingPairs(\n        trainingStatus.missedTrainingPairs,\n        isHit,\n        currentHandCode,\n        currentDealerSymbol\n    );\n\n    const nextPassedTrainingHands =\n        trainingStatus.passedTrainingPairs +\n        (isHit && currentHandTrainingStatus !== TrainingPairStatus.passed\n            ? 1\n            : !isHit && currentHandTrainingStatus === TrainingPairStatus.passed\n            ? -1\n            : 0);\n\n    const nextTrainingStatus = {\n        attemptedTrainingPairs: nextAttemptedTrainingPairs,\n        isCompleted: isTrainingCompleted(nextPassedTrainingHands),\n        isProgressBlocked: false,\n        missedTrainingPairs: nextMissedTrainingPairs,\n        passedTrainingPairs: nextPassedTrainingHands,\n        trainingProgress: trainingStatus.trainingProgress\n    };\n\n    nextTrainingStatus.isProgressBlocked = getIsProgressBlocked(\n        nextTrainingStatus,\n        trainingHands,\n        gameConfig.selectedHandsOnly,\n        gameConfig.selectedHands\n    );\n\n    return nextTrainingStatus;\n};\n\nexport const getProgressPercentage = (attemptedTrainingPairs: number) =>\n    Math.floor((attemptedTrainingPairs * 1000) / allTrainingPairsNumber) / 10;\n\nexport const isTrainingCompleted = (passedTrainingPairs: number) =>\n    passedTrainingPairs === allTrainingPairsNumber;\n\nconst reduceTrainingHandProgress = (\n    handCode: HandCode,\n    trainingHandStatus: TrainingHandStatus,\n    reducedTrainingStatus: TrainingStatus\n): TrainingStatus =>\n    getObjectKeys(trainingHandStatus).reduce<TrainingStatus>(\n        (reducedTrainingStatus, dealerSymbol) =>\n            reduceTrainingPairProgress(\n                handCode,\n                dealerSymbol,\n                trainingHandStatus[dealerSymbol],\n                reducedTrainingStatus\n            ),\n        reducedTrainingStatus\n    );\n\nconst reduceTrainingPairProgress = (\n    handCode: HandCode,\n    dealerSymbol: SimpleCardSymbol,\n    trainingPairStatus: TrainingPairStatus,\n    reducedTrainingStatus: TrainingStatus\n): TrainingStatus => {\n    return {\n        attemptedTrainingPairs:\n            reducedTrainingStatus.attemptedTrainingPairs +\n            (trainingPairStatus !== TrainingPairStatus.untrained ? 1 : 0),\n        isCompleted: false,\n        isProgressBlocked: false,\n        missedTrainingPairs:\n            trainingPairStatus === TrainingPairStatus.missed\n                ? reducedTrainingStatus.missedTrainingPairs.concat([\n                      {\n                          dealerSymbol,\n                          handCode\n                      }\n                  ])\n                : reducedTrainingStatus.missedTrainingPairs,\n        passedTrainingPairs:\n            reducedTrainingStatus.passedTrainingPairs +\n            (trainingPairStatus === TrainingPairStatus.passed ? 1 : 0),\n        trainingProgress: reducedTrainingStatus.trainingProgress\n    };\n};\n\nexport const retrieveTrainingStatus = (\n    trainingProgress: TrainingProgress,\n    trainingHands: TrainingHands,\n    gameConfig: GameConfig\n): TrainingStatus => {\n    const trainingStatus = getObjectKeys(trainingProgress).reduce<TrainingStatus>(\n        (reducedTrainingStatus, handCode) =>\n            reduceTrainingHandProgress(handCode, trainingProgress[handCode], reducedTrainingStatus),\n        {\n            attemptedTrainingPairs: 0,\n            isCompleted: false,\n            isProgressBlocked: false,\n            missedTrainingPairs: [],\n            passedTrainingPairs: 0,\n            trainingProgress: trainingProgress\n        } as TrainingStatus\n    );\n\n    trainingStatus.isCompleted = isTrainingCompleted(trainingStatus.passedTrainingPairs);\n    trainingStatus.isProgressBlocked = getIsProgressBlocked(\n        trainingStatus,\n        trainingHands,\n        gameConfig.selectedHandsOnly,\n        gameConfig.selectedHands\n    );\n\n    return trainingStatus;\n};\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport Svg, { Path } from 'react-native-svg';\nimport { AppNavigation, initialRouteName, RouteNames } from '../../types';\n\nexport interface ConfigButtonProps {\n    isEnabled: boolean;\n    isProgressBlocked: boolean;\n    navigation: AppNavigation;\n    progress: number;\n    routeName?: string;\n}\n\nexport const ConfigButton: React.FC<ConfigButtonProps> = (props) => {\n    return (\n        <TouchableOpacity\n            onPress={\n                props.isEnabled\n                    ? () => {\n                          if (props.routeName === initialRouteName) {\n                              props.navigation.navigate(RouteNames.configMenu);\n                          } else {\n                              props.navigation.goBack();\n                          }\n                      }\n                    : undefined\n            }\n            style={{\n                alignItems: 'center',\n                flexGrow: 1,\n                justifyContent: 'center',\n                width: '100%'\n            }}\n        >\n            {props.routeName === initialRouteName ? (\n                <React.Fragment>\n                    <Svg height={24} viewBox=\"340 140 280 279.416\" width={24}>\n                        <Path\n                            fill=\"white\"\n                            d=\"M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083\n\tc-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333\n\tL362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25\n\tc2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916\n\th51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25\n\tc4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667\n\tS533.667,250.25,533.667,280S509.75,333.666,480,333.666z\"\n                        />\n                    </Svg>\n                    {props.isProgressBlocked && props.progress < 100 && (\n                        <View\n                            style={{\n                                position: 'absolute',\n                                right: 8,\n                                bottom: 8\n                            }}\n                        >\n                            <Text style={{ color: 'black', fontWeight: 'bold' }}>⚠️</Text>\n                        </View>\n                    )}\n                </React.Fragment>\n            ) : (\n                <Svg height={24} viewBox=\"0 0 352 512\" width={24}>\n                    <Path\n                        fill=\"white\"\n                        d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\n                    />\n                </Svg>\n            )}\n        </TouchableOpacity>\n    );\n};\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport Svg, { G, Path } from 'react-native-svg';\nimport { dangerColor, splitColor } from '../../constants';\nimport { AppNavigation, RouteNames } from '../../types';\n\nexport interface EarningsIndicatorProps {\n    earnings: number;\n    isEnabled: boolean;\n    navigation: AppNavigation;\n}\n\nexport const EarningsIndicator: React.FC<EarningsIndicatorProps> = (props) => {\n    const earningsColor =\n        props.earnings > 0 ? splitColor : props.earnings < 0 ? dangerColor : 'white';\n\n    return (\n        <TouchableOpacity\n            onPress={\n                props.isEnabled\n                    ? () => {\n                          props.navigation.navigate(RouteNames.earningsChart);\n                      }\n                    : undefined\n            }\n            style={{\n                alignItems: 'center',\n                flexGrow: 1,\n                justifyContent: 'center'\n            }}\n        >\n            <View style={{ flexDirection: 'row' }}>\n                <Text style={{ color: earningsColor, fontSize: 20 }}>\n                    {`${props.earnings > 0 ? '+' : ''}${props.earnings}`}\n                </Text>\n                <Svg height={24} viewBox=\"0 0 468 468\" width={24} style={{ marginTop: 2 }}>\n                    <G transform=\"translate(0,468) scale(0.078000,-0.078000)\">\n                        <Path\n                            fill={earningsColor}\n                            d=\"M2600 5595 c0 -237 -3 -305 -12 -305 -7 0 -63 -5 -125 -10 -140 -12\n                    -299 -49 -398 -91 -11 -4 -49 -20 -85 -35 -304 -124 -635 -421 -789 -706 -33\n                    -63 -80 -169 -88 -202 -35 -143 -41 -258 -23 -421 37 -323 180 -591 420 -785\n                    77 -62 83 -66 116 -87 28 -18 244 -126 279 -140 27 -10 103 -36 115 -38 19 -5\n                    100 -27 120 -35 59 -20 254 -55 418 -75 l52 -7 0 -515 0 -516 -82 6 c-76 5\n                    -198 30 -223 45 -5 4 -12 7 -15 8 -71 14 -269 163 -285 215 -4 11 -10 19 -14\n                    19 -12 0 -75 133 -95 200 l-17 55 -410 -3 -410 -2 6 -63 c17 -165 65 -343 132\n                    -487 26 -54 99 -185 115 -205 4 -5 27 -35 51 -65 72 -93 202 -215 327 -306 60\n                    -44 244 -154 257 -154 5 0 25 -9 44 -19 34 -18 167 -63 264 -90 62 -17 188\n                    -31 276 -31 l79 0 0 -325 0 -325 375 0 375 0 2 332 3 333 85 6 c121 9 341 58\n                    430 96 8 3 18 7 22 7 3 1 10 4 14 8 4 5 13 8 20 8 16 0 162 70 249 119 39 22\n                    77 44 85 48 8 4 20 12 27 17 7 6 36 27 64 46 70 47 221 181 267 237 20 24 47\n                    57 60 71 36 42 132 200 162 267 104 232 133 496 79 720 -11 44 -21 89 -24 100\n                    -7 28 -110 235 -132 264 -193 254 -402 410 -708 524 -138 51 -348 95 -495 102\n                    -58 3 -129 8 -158 11 l-52 5 2 502 3 502 58 -2 c154 -5 367 -94 455 -188 66\n                    -71 103 -148 110 -230 l5 -65 431 0 432 0 -4 38 c-4 47 -29 151 -52 222 -141\n                    430 -441 791 -800 962 -133 63 -169 78 -235 94 -5 2 -44 12 -86 23 -42 11\n                    -123 25 -180 31 -57 6 -112 13 -121 16 -17 5 -18 28 -18 290 l0 284 -375 0\n                    -375 0 0 -305z m0 -1585 l0 -450 -57 0 c-52 1 -84 6 -159 23 -30 7 -158 59\n                    -164 66 -3 3 -18 13 -35 21 -54 28 -151 128 -186 192 -32 59 -34 69 -34 158 0\n                    69 6 111 20 154 56 167 269 281 528 285 l87 1 0 -450z m975 -1485 c219 -17\n                    399 -118 472 -266 46 -93 48 -281 3 -367 -80 -153 -329 -259 -612 -261 l-88\n                    -1 0 448 c0 247 3 452 7 456 4 4 37 4 73 2 36 -3 101 -8 145 -11z\"\n                        />\n                    </G>\n                </Svg>\n            </View>\n        </TouchableOpacity>\n    );\n};\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport Svg, { Path } from 'react-native-svg';\nimport { AppNavigation, RouteNames } from '../../types';\n\nexport interface PrecisionIndicatorProps {\n    isEnabled: boolean;\n    navigation: AppNavigation;\n    precision: number;\n}\n\nexport const PrecisionIndicator: React.FC<PrecisionIndicatorProps> = (props) => {\n    const precision = Math.floor(props.precision * 1000) / 10;\n    return (\n        <TouchableOpacity\n            onPress={\n                props.isEnabled\n                    ? () => {\n                          props.navigation.navigate(RouteNames.missedPairs);\n                      }\n                    : undefined\n            }\n            style={{\n                alignItems: 'center',\n                flexGrow: 1,\n                justifyContent: 'center'\n            }}\n        >\n            <View style={{ flexDirection: 'row' }}>\n                <Text style={{ color: 'white', fontSize: 20 }}>{precision}%</Text>\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\n                    <Path\n                        fill=\"white\"\n                        d=\"M784.5,368.7L990,163.2l-166.9,11.6L834.7,7.9L629.2,213.4l-9,128.5L499.6,462.6c-10.1,0.1-20.1,3.9-27.8,11.6c-15.5,15.5-15.5,40.6,0,56.1c15.5,15.5,40.6,15.5,56.1,0c9.6-9.6,13.3-23,10.9-35.4L656,377.7L784.5,368.7z M671.4,232.6l112-112l-7.1,101l101-7l-112,112l-101,7L671.4,232.6z\"\n                    />\n                    <Path\n                        fill=\"white\"\n                        d=\"M967.8,357.1l-35.6,33.2c10.7,41.4,15.4,84.1,13.9,127.5c-8.6,246-215.7,439.2-461.7,430.6c-246-8.6-439.2-215.7-430.6-461.7c8.6-246,215.7-439.2,461.7-430.6c28.6,1,56.9,5,84.6,11.4l37.7-35.2c-39.3-11.5-79.9-18.2-120.9-19.6C247,3.3,19.7,215.2,10.3,485.2C0.9,755.1,212.8,982.3,482.7,991.8c269.9,9.4,497.2-202.5,506.6-472.4C991.3,463.9,984,409.5,967.8,357.1z\"\n                    />\n                    <Path\n                        fill=\"white\"\n                        d=\"M698.1,426.1c7,18.4,11.6,37.7,13.3,57.6c10.2,116.6-76.4,219.9-193.1,230.1C401.7,724,298.5,637.4,288.3,520.8c-10.2-116.6,76.4-219.9,193-230.1c25.8-2.3,51.7,0.3,76.3,7.3l-4-45.6c-24.8-5.3-50.5-7.1-76.1-4.8C337.1,259.8,232.8,384.1,245,524.5C257.3,665,381.6,769.3,522.1,757C662.6,744.7,766.9,620.5,754.6,480c-1.7-19.8-5.8-39.1-11.9-57.7L698.1,426.1z\"\n                    />\n                </Svg>\n            </View>\n        </TouchableOpacity>\n    );\n};\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport Svg, { Path } from 'react-native-svg';\nimport { AppNavigation, RouteNames } from '../../types';\n\nexport interface NavBarProps {\n    isEnabled: boolean;\n    navigation: AppNavigation;\n    progress: number;\n}\n\nexport const ProgressIndicator: React.FC<NavBarProps> = (props) => {\n    return (\n        <TouchableOpacity\n            onPress={\n                props.isEnabled\n                    ? () => {\n                          props.navigation.navigate(RouteNames.trainingPairs);\n                      }\n                    : undefined\n            }\n            style={{\n                alignItems: 'center',\n                flexGrow: 1,\n                justifyContent: 'center'\n            }}\n        >\n            <View style={{ flexDirection: 'row' }}>\n                <Text style={{ color: 'white', fontSize: 20 }}>{props.progress}%</Text>\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\n                    <Path\n                        fill=\"white\"\n                        d=\"M819.5,386.3h-2.5c-18.4,0-33.4,5.3-48,14.3c-12.7-37.1-45-63.7-86.6-63.7c-18.4,0-35.9,5.3-50.4,14.3c-12.7-37-45-63.7-86.6-63.7c-16.2,0-31.3,4.1-44.7,11.2v-95.3c0-51.9-39.3-94-91.6-94s-94.7,42.1-94.7,94v365l-57.5-57.3c-37-36.7-102.4-31.5-133.9,0s-52.1,94.9-7,140l264.5,262.7c5.5,5.4,11.5,9.9,17.8,13.8c48.2,39.3,103.5,62.6,220.3,62.6c266.9,0,291.6-144,291.6-321.6v-188C910.1,428.4,871.8,386.3,819.5,386.3z M860.3,668.4c0,150.3-0.7,272.1-241.8,272.1c-102.1,0-163.4-22.8-209.9-68.9L158.3,622.9c-22.2-22.2-16.6-50.5,1.6-68.6c18.1-18.1,51.4-18.8,68.9-1.4c0,0,43.9,43.7,81.8,81.3c28.6,28.5,53.8,53.5,53.8,53.5V213.2c0-24.6,20.1-44.5,44.9-44.5c24.8,0,41.7,19.9,41.7,44.5V515h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.4-0.5-5h0.5V391.3c0-24.6,17.9-44.5,42.7-44.5c0,0,43.9-0.6,43.9,44.5v163.3h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.3-0.5-5h0.5V440.8c0-24.6,17.6-44.5,42.4-44.5c0,0,44.8,2.8,44.8,44.5v143.5h0.5c-0.3,1.6-0.5,3.3-0.5,4.9c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.3-11.1,24.3-24.7c0-1.7-0.2-3.3-0.5-4.9h0.5v-98c0-24.6,18.5-44.5,43.3-44.5c0,0,43.4-1.8,43.4,44.5C860.3,486.3,860.3,628.4,860.3,668.4z M277.5,343.4v-83.1c-7.9-17.7-12.4-37.3-12.4-58c0-78.8,63.9-142.7,142.7-142.7s142.7,63.9,142.7,142.7c0,10.8-1.3,21.2-3.6,31.3c17.9,0.7,34.1,8.1,45.9,20.1c4.6-16.4,7.3-33.5,7.3-51.4C600,96.1,513.9,10,407.7,10S215.4,96.1,215.4,202.3C215.4,258.1,239.4,308.3,277.5,343.4z\"\n                    />\n                </Svg>\n            </View>\n        </TouchableOpacity>\n    );\n};\n","import { OnBoardingSections, OnBoardingStep, OnBoardingStepEvent, RouteNames } from '../types';\n\nexport const onBoardingSteps: OnBoardingStep[] = [\n    {\n        activeSection: [OnBoardingSections.tableActions],\n        event: OnBoardingStepEvent.startRound,\n        hideNextButton: true,\n        load: (navigation) => {\n            navigation.navigate(RouteNames.table);\n        },\n        text: 'Click Random to start training a random pair'\n    },\n    {\n        activeSection: [OnBoardingSections.tablePlayerHands],\n        hidePreviousButton: true,\n        text: 'This is your hand'\n    },\n    {\n        activeSection: [OnBoardingSections.tableDealerHand],\n        text: \"This is the dealer's hand\"\n    },\n    {\n        activeSection: [OnBoardingSections.tableDealerHand, OnBoardingSections.tablePlayerHands],\n        text: 'training pair = player hand vs dealer up card'\n    },\n    {\n        activeSection: [OnBoardingSections.tableActions],\n        event: OnBoardingStepEvent.playerAction,\n        hideNextButton: true,\n        hidePreviousButton: true,\n        text: 'Chose an action for each of your hands'\n    },\n    {\n        activeSection: [OnBoardingSections.tableFeedback],\n        hidePreviousButton: true,\n        text: 'Check whether you chose the right action'\n    },\n    {\n        activeSection: [OnBoardingSections.progressIndicator],\n        load: (navigation) => {\n            navigation.navigate(RouteNames.table);\n        },\n        text: 'This indicator shows the % of trained pairs'\n    },\n    {\n        load: (navigation) => {\n            navigation.navigate(RouteNames.trainingPairs);\n        },\n        text: 'Click on it to train pairs or view their status'\n    },\n    {\n        activeSection: [OnBoardingSections.precisionIndicator],\n        load: (navigation) => {\n            navigation.navigate(RouteNames.table);\n        },\n        text: 'This indicator shows the % of passed pairs'\n    },\n    {\n        activeSection: [OnBoardingSections.missedPairs],\n        load: (navigation) => {\n            navigation.navigate(RouteNames.missedPairs);\n        },\n        text: \"Click on it to see the pairs you've missed\"\n    },\n    {\n        activeSection: [OnBoardingSections.earningsIndicator],\n        load: (navigation) => {\n            navigation.navigate(RouteNames.table);\n        },\n        text: 'This indicator shows your cash status'\n    },\n    {\n        load: (navigation) => {\n            navigation.navigate(RouteNames.earningsChart);\n        },\n        text: 'Click on it to see your historical of earnings'\n    },\n    {\n        activeSection: [OnBoardingSections.configMenuButton],\n        load: (navigation) => {\n            navigation.navigate(RouteNames.table);\n        },\n        text: 'Click here to access the configuration menu'\n    },\n    {\n        activeSection: [OnBoardingSections.basicStrategyTable],\n        load: (navigation) => {\n            navigation.navigate(RouteNames.configMenu);\n        },\n        text: 'View and memorize the basic strategy table'\n    },\n    {\n        activeSection: [OnBoardingSections.casinoRules],\n        text: 'Chose the casino rules you want to train with'\n    },\n    {\n        activeSection: [OnBoardingSections.appSettings],\n        text: 'Speed up your training with additional options'\n    },\n    {\n        activeSection: [OnBoardingSections.resetTraining],\n        text: 'Start training over and master basic strategy'\n    }\n];\n","import React from 'react';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport { onBoardingSteps } from '../logic/onboarding';\nimport { OnBoardingSections } from '../types';\n\nexport interface OnBoardingSectionProps {\n    isHighlighted?: OnBoardingSections | boolean;\n    onBoardingStep: number;\n    style?: StyleProp<ViewStyle> | ((isHighlighted: boolean) => StyleProp<ViewStyle>);\n}\n\nexport const OnBoardingSection: React.FC<OnBoardingSectionProps> = (props) => {\n    const isOnboardingActive = props.onBoardingStep > -1;\n    const isHighlighted =\n        isOnboardingActive &&\n        (typeof props.isHighlighted === 'boolean'\n            ? props.isHighlighted\n            : props.isHighlighted !== undefined &&\n              onBoardingSteps[props.onBoardingStep] &&\n              onBoardingSteps[props.onBoardingStep].activeSection !== undefined &&\n              onBoardingSteps[props.onBoardingStep].activeSection!.indexOf(props.isHighlighted) >\n                  -1);\n    const style =\n        props.style && typeof props.style === 'function' ? props.style(isHighlighted) : props.style;\n\n    return (\n        <View\n            style={{\n                width: '100%',\n                ...(style as {})\n            }}\n        >\n            {props.children}\n            {isOnboardingActive && !isHighlighted && (\n                <View\n                    style={{\n                        backgroundColor: 'black',\n                        opacity: 0.5,\n                        top: 0,\n                        position: 'absolute',\n                        bottom: 0,\n                        right: 0,\n                        left: 0\n                    }}\n                />\n            )}\n        </View>\n    );\n};\n","import React, { useEffect, useMemo } from 'react';\nimport { Animated, View } from 'react-native';\nimport { tableColor } from '../constants';\nimport { getProgressPercentage } from '../logic/training-status';\nimport { AppNavigation, OnBoardingSections, Player, TrainingStatus } from '../types';\nimport { ConfigButton } from './nav-bar-items/config-button';\nimport { EarningsIndicator } from './nav-bar-items/earnings-indicator';\nimport { PrecisionIndicator } from './nav-bar-items/precision-indicator';\nimport { ProgressIndicator } from './nav-bar-items/progress-indicator';\nimport { OnBoardingSection } from './onboarding-section';\n\nexport interface NavBarProps {\n    navigation: AppNavigation;\n    onBoardingStep: number;\n    player: Player;\n    routeName?: string;\n    trainingStatus: TrainingStatus;\n}\n\nconst shakeAmplitude = 6;\nconst shakeDuration = 40;\nconst useNativeDriver = true;\n\nconst animateIndicator = (position: Animated.Value) => {\n    Animated.sequence([\n        Animated.timing(position, {\n            toValue: shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: -shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: -shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: -shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: shakeAmplitude,\n            duration: shakeDuration,\n            useNativeDriver\n        }),\n        Animated.timing(position, {\n            toValue: 0,\n            duration: shakeDuration,\n            useNativeDriver\n        })\n    ]).start();\n};\n\nexport const NavBar: React.FC<NavBarProps> = (props) => {\n    const precision =\n        props.trainingStatus.attemptedTrainingPairs > 0\n            ? props.trainingStatus.passedTrainingPairs / props.trainingStatus.attemptedTrainingPairs\n            : 0;\n\n    const earningsPosition = useMemo(() => new Animated.Value(0), []);\n    const precisionPosition = useMemo(() => new Animated.Value(0), []);\n    const progressPosition = useMemo(() => new Animated.Value(0), []);\n\n    const progressPercentage = getProgressPercentage(props.trainingStatus.attemptedTrainingPairs);\n\n    useEffect(() => {\n        animateIndicator(earningsPosition);\n    }, [props.player.cash]);\n\n    useEffect(() => {\n        animateIndicator(precisionPosition);\n    }, [precision]);\n\n    useEffect(() => {\n        animateIndicator(progressPosition);\n    }, [progressPercentage]);\n\n    return (\n        <View\n            style={{\n                flexDirection: 'row',\n                height: 48,\n                width: '100%'\n            }}\n        >\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.earningsIndicator}\n                onBoardingStep={props.onBoardingStep}\n                style={(isHighlighted) => ({\n                    backgroundColor: isHighlighted ? tableColor : 'black',\n                    height: '100%',\n                    justifyContent: 'center',\n                    width: '25%'\n                })}\n            >\n                <Animated.View\n                    style={{\n                        flexGrow: 1,\n                        transform: [{ translateX: earningsPosition }]\n                    }}\n                >\n                    <EarningsIndicator\n                        earnings={props.player.cash}\n                        isEnabled={props.onBoardingStep === -1}\n                        navigation={props.navigation}\n                    />\n                </Animated.View>\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.precisionIndicator}\n                onBoardingStep={props.onBoardingStep}\n                style={(isHighlighted) => ({\n                    backgroundColor: isHighlighted ? tableColor : 'black',\n                    height: '100%',\n                    justifyContent: 'center',\n                    width: '30%'\n                })}\n            >\n                <Animated.View\n                    style={{\n                        flexGrow: 1,\n                        transform: [{ translateX: precisionPosition }]\n                    }}\n                >\n                    <PrecisionIndicator\n                        isEnabled={props.onBoardingStep === -1}\n                        navigation={props.navigation}\n                        precision={precision}\n                    />\n                </Animated.View>\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.progressIndicator}\n                onBoardingStep={props.onBoardingStep}\n                style={(isHighlighted) => ({\n                    backgroundColor: isHighlighted ? tableColor : 'black',\n                    height: '100%',\n                    justifyContent: 'center',\n                    width: '30%'\n                })}\n            >\n                <Animated.View\n                    style={{\n                        flexGrow: 1,\n                        transform: [{ translateX: progressPosition }]\n                    }}\n                >\n                    <ProgressIndicator\n                        isEnabled={props.onBoardingStep === -1}\n                        navigation={props.navigation}\n                        progress={progressPercentage}\n                    />\n                </Animated.View>\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.configMenuButton}\n                onBoardingStep={props.onBoardingStep}\n                style={(isHighlighted) => ({\n                    alignItems: 'center',\n                    backgroundColor: isHighlighted ? tableColor : 'black',\n                    height: '100%',\n                    justifyContent: 'center',\n                    width: '15%'\n                })}\n            >\n                <ConfigButton\n                    isEnabled={props.onBoardingStep === -1}\n                    isProgressBlocked={props.trainingStatus.isProgressBlocked}\n                    navigation={props.navigation}\n                    progress={progressPercentage}\n                    routeName={props.routeName}\n                />\n            </OnBoardingSection>\n        </View>\n    );\n};\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\ninterface ButtonProps {\n    backgroundColor?: string;\n    height: number | string;\n    isEnabled: boolean;\n    marginBottom?: number;\n    marginTop?: number;\n    onPress: () => void;\n    text: string;\n    textColor?: string;\n    textSize?: number;\n    width: number | string;\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => (\n    <TouchableOpacity\n        style={{\n            height: props.height,\n            marginBottom: props.marginBottom,\n            marginTop: props.marginTop,\n            width: props.width\n        }}\n        onPress={props.isEnabled ? props.onPress : undefined}\n    >\n        <View\n            style={{\n                alignItems: 'center',\n                backgroundColor: props.backgroundColor,\n                height: '100%',\n                justifyContent: 'center',\n                opacity: props.isEnabled ? 1 : 0.4,\n                width: '100%'\n            }}\n        >\n            <Text\n                style={{\n                    color: props.textColor || 'white',\n                    fontSize: props.textSize || 20,\n                    fontWeight: 'bold'\n                }}\n            >\n                {props.text}\n            </Text>\n        </View>\n    </TouchableOpacity>\n);\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { onBoardingSteps } from '../logic/onboarding';\nimport { Button } from './button';\n\ninterface OnboardingBarProps {\n    exitOnboarding: () => void;\n    nextStepHandler: () => void;\n    onBoardingStep: number;\n    previousStepHandler: () => void;\n}\n\nexport const OnboardingBar: React.FC<OnboardingBarProps> = (props) => {\n    const currentStep = onBoardingSteps[props.onBoardingStep];\n\n    return (\n        <View style={{ alignItems: 'center', backgroundColor: 'white', flexDirection: 'row' }}>\n            <View style={{ width: '10%' }}>\n                {props.onBoardingStep > 0 && !currentStep.hidePreviousButton && (\n                    <Button\n                        height={56}\n                        isEnabled={true}\n                        onPress={props.previousStepHandler}\n                        text=\"⬅️\"\n                        textColor=\"black\"\n                        textSize={24}\n                        width=\"100%\"\n                    />\n                )}\n            </View>\n\n            <View style={{ width: '70%' }}>\n                <Text style={{ color: 'black', fontSize: 20, padding: 16 }}>\n                    {currentStep.text}\n                </Text>\n            </View>\n\n            <View style={{ width: '10%' }}>\n                {props.onBoardingStep < onBoardingSteps.length - 1 &&\n                    !currentStep.hideNextButton && (\n                        <Button\n                            height={56}\n                            isEnabled={true}\n                            onPress={props.nextStepHandler}\n                            text=\"➡️\"\n                            textColor=\"black\"\n                            textSize={24}\n                            width=\"100%\"\n                        />\n                    )}\n            </View>\n\n            <View style={{ width: '10%' }}>\n                <Button\n                    height={56}\n                    isEnabled={true}\n                    onPress={props.exitOnboarding}\n                    text=\"❌\"\n                    textColor=\"black\"\n                    textSize={20}\n                    width=\"100%\"\n                />\n            </View>\n        </View>\n    );\n};\n","import {\n    Card,\n    Hand,\n    HandOutcome,\n    Player,\n    SimpleCardSymbol,\n    TrainingHands,\n    TrainingProgress\n} from '../types';\nimport { getRandomCard } from './card';\nimport { createHand, dealCard, getCardForUntrainedHand, handToHandCode, resolveHand } from './hand';\n\nexport const createPlayer = (): Player => ({\n    cash: 0,\n    earningsHistorical: [0],\n    handIndex: 0,\n    hands: [],\n    lastActionHand: undefined\n});\n\nexport const hitCurrentHand = (\n    player: Player,\n    untrainedPairsPriority: boolean,\n    dealerSymbol: SimpleCardSymbol,\n    trainingHands: TrainingHands,\n    trainingProgress: TrainingProgress\n) => {\n    const currentHand = getCurrentHand(player);\n    player.lastActionHand = handToHandCode(currentHand);\n    const nextCard = untrainedPairsPriority\n        ? getCardForUntrainedHand(currentHand, dealerSymbol, trainingHands, trainingProgress)\n        : getRandomCard();\n    dealCard(currentHand, nextCard);\n};\n\nexport const doubleCurrentHand = (player: Player, card: Card) => {\n    const currentHand = getCurrentHand(player);\n    player.lastActionHand = handToHandCode(currentHand);\n    dealCard(currentHand, card);\n    player.cash -= currentHand.bet;\n    currentHand.bet *= 2;\n};\n\nexport const getCurrentHand = (player: Player): Hand => player.hands[player.handIndex];\n\nexport const initializeHands = (player: Player, initialHand: Hand) => {\n    player.cash -= initialHand.bet;\n    player.hands = [initialHand];\n    player.handIndex = 0;\n    player.lastActionHand = undefined;\n};\n\nexport const isLastHand = (player: Player) => player.hands.length - 1 <= player.handIndex;\n\nexport const resolvePlayerEarnings = (player: Player, dealerHand: Hand) =>\n    player.hands.reduce((earnings, hand) => {\n        const handOutcome = resolveHand(hand, player.hands.length, dealerHand);\n        return (\n            earnings +\n            (handOutcome === HandOutcome.blackjack\n                ? hand.bet * 2.5\n                : handOutcome === HandOutcome.playerWins\n                ? hand.bet * 2\n                : handOutcome === HandOutcome.push\n                ? hand.bet\n                : 0)\n        );\n    }, 0);\n\nexport const splitCurrentHand = (\n    player: Player,\n    untrainedPairsPriority: boolean,\n    dealerSymbol: SimpleCardSymbol,\n    trainingHands: TrainingHands,\n    trainingProgress: TrainingProgress\n) => {\n    const currentHand = getCurrentHand(player);\n    player.lastActionHand = handToHandCode(currentHand);\n    const firstHand = createHand([currentHand.cards[0]]);\n    const secondHand = createHand([currentHand.cards[1]]);\n    player.cash -= secondHand.bet;\n    const nextCard = untrainedPairsPriority\n        ? getCardForUntrainedHand(firstHand, dealerSymbol, trainingHands, trainingProgress)\n        : getRandomCard();\n    dealCard(firstHand, nextCard);\n    player.hands.splice(player.handIndex, 1, firstHand, secondHand);\n};\n\nexport const startNextHand = (\n    player: Player,\n    untrainedPairsPriority: boolean,\n    dealerSymbol: SimpleCardSymbol,\n    trainingHands: TrainingHands,\n    trainingProgress: TrainingProgress\n) => {\n    player.handIndex++;\n    const nextHand = player.hands[player.handIndex];\n    const nextCard = untrainedPairsPriority\n        ? getCardForUntrainedHand(nextHand, dealerSymbol, trainingHands, trainingProgress)\n        : getRandomCard();\n    dealCard(nextHand, nextCard);\n};\n\nexport const standCurrentHand = (player: Player) => {\n    const currentHand = getCurrentHand(player);\n    player.lastActionHand = handToHandCode(currentHand);\n};\n\nexport const surrenderCurrentHand = (player: Player) => {\n    const currentHand = getCurrentHand(player);\n    player.lastActionHand = handToHandCode(currentHand);\n    player.cash += currentHand.bet / 2;\n    player.hands.splice(player.handIndex, 1);\n};\n","import { updatePlayerEarnings, updatePlayerEarningsHistorical } from '../async-storage';\nimport { CasinoRules, CasinoRulesKeys, GameConfig, Hand, Phases, Player } from '../types';\nimport { getRandomCard } from './card';\nimport {\n    dealCard,\n    getHandEffectiveValue,\n    getHandValidValues,\n    hasHoleCard,\n    revealDealerHoleCard\n} from './hand';\nimport { resolvePlayerEarnings } from './player';\n\nexport const handleDealerTurn = (\n    dealerHand: Hand,\n    gameConfig: GameConfig,\n    player: Player,\n    setDealerHand: (dealerHand: Hand) => void,\n    setPhase: (phase: Phases) => void,\n    setPlayer: (player: Player) => void\n) => {\n    let nextDealerHand = { ...dealerHand };\n\n    if (\n        gameConfig.isDealerAnimationEnabled &&\n        mustDealerDraw(nextDealerHand, gameConfig.casinoRules)\n    ) {\n        setTimeout(() => {\n            if (hasHoleCard(dealerHand)) {\n                revealDealerHoleCard(nextDealerHand);\n            } else {\n                dealCard(nextDealerHand, getRandomCard());\n            }\n            setDealerHand(nextDealerHand);\n            // Setting the dealerHand will trigger this handler again, through useEffect\n        }, 1000);\n    } else {\n        if (!gameConfig.isDealerAnimationEnabled) {\n            if (hasHoleCard(dealerHand)) {\n                revealDealerHoleCard(nextDealerHand);\n            }\n\n            while (mustDealerDraw(nextDealerHand, gameConfig.casinoRules)) {\n                dealCard(nextDealerHand, getRandomCard());\n            }\n            setDealerHand(nextDealerHand);\n        }\n\n        const playerEarnings = resolvePlayerEarnings(player, nextDealerHand);\n        const nextCash = player.cash + playerEarnings;\n        const nextEarningsHistorical = player.earningsHistorical.concat([nextCash]);\n        const nextPlayer: Player = {\n            ...player,\n            cash: nextCash,\n            earningsHistorical: nextEarningsHistorical\n        };\n\n        setPlayer(nextPlayer);\n        setPhase(Phases.finished);\n\n        updatePlayerEarnings(nextCash);\n        updatePlayerEarningsHistorical(nextEarningsHistorical);\n    }\n};\n\nconst mustDealerDraw = (dealerHand: Hand, casinoRules: CasinoRules) => {\n    const handEffectiveValue = getHandEffectiveValue(dealerHand);\n    return (\n        handEffectiveValue < 17 ||\n        (casinoRules[CasinoRulesKeys.dealerHitsSoft17] &&\n            getHandValidValues(dealerHand).length > 1 &&\n            handEffectiveValue === 17)\n    );\n};\n","import {\n    BaseDecisions,\n    DecisionEvaluation,\n    DynamicConditions,\n    DynamicDecision,\n    DynamicDecisions,\n    Hand,\n    PlayerDecision,\n    PlayerDecisions,\n    TrainingHands\n} from '../types';\nimport { symbolToSimpleSymbol } from './card';\nimport { handToHandCode } from './hand';\n\nexport const evaluateDecision = (\n    playerHand: Hand,\n    dealerHand: Hand,\n    trainingHands: TrainingHands,\n    dynamicConditions: DynamicConditions,\n    playerDecision: PlayerDecision\n): DecisionEvaluation => {\n    const handCode = handToHandCode(playerHand);\n    const trainingHand = trainingHands[handCode];\n    const dealerSymbol = symbolToSimpleSymbol(dealerHand.cards[0].symbol);\n\n    const dynamicDecision = trainingHand.decisionSet[dealerSymbol];\n    const optimalDecision = evaluateDynamicDecision(dynamicDecision, dynamicConditions);\n\n    return {\n        dealerSymbol,\n        dynamicDecision,\n        handName: trainingHand.name,\n        isHit: playerDecision === optimalDecision\n    };\n};\n\nconst evaluateDynamicDecision = (\n    dynamicDecision: DynamicDecision,\n    dynamicConditions: DynamicConditions\n): PlayerDecision =>\n    dynamicDecision === DynamicDecisions.double_hit\n        ? dynamicConditions.canDouble\n            ? PlayerDecisions.double\n            : BaseDecisions.hit\n        : dynamicDecision === DynamicDecisions.double_stand\n        ? dynamicConditions.canDouble\n            ? PlayerDecisions.double\n            : BaseDecisions.stand\n        : dynamicDecision === DynamicDecisions.split_hit\n        ? dynamicConditions.canSplit\n            ? PlayerDecisions.split\n            : BaseDecisions.hit\n        : dynamicDecision === DynamicDecisions.split_stand\n        ? dynamicConditions.canSplit\n            ? PlayerDecisions.split\n            : BaseDecisions.stand\n        : dynamicDecision === DynamicDecisions.split_surrender_hit\n        ? dynamicConditions.canSplit\n            ? PlayerDecisions.split\n            : dynamicConditions.canSurrender\n            ? PlayerDecisions.surrender\n            : BaseDecisions.hit\n        : dynamicDecision === DynamicDecisions.surrender_hit\n        ? dynamicConditions.canSurrender\n            ? PlayerDecisions.surrender\n            : BaseDecisions.hit\n        : dynamicDecision === DynamicDecisions.surrender_split_hit\n        ? dynamicConditions.canSurrender\n            ? PlayerDecisions.surrender\n            : dynamicConditions.canSplit\n            ? PlayerDecisions.split\n            : BaseDecisions.hit\n        : dynamicDecision === DynamicDecisions.surrender_stand\n        ? dynamicConditions.canSurrender\n            ? PlayerDecisions.surrender\n            : BaseDecisions.stand\n        : dynamicDecision;\n","import { Dictionary, GameConfig, HandCode } from '../types';\nimport { getDefaultCasinoRules } from './casino-rules';\n\nexport const getDefaultGameConfig = (): GameConfig => ({\n    casinoRules: getDefaultCasinoRules(),\n    isDealerAnimationEnabled: true,\n    isSoundEnabled: true,\n    selectedHands: Object.values(HandCode).reduce(\n        (hands, handCode) => ({ ...hands, [handCode]: true }),\n        {}\n    ) as Dictionary<boolean, HandCode>,\n    selectedHandsOnly: false,\n    untrainedPairsPriority: false\n});\n","import { Picker } from '@react-native-picker/picker';\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { tableColor } from '../../constants';\nimport { CasinoRules, CasinoRulesKeys, Doubling } from '../../types';\n\ninterface DoublingPickerProps {\n    casinoRules: CasinoRules;\n    onValueChange: (nextCasinoRules: CasinoRules) => void;\n}\n\nexport const DoublingPicker: React.FC<DoublingPickerProps> = (props) => {\n    return (\n        <View\n            style={{\n                alignItems: 'center',\n                flexDirection: 'row',\n                paddingTop: 16,\n                width: '100%'\n            }}\n        >\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 20\n                }}\n            >\n                {CasinoRulesKeys.doubling}\n            </Text>\n\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\n                <Picker\n                    selectedValue={String(props.casinoRules[CasinoRulesKeys.doubling])}\n                    style={{\n                        backgroundColor: 'transparent',\n                        color: tableColor,\n                        height: 35,\n                        width: '100%'\n                    }}\n                    onValueChange={(newValue: string) => {\n                        const nextDoubling = parseInt(newValue);\n                        const nextCasinoRules = {\n                            ...props.casinoRules,\n                            [CasinoRulesKeys.doublingAfterSplit]:\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\n                                nextDoubling > 0,\n                            [CasinoRulesKeys.doubling]: nextDoubling\n                        };\n                        props.onValueChange(nextCasinoRules);\n                    }}\n                >\n                    <Picker.Item label=\"Any pair\" value={String(Doubling.anyPair)} />\n                    <Picker.Item\n                        label=\"9, 10, 11, S19, S20\"\n                        value={String(Doubling.nineToElevenSoft)}\n                    />\n                    <Picker.Item label=\"9, 10, 11\" value={String(Doubling.nineToEleven)} />\n                    <Picker.Item label=\"10, 11\" value={String(Doubling.tenToEleven)} />\n                    <Picker.Item label=\"None\" value={String(Doubling.none)} />\n                </Picker>\n            </View>\n        </View>\n    );\n};\n","import React from 'react';\nimport { Switch, Text, View } from 'react-native';\nimport { hitColor } from '../constants';\n\ntype SwitcherProps = {\n    disabled?: boolean;\n    label: string;\n    onValueChange: (value: boolean) => void;\n    value: boolean;\n};\n\nexport const Switcher: React.FC<SwitcherProps> = (props) => {\n    return (\n        <View\n            style={{\n                alignItems: 'center',\n                flexDirection: 'row',\n                opacity: props.disabled ? 0.3 : undefined,\n                paddingTop: 12,\n                width: '100%'\n            }}\n        >\n            <Switch\n                disabled={props.disabled}\n                onValueChange={props.onValueChange}\n                style={{ marginRight: 8 }}\n                trackColor={{ true: hitColor, false: 'white' }}\n                value={props.value}\n            />\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 20\n                }}\n            >\n                {props.label}\n            </Text>\n            {props.children}\n        </View>\n    );\n};\n","import React from 'react';\nimport { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../../types';\nimport { Switcher } from '../switcher';\n\ninterface RuleSwitcherProps {\n    casinoRules: CasinoRules;\n    onValueChange: (nextCasinoRules: CasinoRules) => void;\n    ruleName:\n        | CasinoRulesKeys.blackjackPeek\n        | CasinoRulesKeys.dealerHitsSoft17\n        | CasinoRulesKeys.doublingAfterSplit\n        | CasinoRulesKeys.hitSplitAces\n        | CasinoRulesKeys.surrender;\n}\n\nexport const RuleSwitcher: React.FC<RuleSwitcherProps> = (props) => {\n    const disabled =\n        (props.ruleName === CasinoRulesKeys.doublingAfterSplit &&\n            (props.casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\n                props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none)) ||\n        (props.ruleName === CasinoRulesKeys.hitSplitAces &&\n            props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none);\n\n    return (\n        <Switcher\n            disabled={disabled}\n            label={props.ruleName}\n            onValueChange={(newValue) => {\n                props.onValueChange({\n                    ...props.casinoRules,\n                    [props.ruleName]: newValue\n                });\n            }}\n            value={props.casinoRules[props.ruleName]}\n        >\n            {props.children}\n        </Switcher>\n    );\n};\n","import { Picker } from '@react-native-picker/picker';\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { tableColor } from '../../constants';\nimport { CasinoRules, CasinoRulesKeys, SplitsNumber } from '../../types';\n\ninterface SplitsNumberPickerProps {\n    casinoRules: CasinoRules;\n    onValueChange: (nextCasinoRules: CasinoRules) => void;\n}\n\nexport const SplitsNumberPicker: React.FC<SplitsNumberPickerProps> = (props) => {\n    return (\n        <View\n            style={{\n                alignItems: 'center',\n                flexDirection: 'row',\n                paddingTop: 16,\n                width: '100%'\n            }}\n        >\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 20\n                }}\n            >\n                {CasinoRulesKeys.splitsNumber}\n            </Text>\n\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\n                <Picker\n                    selectedValue={String(props.casinoRules[CasinoRulesKeys.splitsNumber])}\n                    style={{\n                        backgroundColor: 'transparent',\n                        color: tableColor,\n                        height: 35,\n                        width: '100%'\n                    }}\n                    onValueChange={(newValue: string) => {\n                        const nextSplitsNumber = parseInt(newValue);\n                        const nextCasinoRules = {\n                            ...props.casinoRules,\n                            [CasinoRulesKeys.doublingAfterSplit]:\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\n                                nextSplitsNumber > 0,\n                            [CasinoRulesKeys.hitSplitAces]:\n                                props.casinoRules[CasinoRulesKeys.hitSplitAces] &&\n                                nextSplitsNumber > 0,\n                            [CasinoRulesKeys.splitsNumber]: nextSplitsNumber\n                        };\n                        props.onValueChange(nextCasinoRules);\n                    }}\n                >\n                    <Picker.Item label=\"None\" value={String(SplitsNumber.none)} />\n                    <Picker.Item label=\"1\" value={String(SplitsNumber.one)} />\n                    <Picker.Item label=\"2\" value={String(SplitsNumber.two)} />\n                    <Picker.Item label=\"3\" value={String(SplitsNumber.three)} />\n                </Picker>\n            </View>\n        </View>\n    );\n};\n","import * as Linking from 'expo-linking';\nimport React, { useState } from 'react';\nimport { ScrollView, Text, View } from 'react-native';\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\nimport { colors } from '../constants';\nimport { allDealerSymbols } from '../logic/dealer-symbols';\nimport { getTrainingHands } from '../logic/training-hand';\nimport {\n    BaseDecisions,\n    CasinoRules,\n    CasinoRulesKeys,\n    Dictionary,\n    Doubling,\n    DynamicDecisions,\n    HandCode,\n    SplitsNumber\n} from '../types';\nimport { getObjectKeys } from '../utils';\n\nconst actionsAbbreviationMap: Dictionary<string, BaseDecisions | DynamicDecisions> = {\n    [BaseDecisions.hit]: 'H',\n    [BaseDecisions.stand]: 'S',\n    [DynamicDecisions.double_hit]: 'Dh',\n    [DynamicDecisions.double_stand]: 'Ds',\n    [DynamicDecisions.split_hit]: 'Ph',\n    [DynamicDecisions.split_stand]: 'Ps',\n    [DynamicDecisions.split_surrender_hit]: 'Pr',\n    [DynamicDecisions.surrender_hit]: 'Rh',\n    [DynamicDecisions.surrender_split_hit]: 'Rp',\n    [DynamicDecisions.surrender_stand]: 'Rs'\n};\n\nconst handCodesAbbreviationMap: Partial<Dictionary<string, HandCode>> = {\n    [HandCode.Split2s]: '2s',\n    [HandCode.Split3s]: '3s',\n    [HandCode.Split4s]: '4s',\n    [HandCode.Split5s]: '5s',\n    [HandCode.Split6s]: '6s',\n    [HandCode.Split7s]: '7s',\n    [HandCode.Split8s]: '8s',\n    [HandCode.Split9s]: '9s',\n    [HandCode.Split10s]: 'Xs',\n    [HandCode.SplitAs]: 'As',\n    [HandCode.Soft13]: 'A2',\n    [HandCode.Soft14]: 'A3',\n    [HandCode.Soft15]: 'A4',\n    [HandCode.Soft16]: 'A5',\n    [HandCode.Soft17]: 'A6',\n    [HandCode.Soft18]: 'A7',\n    [HandCode.Soft19]: 'A8',\n    [HandCode.Soft20]: 'A9'\n};\n\nconst cellWidth = Math.floor((100 * 100) / (allDealerSymbols.length + 1)) / 100;\n\ninterface TextCellProps {\n    backgroundColor?: string;\n}\n\nconst TextCell: React.FC<TextCellProps> = (props) => (\n    <Text\n        style={{\n            backgroundColor: props.backgroundColor,\n            color: 'white',\n            fontSize: 16,\n            marginVertical: 1,\n            paddingVertical: 2,\n            textAlign: 'center',\n            width: `${cellWidth}%`\n        }}\n    >\n        {props.children}\n    </Text>\n);\n\ninterface BasicStrategyTableProps {\n    casinoRules: CasinoRules;\n}\n\nexport const BasicStrategyTable: React.FC<BasicStrategyTableProps> = (props) => {\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\n    const trainingHands = getTrainingHands(casinoRules);\n\n    return (\n        <ScrollView style={{ width: '100%' }}>\n            <Text\n                onPress={() => {\n                    Linking.openURL(\n                        'https://wizardofodds.com/games/blackjack/strategy/calculator/'\n                    );\n                }}\n                style={{\n                    color: 'white',\n                    fontSize: 20,\n                    fontStyle: 'italic',\n                    marginVertical: 16,\n                    paddingHorizontal: 16\n                }}\n            >\n                This basic strategy table is based on the data available at the Wizard of Odds basic\n                strategy calculator\n            </Text>\n\n            <View style={{ paddingHorizontal: 16, marginBottom: 16 }}>\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={setCasinoRules}\n                    ruleName={CasinoRulesKeys.blackjackPeek}\n                />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={setCasinoRules}\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\n                />\n\n                <DoublingPicker casinoRules={casinoRules} onValueChange={setCasinoRules} />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={setCasinoRules}\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\n                />\n\n                <SplitsNumberPicker casinoRules={casinoRules} onValueChange={setCasinoRules} />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={setCasinoRules}\n                    ruleName={CasinoRulesKeys.surrender}\n                />\n            </View>\n\n            <View style={{ flexDirection: 'row', width: '100%' }}>\n                {[''].concat(Object.values(allDealerSymbols)).map((dealerSymbol) => (\n                    <TextCell key={dealerSymbol}>{dealerSymbol}</TextCell>\n                ))}\n            </View>\n\n            {Object.values(HandCode).map((handCode) => {\n                const trainingHand = trainingHands[handCode];\n                return (\n                    <View key={handCode} style={{ flexDirection: 'row', width: '100%' }}>\n                        <TextCell>{handCodesAbbreviationMap[handCode] || handCode}</TextCell>\n                        {getObjectKeys(trainingHand.decisionSet).map((cardSymbol) => (\n                            <TextCell\n                                key={cardSymbol}\n                                backgroundColor={colors[trainingHand.decisionSet[cardSymbol]]}\n                            >\n                                {actionsAbbreviationMap[trainingHand.decisionSet[cardSymbol]]}\n                            </TextCell>\n                        ))}\n                    </View>\n                );\n            })}\n\n            <View style={{ paddingHorizontal: 16, marginVertical: 16 }}>\n                {getObjectKeys(actionsAbbreviationMap).map((action) => (\n                    <Text\n                        key={action}\n                        style={{\n                            backgroundColor: colors[action],\n                            color: 'white',\n                            fontSize: 20,\n                            paddingHorizontal: 8,\n                            paddingVertical: 4,\n                            marginBottom: 4\n                        }}\n                    >\n                        {actionsAbbreviationMap[action]} = {action}\n                    </Text>\n                ))}\n            </View>\n        </ScrollView>\n    );\n};\n","import { Audio } from 'expo-av';\nimport { playSound } from '../utils';\n\ntype SoundQueue = { isActive: boolean; sounds: Audio.Sound[] };\n\nexport const createSoundQueue = (): SoundQueue => ({\n    isActive: false,\n    sounds: []\n});\n\nconst playNextSound = (soundQueue: SoundQueue) => {\n    const nextSound = soundQueue.sounds.pop();\n    if (nextSound) {\n        playSound(nextSound).then(() => {\n            setTimeout(() => playNextSound(soundQueue), 250);\n        });\n    } else {\n        soundQueue.isActive = false;\n    }\n};\n\nexport const pushSound = (soundQueue: SoundQueue, sound: Audio.Sound) => {\n    soundQueue.sounds.push(sound);\n    if (!soundQueue.isActive) {\n        soundQueue.isActive = true;\n        playNextSound(soundQueue);\n    }\n};\n","import { Audio } from 'expo-av';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\nimport cardSlideSoundMp3 from '../../assets/card-slide.mp3';\nimport { nonRandomColor } from '../constants';\nimport { createSoundQueue, pushSound } from '../logic/sound-queue';\nimport { AppNavigation, Card, RouteNames, SimpleCardSymbol } from '../types';\n\ninterface CardComponentProps {\n    card: Card;\n    isSoundEnabled: boolean;\n    navigation?: AppNavigation;\n    skipAnimation?: boolean;\n}\n\nconst animationsDuration = 400;\nconst initialOpacity = 0;\nconst initialPosition = -20;\n\nconst soundQueue = createSoundQueue();\n\nexport const CardComponent: React.FC<CardComponentProps> = (props) => {\n    const opacity = useMemo(() => new Animated.Value(initialOpacity), []);\n    const position = useMemo(() => new Animated.Value(initialPosition), []);\n    const [cardSlideSound, setCardSlideSound] = useState<Audio.Sound | false>();\n\n    const animateCard = (sound?: Audio.Sound | false) => {\n        if (!props.skipAnimation) {\n            Animated.parallel([\n                Animated.timing(opacity, {\n                    useNativeDriver: true,\n                    toValue: 1,\n                    duration: animationsDuration * 2\n                }),\n                Animated.timing(position, {\n                    useNativeDriver: true,\n                    toValue: 0,\n                    duration: animationsDuration\n                })\n            ]).start();\n        }\n\n        if (props.isSoundEnabled && sound) {\n            pushSound(soundQueue, sound);\n        }\n    };\n\n    useEffect(() => {\n        if (cardSlideSound === undefined) {\n            Audio.Sound.createAsync(cardSlideSoundMp3, { volume: 0.5 })\n                .then((result) => {\n                    animateCard(result.sound);\n                    setCardSlideSound(result.sound);\n                })\n                .catch(() => {\n                    /* Failing to load audio is not a critical issue */\n                    animateCard();\n                    setCardSlideSound(false);\n                });\n        } else {\n            if (!props.skipAnimation) {\n                opacity.setValue(initialOpacity);\n                position.setValue(initialPosition);\n            }\n\n            animateCard(cardSlideSound);\n        }\n    }, [props.card]);\n\n    const cardColor = props.card.isRandom\n        ? props.card.suit === '♦' || props.card.suit === '♥'\n            ? 'red'\n            : 'black'\n        : nonRandomColor;\n\n    const backgroundColor = props.card.isHoleCard ? 'lightgrey' : 'white';\n\n    return (\n        <Animated.View\n            style={{\n                backgroundColor,\n                borderRadius: 8,\n                height: 66,\n                marginBottom: 8,\n                marginRight: 8,\n                opacity: props.skipAnimation ? undefined : opacity,\n                transform: props.skipAnimation ? undefined : [{ translateY: position }],\n                width: 56\n            }}\n        >\n            {!props.card.isHoleCard && (\n                <TouchableOpacity\n                    onPress={\n                        props.navigation && !props.card.isRandom\n                            ? () => {\n                                  props.navigation!.navigate(RouteNames.untrainedPairsPriority);\n                              }\n                            : undefined\n                    }\n                >\n                    {props.card.isRandom ? (\n                        <Text\n                            style={{\n                                color: cardColor,\n                                fontSize: 16,\n                                position: 'absolute',\n                                right: 4,\n                                top: 4\n                            }}\n                        >\n                            {props.card.suit}\n                        </Text>\n                    ) : (\n                        <View\n                            style={{\n                                backgroundColor: cardColor,\n                                height: 12,\n                                position: 'absolute',\n                                right: 8,\n                                top: 8,\n                                width: 12\n                            }}\n                        />\n                    )}\n                    <Text\n                        style={{\n                            color: cardColor,\n                            fontSize: 40,\n                            marginRight: props.card.symbol === SimpleCardSymbol.Ten ? 0 : 8,\n                            marginTop: 12,\n                            textAlign: 'center'\n                        }}\n                    >\n                        {props.card.symbol}\n                    </Text>\n                </TouchableOpacity>\n            )}\n        </Animated.View>\n    );\n};\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { getHandValidValues, isBlackjack } from '../logic/hand';\nimport { AppNavigation, Hand } from '../types';\nimport { CardComponent } from './card-component';\n\ninterface HandComponentProps {\n    hand: Hand;\n    handsNumber: number;\n    isCurrentHand: boolean;\n    isSoundEnabled: boolean;\n    navigation?: AppNavigation;\n    peeking?: boolean;\n    skipAnimation?: boolean;\n}\n\nexport const HandComponent: React.FC<HandComponentProps> = (props) => {\n    const handValues = getHandValidValues(props.hand).join('/');\n    const displayValues = isBlackjack(props.hand, props.handsNumber)\n        ? 'Blackjack'\n        : handValues.indexOf('21') > -1\n        ? '21'\n        : handValues;\n\n    return (\n        <View\n            style={{\n                backgroundColor: props.isCurrentHand ? 'rgba(255, 255, 255, 0.2)' : undefined,\n                flexDirection: 'row',\n                flexWrap: 'wrap',\n                justifyContent: 'center',\n                maxWidth: '100%',\n                paddingTop: 8,\n                paddingHorizontal: 8\n            }}\n        >\n            {props.hand.cards.map((card, index) => (\n                <CardComponent\n                    card={card}\n                    isSoundEnabled={props.isSoundEnabled}\n                    key={index}\n                    navigation={props.navigation}\n                    skipAnimation={props.skipAnimation}\n                />\n            ))}\n            <View style={{ alignItems: 'center', justifyContent: 'center', marginBottom: 8 }}>\n                {props.peeking ? (\n                    <Text style={{ color: 'black', fontSize: 32 }}>👁️</Text>\n                ) : (\n                    <React.Fragment>\n                        <Text style={{ color: 'white', fontSize: 25 }}> {displayValues}</Text>\n                        {props.hand.outcome && (\n                            <Text style={{ color: 'white', fontSize: 25, fontWeight: 'bold' }}>\n                                {props.hand.outcome}\n                            </Text>\n                        )}\n                    </React.Fragment>\n                )}\n            </View>\n        </View>\n    );\n};\n","import React from 'react';\nimport { ScrollView, Text } from 'react-native';\nimport { HandComponent } from '../components/hand-component';\nimport { createCard } from '../logic/card';\nimport { CardSuit, SimpleCardSymbol } from '../types';\n\nexport const BlackjackPeek: React.FC = () => {\n    return (\n        <React.Fragment>\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 24,\n                    fontWeight: 'bold',\n                    paddingTop: 16,\n                    textAlign: 'center'\n                }}\n            >\n                Blackjack Peek\n            </Text>\n            <ScrollView\n                style={{\n                    margin: 16\n                }}\n            >\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\n                    In Hole card games the dealer's hand immediately receives its second card face\n                    down (the hole card) after receiving its first card face up.\n                </Text>\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Eight, CardSuit.clubs),\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds, true)\n                        ],\n                        values: [8]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 16 }}>\n                    When Blackjack Peek is enabled and the dealer's hand could be a blackjack (e.g.\n                    the first card is an ace or a ten value card), the dealer peeks at the hole\n                    card.\n                </Text>\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds, true)\n                        ],\n                        values: [1, 11]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    peeking={true}\n                    skipAnimation={true}\n                />\n\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 16 }}>\n                    If the hole card makes the dealer's hand a blackjack, the dealer reveals the\n                    hole card winning over all players' non blackjack hands.\n                </Text>\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\n                            createCard(SimpleCardSymbol.Ten, CardSuit.diamonds)\n                        ],\n                        values: [11, 21]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n            </ScrollView>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { View } from 'react-native';\n\nexport const Divider: React.FC = () => (\n    <View\n        style={{\n            backgroundColor: 'white',\n            height: 2,\n            width: '100%'\n        }}\n    />\n);\n","import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport { tableColor } from '../constants';\n\ninterface HelpIconProps {\n    onPress: () => void;\n}\n\nexport const HelpIcon: React.FC<HelpIconProps> = (props) => {\n    return (\n        <TouchableOpacity onPress={props.onPress}>\n            <Text\n                style={{\n                    backgroundColor: 'white',\n                    borderRadius: 16,\n                    color: tableColor,\n                    fontSize: 18,\n                    fontWeight: 'bold',\n                    marginLeft: 8,\n                    marginTop: 2,\n                    paddingHorizontal: 8\n                }}\n            >\n                ?\n            </Text>\n        </TouchableOpacity>\n    );\n};\n","import React, { useState } from 'react';\nimport { Alert, Platform, ScrollView, Text, TouchableOpacity, View } from 'react-native';\nimport { Button } from '../components/button';\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\nimport { Divider } from '../components/divider';\nimport { HelpIcon } from '../components/help-icon';\nimport { OnBoardingSection } from '../components/onboarding-section';\nimport { Switcher } from '../components/switcher';\nimport {\n    dangerColor,\n    doubleColor,\n    hitColor,\n    splitColor,\n    standColor,\n    warningColor\n} from '../constants';\nimport { getTrainingHands } from '../logic/training-hand';\nimport { getIsProgressBlocked } from '../logic/training-status';\nimport {\n    AppNavigation,\n    CasinoRules,\n    CasinoRulesKeys,\n    Dictionary,\n    GameConfig,\n    HandCode,\n    OnBoardingSections,\n    Phases,\n    RouteNames,\n    SelectedHands,\n    TrainingHands,\n    TrainingStatus\n} from '../types';\nimport { getObjectKeys } from '../utils';\n\ntype ConfigMenuProps = {\n    gameConfig: GameConfig;\n    navigation: AppNavigation;\n    onBoardingStep: number;\n    phase: Phases;\n    resetTrainingStatus: () => void;\n    setGameConfig: (gameConfig: GameConfig) => void;\n    trainingHands: TrainingHands;\n    trainingStatus: TrainingStatus;\n};\n\nexport const ConfigMenu: React.FC<ConfigMenuProps> = (props) => {\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\n    const [isDealerAnimationEnabled, setIsDealerAnimationEnabled] = useState(\n        props.gameConfig.isDealerAnimationEnabled\n    );\n    const [isProgressBlocked, setIsProgressBlocked] = useState(\n        props.trainingStatus.isProgressBlocked\n    );\n    const [isSoundEnabled, setIsSoundEnabled] = useState(props.gameConfig.isSoundEnabled);\n    const [selectedHands, setSelectedHands] = useState(props.gameConfig.selectedHands);\n    const [selectedHandsOnly, setSelectedHandsOnly] = useState(props.gameConfig.selectedHandsOnly);\n    const [trainingHands, setTrainingHands] = useState(props.trainingHands);\n    const [untrainedPairsPriority, setUntrainedPairsPriority] = useState(\n        props.gameConfig.untrainedPairsPriority\n    );\n\n    const isSomeHandSelected = (_selectedHandsOnly: boolean, _selectedHands: SelectedHands) =>\n        !_selectedHandsOnly || Object.values(_selectedHands).some((x) => x);\n\n    const isProgressBlockedHandler = (options: {\n        nextSelectedHands?: SelectedHands;\n        nextSelectedHandsOnly?: boolean;\n        nextTrainingHands?: TrainingHands;\n    }) => {\n        const _selectedHandsOnly =\n            options.nextSelectedHandsOnly !== undefined\n                ? options.nextSelectedHandsOnly\n                : selectedHandsOnly;\n        const _selectedHands = options.nextSelectedHands || selectedHands;\n\n        setIsProgressBlocked(\n            isSomeHandSelected(_selectedHandsOnly, _selectedHands) &&\n                getIsProgressBlocked(\n                    props.trainingStatus,\n                    options.nextTrainingHands || trainingHands,\n                    _selectedHandsOnly,\n                    _selectedHands\n                )\n        );\n    };\n\n    const casinoRuleChangeHandler = (nextCasinoRules: CasinoRules) => {\n        setCasinoRules(nextCasinoRules);\n        const nextTrainingHands = getTrainingHands(nextCasinoRules);\n        setTrainingHands(nextTrainingHands);\n    };\n\n    const saveHandler = () => {\n        props.setGameConfig({\n            casinoRules,\n            isDealerAnimationEnabled,\n            isSoundEnabled,\n            selectedHands,\n            selectedHandsOnly,\n            untrainedPairsPriority\n        });\n        props.navigation.navigate(RouteNames.table);\n    };\n\n    const isSaveButtonEnabled =\n        isSomeHandSelected(selectedHandsOnly, selectedHands) &&\n        (props.gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\n            casinoRules[CasinoRulesKeys.blackjackPeek] ||\n            props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17] !==\n                casinoRules[CasinoRulesKeys.dealerHitsSoft17] ||\n            props.gameConfig.casinoRules[CasinoRulesKeys.doublingAfterSplit] !==\n                casinoRules[CasinoRulesKeys.doublingAfterSplit] ||\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubling] !==\n                casinoRules[CasinoRulesKeys.doubling] ||\n            props.gameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\n                casinoRules[CasinoRulesKeys.hitSplitAces] ||\n            props.gameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\n                casinoRules[CasinoRulesKeys.splitsNumber] ||\n            props.gameConfig.casinoRules[CasinoRulesKeys.surrender] !==\n                casinoRules[CasinoRulesKeys.surrender] ||\n            props.gameConfig.isDealerAnimationEnabled !== isDealerAnimationEnabled ||\n            props.gameConfig.isSoundEnabled !== isSoundEnabled ||\n            getObjectKeys(props.gameConfig.selectedHands).some(\n                (key) => props.gameConfig.selectedHands[key] !== selectedHands[key]\n            ) ||\n            props.gameConfig.selectedHandsOnly !== selectedHandsOnly ||\n            props.gameConfig.untrainedPairsPriority !== untrainedPairsPriority);\n\n    return (\n        <ScrollView\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\n            style={{\n                flexGrow: 1,\n                width: '100%'\n            }}\n        >\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.basicStrategyTable}\n                onBoardingStep={props.onBoardingStep}\n                style={{\n                    alignItems: 'center',\n                    paddingBottom: 8,\n                    paddingHorizontal: 16,\n                    paddingVertical: 16\n                }}\n            >\n                <Button\n                    height={56}\n                    backgroundColor={splitColor}\n                    isEnabled={props.onBoardingStep === -1}\n                    onPress={() => {\n                        props.navigation.navigate(RouteNames.basicStrategyTable);\n                    }}\n                    text=\"Basic strategy table\"\n                    width=\"100%\"\n                />\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                onBoardingStep={props.onBoardingStep}\n                style={{\n                    alignItems: 'center',\n                    paddingHorizontal: 16\n                }}\n            >\n                {isProgressBlocked && (\n                    <Text\n                        style={{\n                            color: warningColor,\n                            fontSize: 20,\n                            fontStyle: 'italic',\n                            paddingTop: 16\n                        }}\n                    >\n                        ⚠️ Selected hands are blocking progress. Modify the selection or disable\n                        Selected hands to complete your training\n                    </Text>\n                )}\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.casinoRules}\n                onBoardingStep={props.onBoardingStep}\n                style={{ padding: 16 }}\n            >\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 20,\n                        fontWeight: 'bold',\n                        marginBottom: 8,\n                        width: '100%'\n                    }}\n                >\n                    Casino rules\n                </Text>\n                <Divider />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={casinoRuleChangeHandler}\n                    ruleName={CasinoRulesKeys.blackjackPeek}\n                >\n                    <HelpIcon\n                        onPress={() => {\n                            props.navigation.navigate(RouteNames.blackjackPeek);\n                        }}\n                    />\n                </RuleSwitcher>\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={casinoRuleChangeHandler}\n                    ruleName={CasinoRulesKeys.dealerHitsSoft17}\n                />\n\n                <DoublingPicker casinoRules={casinoRules} onValueChange={casinoRuleChangeHandler} />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={casinoRuleChangeHandler}\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\n                />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={casinoRuleChangeHandler}\n                    ruleName={CasinoRulesKeys.hitSplitAces}\n                >\n                    <HelpIcon\n                        onPress={() => {\n                            props.navigation.navigate(RouteNames.hitSplitAces);\n                        }}\n                    />\n                </RuleSwitcher>\n\n                <SplitsNumberPicker\n                    casinoRules={casinoRules}\n                    onValueChange={casinoRuleChangeHandler}\n                />\n\n                <RuleSwitcher\n                    casinoRules={casinoRules}\n                    onValueChange={casinoRuleChangeHandler}\n                    ruleName={CasinoRulesKeys.surrender}\n                />\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.appSettings}\n                onBoardingStep={props.onBoardingStep}\n                style={{ padding: 16 }}\n            >\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 20,\n                        fontWeight: 'bold',\n                        marginBottom: 8,\n                        width: '100%'\n                    }}\n                >\n                    App settings\n                </Text>\n                <Divider />\n\n                <Switcher\n                    label=\"Dealer cards animation\"\n                    onValueChange={setIsDealerAnimationEnabled}\n                    value={isDealerAnimationEnabled}\n                />\n\n                <Switcher\n                    disabled={props.trainingStatus.isCompleted}\n                    label=\"Untrained pairs priority\"\n                    onValueChange={setUntrainedPairsPriority}\n                    value={!props.trainingStatus.isCompleted && untrainedPairsPriority}\n                >\n                    <HelpIcon\n                        onPress={() => {\n                            props.navigation.navigate(RouteNames.untrainedPairsPriority);\n                        }}\n                    />\n                </Switcher>\n\n                <Switcher\n                    label=\"Selected hands only\"\n                    onValueChange={(value) => {\n                        setSelectedHandsOnly(value);\n                        isProgressBlockedHandler({\n                            nextSelectedHandsOnly: value\n                        });\n                    }}\n                    value={selectedHandsOnly}\n                />\n\n                {selectedHandsOnly && (\n                    <View\n                        style={{\n                            borderLeftColor: 'white',\n                            borderLeftWidth: 2,\n                            flexDirection: 'row',\n                            flexWrap: 'wrap',\n                            marginLeft: 16,\n                            marginTop: 16\n                        }}\n                    >\n                        <TouchableOpacity\n                            onPress={() => {\n                                const nextSelectedHands = Object.values(HandCode).reduce(\n                                    (hands, handCode) => ({ ...hands, [handCode]: true }),\n                                    {}\n                                ) as Dictionary<boolean, HandCode>;\n                                setSelectedHands(nextSelectedHands);\n                                isProgressBlockedHandler({\n                                    nextSelectedHands\n                                });\n                            }}\n                            style={{\n                                alignItems: 'center',\n                                backgroundColor: doubleColor,\n                                marginBottom: 8,\n                                marginLeft: '2%',\n                                paddingVertical: 4,\n                                width: '48%'\n                            }}\n                        >\n                            <Text\n                                style={{\n                                    color: 'white',\n                                    fontSize: 20\n                                }}\n                            >\n                                Select all\n                            </Text>\n                        </TouchableOpacity>\n\n                        <TouchableOpacity\n                            onPress={() => {\n                                const nextSelectedHands = Object.values(HandCode).reduce(\n                                    (hands, handCode) => ({ ...hands, [handCode]: false }),\n                                    {}\n                                ) as Dictionary<boolean, HandCode>;\n                                setSelectedHands(nextSelectedHands);\n                                isProgressBlockedHandler({\n                                    nextSelectedHands\n                                });\n                            }}\n                            style={{\n                                alignItems: 'center',\n                                backgroundColor: doubleColor,\n                                marginBottom: 8,\n                                marginLeft: '2%',\n                                paddingVertical: 4,\n                                width: '48%'\n                            }}\n                        >\n                            <Text\n                                style={{\n                                    color: 'white',\n                                    fontSize: 20\n                                }}\n                            >\n                                Unselect all\n                            </Text>\n                        </TouchableOpacity>\n\n                        {Object.values(trainingHands).map((trainingHand) => (\n                            <TouchableOpacity\n                                key={trainingHand.name}\n                                onPress={() => {\n                                    const nextSelectedHands = {\n                                        ...selectedHands,\n                                        [trainingHand.code]: !selectedHands[trainingHand.code]\n                                    };\n                                    setSelectedHands(nextSelectedHands);\n                                    isProgressBlockedHandler({\n                                        nextSelectedHands\n                                    });\n                                }}\n                                style={{\n                                    alignItems: 'center',\n                                    backgroundColor: selectedHands[trainingHand.code]\n                                        ? standColor\n                                        : undefined,\n                                    paddingVertical: 4,\n                                    width: '33.33%'\n                                }}\n                            >\n                                <Text\n                                    style={{\n                                        color: 'white',\n                                        fontSize: 20\n                                    }}\n                                >\n                                    {trainingHand.name}\n                                </Text>\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n                )}\n\n                <Switcher\n                    label=\"Sound effects 🔊\"\n                    onValueChange={setIsSoundEnabled}\n                    value={isSoundEnabled}\n                />\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                onBoardingStep={props.onBoardingStep}\n                style={{\n                    alignItems: 'center',\n                    paddingHorizontal: 16,\n                    paddingTop: 24\n                }}\n            >\n                {!isSomeHandSelected(selectedHandsOnly, selectedHands) && (\n                    <Text\n                        style={{\n                            color: warningColor,\n                            fontSize: 20,\n                            fontStyle: 'italic',\n                            paddingBottom: 16\n                        }}\n                    >\n                        Some hand must be selected to save the changes\n                    </Text>\n                )}\n\n                <Button\n                    height={56}\n                    backgroundColor={hitColor}\n                    isEnabled={isSaveButtonEnabled}\n                    marginBottom={40}\n                    onPress={saveHandler}\n                    text=\"Save\"\n                    width=\"100%\"\n                />\n\n                <Divider />\n\n                <Button\n                    height={56}\n                    backgroundColor={doubleColor}\n                    isEnabled={props.phase === Phases.finished}\n                    marginTop={40}\n                    onPress={() => {\n                        props.navigation.navigate(RouteNames.onboarding);\n                    }}\n                    text=\"Onboarding\"\n                    width=\"100%\"\n                />\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.resetTraining}\n                onBoardingStep={props.onBoardingStep}\n                style={{\n                    alignItems: 'center',\n                    paddingBottom: 16,\n                    paddingHorizontal: 16\n                }}\n            >\n                <Button\n                    height={56}\n                    backgroundColor={dangerColor}\n                    isEnabled={props.onBoardingStep === -1}\n                    marginTop={8}\n                    onPress={() => {\n                        const title = 'Reset training';\n                        const body =\n                            'Resetting the training will mark all hands as untrained, ' +\n                            'setting the progress and precision indicators to 0%, ' +\n                            'and set the player earnings to 0$ as well. ' +\n                            'Are you sure you want to reset the training?';\n\n                        if (Platform.OS === 'web') {\n                            const response = window.confirm(body);\n                            if (response) {\n                                props.resetTrainingStatus();\n                            }\n                        } else {\n                            Alert.alert(title, body, [\n                                {\n                                    text: 'Cancel',\n                                    style: 'cancel'\n                                },\n                                {\n                                    text: 'Reset',\n                                    onPress: props.resetTrainingStatus\n                                }\n                            ]);\n                        }\n                    }}\n                    text=\"Reset training\"\n                    width=\"100%\"\n                />\n            </OnBoardingSection>\n        </ScrollView>\n    );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Dimensions, View } from 'react-native';\nimport { LineChart } from 'react-native-chart-kit';\nimport { Button } from '../components/button';\nimport { colors, tableColor } from '../constants';\nimport { BaseDecisions, Player } from '../types';\nimport { getAbsoluteMax, getPrimeFactors } from '../utils';\n\ntype ChartDimensions = {\n    boundaries: number;\n    scale: number;\n    width: number;\n};\n\ntype ChartPage = {\n    index: number;\n    data: number[];\n};\n\ninterface EarningsChartProps {\n    earningsHistorical: Player['earningsHistorical'];\n}\n\nconst chartDeadSpace = 16;\nconst pageSize = 20;\nconst screenHorizontalMargin = 8;\n\nconst getChartDimensions = (data: number[]): ChartDimensions => {\n    const absoluteMax = getAbsoluteMax(data);\n    const primeFactors = data.length > 0 ? getPrimeFactors(absoluteMax) : [2];\n    const scale = 2 * Math.min(primeFactors[0], 6);\n    const windowWidth = Dimensions.get('window').width;\n\n    return {\n        boundaries: absoluteMax,\n        scale,\n        width: windowWidth - screenHorizontalMargin * 2\n    };\n};\n\nconst getCurrentPage = (data: number[], nextIndex: number | undefined): ChartPage => {\n    nextIndex = nextIndex === undefined ? (data.length > 0 ? data.length - 1 : 0) : nextIndex;\n    const nextData = data.slice(\n        Math.max(0, nextIndex - pageSize),\n        Math.min(Math.max(0, nextIndex + 1), data.length)\n    );\n\n    return {\n        data: nextData,\n        index: nextIndex\n    };\n};\n\nconst getFormattedData = (data: number[], dimensions: ChartDimensions) => {\n    const boundaryDots =\n        data.length > 0\n            ? [data[data.length - 1], dimensions.boundaries, -dimensions.boundaries]\n            : [];\n\n    const dotWidth = data.length > 0 ? dimensions.width / data.length : dimensions.width;\n    const boundaryDotsWidth = dotWidth * boundaryDots.length;\n\n    return {\n        chartWidth: dimensions.width + boundaryDotsWidth + chartDeadSpace,\n        source: data.length > 0 ? data.concat(boundaryDots) : [0]\n    };\n};\n\nexport const EarningsChart: React.FC<EarningsChartProps> = (props) => {\n    const dimensions = useMemo(() => getChartDimensions(props.earningsHistorical), [\n        props.earningsHistorical\n    ]);\n    const [page, setPage] = useState(() => getCurrentPage(props.earningsHistorical, undefined));\n    const formattedData = useMemo(() => getFormattedData(page.data, dimensions), [\n        dimensions,\n        page\n    ]);\n\n    return (\n        <View\n            style={{\n                flexGrow: 1,\n                justifyContent: 'center',\n                marginHorizontal: screenHorizontalMargin,\n                overflow: 'hidden'\n            }}\n        >\n            <LineChart\n                chartConfig={{\n                    backgroundGradientFrom: tableColor,\n                    backgroundGradientTo: tableColor,\n                    color: () => `rgb(255, 255, 255)`,\n                    decimalPlaces: 1,\n                    linejoinType: 'bevel',\n                    propsForLabels: {\n                        fontSize: 16\n                    }\n                }}\n                data={{\n                    datasets: [\n                        {\n                            data: formattedData.source\n                        }\n                    ],\n                    labels: []\n                }}\n                height={300}\n                segments={dimensions.scale}\n                style={{ marginLeft: -chartDeadSpace }}\n                width={formattedData.chartWidth}\n                withVerticalLines={false}\n            />\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\n                <Button\n                    height={56}\n                    backgroundColor={colors[BaseDecisions.hit]}\n                    isEnabled={page.index >= pageSize}\n                    onPress={() => {\n                        if (page.index >= pageSize) {\n                            setPage(\n                                getCurrentPage(props.earningsHistorical, page.index - pageSize)\n                            );\n                        }\n                    }}\n                    text=\"Previous\"\n                    width=\"50%\"\n                />\n                <Button\n                    height={56}\n                    backgroundColor={colors[BaseDecisions.stand]}\n                    isEnabled={page.index < props.earningsHistorical.length - 1}\n                    onPress={() => {\n                        if (page.index < props.earningsHistorical.length - 1) {\n                            setPage(\n                                getCurrentPage(props.earningsHistorical, page.index + pageSize)\n                            );\n                        }\n                    }}\n                    text=\"Next\"\n                    width=\"50%\"\n                />\n            </View>\n        </View>\n    );\n};\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { colors } from '../constants';\nimport { HandDecisionSet } from '../types';\nimport { getObjectKeys } from '../utils';\n\ninterface HandDecisionsTableProps {\n    handDecisionSet: HandDecisionSet;\n}\n\nexport const HandDecisionsTable: React.FC<HandDecisionsTableProps> = (props) => (\n    <View style={{ width: '100%' }}>\n        {getObjectKeys(props.handDecisionSet).map((simpleCardSymbol) => {\n            return (\n                <View key={simpleCardSymbol} style={{ flexDirection: 'row', width: '100%' }}>\n                    <Text\n                        style={{\n                            color: 'white',\n                            fontSize: 20,\n                            fontWeight: 'bold',\n                            paddingTop: 12,\n                            textAlign: 'center',\n                            width: '15%'\n                        }}\n                    >\n                        {simpleCardSymbol}\n                    </Text>\n                    <Text\n                        style={{\n                            backgroundColor: colors[props.handDecisionSet[simpleCardSymbol]],\n                            color: 'white',\n                            fontSize: 20,\n                            fontWeight: 'bold',\n                            marginTop: 8,\n                            paddingVertical: 4,\n                            paddingHorizontal: 8,\n                            textAlign: 'center',\n                            width: '85%'\n                        }}\n                    >\n                        {props.handDecisionSet[simpleCardSymbol]}\n                    </Text>\n                </View>\n            );\n        })}\n    </View>\n);\n","import React, { useState } from 'react';\nimport { ScrollView, Text, View } from 'react-native';\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\nimport { getHandRangesNumber, handDecisionSetGetters } from '../logic/hand-decision-set';\nimport { AppRoute, CasinoRules, CasinoRulesKeys, RouteNames } from '../types';\n\ntype HandDecisionsProps = {\n    casinoRules: CasinoRules;\n    route: AppRoute<RouteNames.handDecisions>;\n};\n\nexport const HandDecisions: React.FC<HandDecisionsProps> = (props) => {\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\n\n    const trainingHand = props.route.params['trainingHand'];\n    const handDecisionSet = handDecisionSetGetters[trainingHand.code](casinoRules);\n\n    return (\n        <ScrollView\n            style={{\n                flex: 1,\n                paddingHorizontal: 16,\n                marginVertical: 16,\n                width: '100%'\n            }}\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\n        >\n            <View\n                style={{\n                    alignItems: 'center',\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                    paddingBottom: 16,\n                    width: '100%'\n                }}\n            >\n                <Text style={{ color: 'white', fontSize: 24 }}>{trainingHand.name} decisions</Text>\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 20\n                    }}\n                >\n                    Ranges: {getHandRangesNumber(handDecisionSet)}\n                </Text>\n            </View>\n\n            <HandDecisionsTable handDecisionSet={handDecisionSet} />\n\n            {trainingHand.dependencies.map((dependency) => {\n                return dependency === CasinoRulesKeys.doubling ? (\n                    <DoublingPicker\n                        casinoRules={casinoRules}\n                        key={dependency}\n                        onValueChange={setCasinoRules}\n                    />\n                ) : dependency === CasinoRulesKeys.splitsNumber ? (\n                    <SplitsNumberPicker\n                        casinoRules={casinoRules}\n                        key={dependency}\n                        onValueChange={setCasinoRules}\n                    />\n                ) : (\n                    <RuleSwitcher\n                        casinoRules={casinoRules}\n                        key={dependency}\n                        onValueChange={setCasinoRules}\n                        ruleName={dependency}\n                    />\n                );\n            })}\n        </ScrollView>\n    );\n};\n","import React from 'react';\nimport { ScrollView, Text } from 'react-native';\nimport { HandComponent } from '../components/hand-component';\nimport { createCard } from '../logic/card';\nimport { CardSuit, SimpleCardSymbol, SpecialCardSymbol } from '../types';\n\nexport const HitSplitAces: React.FC = () => {\n    return (\n        <React.Fragment>\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 24,\n                    fontWeight: 'bold',\n                    paddingTop: 16,\n                    textAlign: 'center'\n                }}\n            >\n                Hit split aces\n            </Text>\n            <ScrollView\n                style={{\n                    margin: 16\n                }}\n            >\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\n                    Hitting split aces is usually not allowed. On this scenario, one single card\n                    will be dealt to each hand after splitting the aces and player's turn will be\n                    terminated.\n                </Text>\n\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\n                    If another ace is dealt to any of the hands and re-splitting aces is allowed,\n                    the player can decide to split aces again or to stand.\n                </Text>\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\n                            createCard(SimpleCardSymbol.Ace, CardSuit.diamonds)\n                        ],\n                        values: [2, 12]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={true}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [createCard(SimpleCardSymbol.Ace, CardSuit.hearts)],\n                        values: [1, 11]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n\n                <Text\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\n                >\n                    Note that an ace and ten value card after a split are counted as a non-blackjack\n                    21:\n                </Text>\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Ace, CardSuit.clubs),\n                            createCard(SimpleCardSymbol.Ten, CardSuit.spades)\n                        ],\n                        values: [21]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Ace, CardSuit.hearts),\n                            createCard(SpecialCardSymbol.King, CardSuit.diamonds)\n                        ],\n                        values: [21]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n            </ScrollView>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { ScrollView, StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\nimport { Divider } from '../components/divider';\nimport { OnBoardingSection } from '../components/onboarding-section';\nimport { doubleColor } from '../constants';\nimport { getSpecificTrainingPair } from '../logic/training-pair';\nimport {\n    AppNavigation,\n    GameConfig,\n    Hand,\n    OnBoardingSections,\n    Phases,\n    RouteNames,\n    TrainingHands,\n    TrainingPairRepresentation\n} from '../types';\n\ntype MissedPairsProps = {\n    gameConfig: GameConfig;\n    missedTrainingPairs: TrainingPairRepresentation[];\n    navigation: AppNavigation;\n    onBoardingStep: number;\n    phase: Phases;\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\n    trainingHands: TrainingHands;\n};\n\nconst textProperties: StyleProp<TextStyle> = {\n    color: 'white',\n    fontSize: 20\n};\n\nconst boldTextProperties: StyleProp<TextStyle> = {\n    ...textProperties,\n    fontWeight: 'bold'\n};\n\nexport const MissedPairs: React.FC<MissedPairsProps> = (props) => {\n    return (\n        <OnBoardingSection\n            isHighlighted={OnBoardingSections.missedPairs}\n            onBoardingStep={props.onBoardingStep}\n            style={{ alignItems: undefined, flex: 1 }}\n        >\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 24,\n                    fontWeight: 'bold',\n                    paddingTop: 16,\n                    textAlign: 'center'\n                }}\n            >\n                Missed pairs\n            </Text>\n            <ScrollView\n                style={{\n                    margin: 16\n                }}\n                contentContainerStyle={{ flexGrow: 1 }}\n            >\n                {props.missedTrainingPairs.length === 0 ? (\n                    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>\n                        <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\n                            No missed pairs so far. Nice job!\n                        </Text>\n                    </View>\n                ) : (\n                    Object.values(props.missedTrainingPairs).map((missedTrainingPair) => {\n                        const handName = props.trainingHands[missedTrainingPair.handCode].name;\n\n                        return (\n                            <View\n                                key={\n                                    missedTrainingPair.handCode +\n                                    '-' +\n                                    missedTrainingPair.dealerSymbol\n                                }\n                                style={{ marginBottom: 16, width: '100%' }}\n                            >\n                                <View\n                                    style={{\n                                        alignItems: 'center',\n                                        flexDirection: 'row',\n                                        justifyContent: 'space-between'\n                                    }}\n                                >\n                                    <View\n                                        style={{\n                                            flexDirection: 'row',\n                                            marginBottom: 16\n                                        }}\n                                    >\n                                        <Text style={boldTextProperties}>{handName}</Text>\n                                        <Text style={textProperties}> vs </Text>\n                                        <Text style={boldTextProperties}>\n                                            {missedTrainingPair.dealerSymbol}\n                                        </Text>\n                                    </View>\n                                    <View\n                                        style={{\n                                            opacity:\n                                                props.phase === Phases.finished ? undefined : 0.3\n                                        }}\n                                    >\n                                        <TouchableOpacity\n                                            onPress={\n                                                props.onBoardingStep > -1 ||\n                                                props.phase !== Phases.finished\n                                                    ? undefined\n                                                    : () => {\n                                                          const trainingPair = getSpecificTrainingPair(\n                                                              missedTrainingPair.handCode,\n                                                              missedTrainingPair.dealerSymbol,\n                                                              props.gameConfig.casinoRules\n                                                          );\n                                                          props.startTrainingRound(\n                                                              trainingPair.player,\n                                                              trainingPair.dealer\n                                                          );\n                                                          props.navigation.navigate(\n                                                              RouteNames.table\n                                                          );\n                                                      }\n                                            }\n                                        >\n                                            <Text\n                                                style={{\n                                                    backgroundColor: doubleColor,\n                                                    borderRadius: 16,\n                                                    color: 'white',\n                                                    fontSize: 20,\n                                                    marginBottom: 16,\n                                                    paddingHorizontal: 16,\n                                                    paddingVertical: 4,\n                                                    textAlign: 'center'\n                                                }}\n                                            >\n                                                Train ➡️\n                                            </Text>\n                                        </TouchableOpacity>\n                                    </View>\n                                </View>\n                                <Divider />\n                            </View>\n                        );\n                    })\n                )}\n            </ScrollView>\n        </OnBoardingSection>\n    );\n};\n","import React from 'react';\nimport { ScrollView, Text } from 'react-native';\nimport { Button } from '../components/button';\nimport { doubleColor, hitColor } from '../constants';\nimport { CardSuit } from '../types';\n\ninterface OnboardingProps {\n    skipOnboardingHandler: () => void;\n    startOnboardingHandler: () => void;\n}\n\nexport const Onboarding: React.FC<OnboardingProps> = (props) => {\n    return (\n        <React.Fragment>\n            <ScrollView\n                style={{\n                    margin: 16\n                }}\n                contentContainerStyle={{\n                    alignItems: 'center',\n                    flexGrow: 1,\n                    justifyContent: 'center'\n                }}\n            >\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 24,\n                        textAlign: 'center'\n                    }}\n                >\n                    Welcome to\n                </Text>\n\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 30,\n                        fontWeight: 'bold',\n                        paddingVertical: 32,\n                        textAlign: 'center'\n                    }}\n                >\n                    {CardSuit.clubs}\n                    {CardSuit.hearts} Blackjump {CardSuit.diamonds}\n                    {CardSuit.spades}\n                </Text>\n\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 24,\n                        paddingBottom: 32,\n                        textAlign: 'center'\n                    }}\n                >\n                    The app that will help you master Blackjack basic strategy\n                </Text>\n\n                <Button\n                    height={56}\n                    backgroundColor={hitColor}\n                    isEnabled={true}\n                    onPress={props.startOnboardingHandler}\n                    text=\"Start onboarding\"\n                    width=\"75%\"\n                />\n                <Button\n                    height={56}\n                    backgroundColor={doubleColor}\n                    isEnabled={true}\n                    marginTop={16}\n                    onPress={props.skipOnboardingHandler}\n                    text=\"Skip onboarding\"\n                    width=\"75%\"\n                />\n            </ScrollView>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { View } from 'react-native';\nimport { colors } from '../constants';\nimport { createCard, getRandomCard, getRandomSuit } from '../logic/card';\nimport { createDealerHand, createHand } from '../logic/hand';\nimport { onBoardingSteps } from '../logic/onboarding';\nimport { getUntrainedTrainingPair } from '../logic/training-pair';\nimport {\n    BaseDecisions,\n    CasinoRulesKeys,\n    Doubling,\n    GameConfig,\n    Hand,\n    OnBoardingStepEvent,\n    Phases,\n    PlayerDecisions,\n    SimpleCardSymbol,\n    TrainingHands,\n    TrainingProgress\n} from '../types';\nimport { Button } from './button';\n\nexport interface ActionsProps {\n    gameConfig: GameConfig;\n    handlers: {\n        double: () => void;\n        hit: () => void;\n        split: () => void;\n        stand: () => void;\n        surrender: () => void;\n    };\n    isDoubleEnabled: boolean;\n    isHitEnabled: boolean;\n    isSplitEnabled: boolean;\n    isSurrenderEnabled: boolean;\n    phase: Phases;\n    onBoardingStep: number;\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\n    trainingHands: TrainingHands;\n    trainingProgress: TrainingProgress;\n}\n\nexport const Actions: React.FC<ActionsProps> = (props) => {\n    const isPlayerTurn = props.phase === Phases.player;\n\n    const isDoublingAvailable =\n        props.gameConfig.casinoRules[CasinoRulesKeys.doubling] > Doubling.none;\n    const isSurrenderAvailable = props.gameConfig.casinoRules[CasinoRulesKeys.surrender];\n\n    const activeOptionalButtons = 1 + Number(isDoublingAvailable) + Number(isSurrenderAvailable);\n    const optionalButtonsWidth = Math.floor((100 * 100) / activeOptionalButtons) / 100;\n\n    return props.phase === Phases.finished ? (\n        <Button\n            height={112}\n            backgroundColor={colors[BaseDecisions.hit]}\n            isEnabled={true}\n            onPress={() => {\n                let dealerHand: Hand;\n                let playerHand: Hand;\n\n                if (\n                    onBoardingSteps[props.onBoardingStep] &&\n                    onBoardingSteps[props.onBoardingStep].event === OnBoardingStepEvent.startRound\n                ) {\n                    /* Prevent dealing a Blackjack as initial hand when onboarding is active */\n                    playerHand = createHand([\n                        createCard(SimpleCardSymbol.Seven, getRandomSuit()),\n                        getRandomCard()\n                    ]);\n                    dealerHand = createDealerHand(\n                        props.gameConfig.casinoRules,\n                        SimpleCardSymbol.Six,\n                        getRandomSuit()\n                    );\n                } else if (\n                    props.gameConfig.untrainedPairsPriority ||\n                    props.gameConfig.selectedHandsOnly\n                ) {\n                    const trainingPair = getUntrainedTrainingPair(\n                        props.trainingHands,\n                        props.trainingProgress,\n                        props.gameConfig\n                    );\n                    playerHand = trainingPair.player;\n                    dealerHand = trainingPair.dealer;\n                } else {\n                    playerHand = createHand([getRandomCard(), getRandomCard()]);\n                    dealerHand = createDealerHand(props.gameConfig.casinoRules);\n                }\n\n                props.startTrainingRound(playerHand, dealerHand);\n            }}\n            text=\"Random\"\n            width=\"100%\"\n        />\n    ) : (\n        <React.Fragment>\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\n                <Button\n                    height={56}\n                    backgroundColor={colors[BaseDecisions.hit]}\n                    isEnabled={isPlayerTurn && props.isHitEnabled}\n                    onPress={props.handlers.hit}\n                    text={BaseDecisions.hit}\n                    width=\"50%\"\n                />\n                <Button\n                    height={56}\n                    backgroundColor={colors[BaseDecisions.stand]}\n                    isEnabled={isPlayerTurn}\n                    onPress={props.handlers.stand}\n                    text={BaseDecisions.stand}\n                    width=\"50%\"\n                />\n            </View>\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\n                <Button\n                    height={56}\n                    backgroundColor={colors[PlayerDecisions.split]}\n                    isEnabled={isPlayerTurn && props.isSplitEnabled}\n                    onPress={props.handlers.split}\n                    text={PlayerDecisions.split}\n                    width={`${optionalButtonsWidth}%`}\n                />\n                {isDoublingAvailable && (\n                    <Button\n                        height={56}\n                        backgroundColor={colors[PlayerDecisions.double]}\n                        isEnabled={isPlayerTurn && props.isDoubleEnabled}\n                        onPress={props.handlers.double}\n                        text={PlayerDecisions.double}\n                        width={`${optionalButtonsWidth}%`}\n                    />\n                )}\n                {isSurrenderAvailable && (\n                    <Button\n                        height={56}\n                        backgroundColor={colors[PlayerDecisions.surrender]}\n                        isEnabled={isPlayerTurn && props.isSurrenderEnabled}\n                        onPress={props.handlers.surrender}\n                        text={PlayerDecisions.surrender}\n                        width={`${optionalButtonsWidth}%`}\n                    />\n                )}\n            </View>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\nimport { dangerColor, splitColor } from '../constants';\nimport { DecisionEvaluation } from '../types';\n\ninterface DecisionEvaluationProps {\n    decisionEvaluation: DecisionEvaluation;\n    showDecisionsHandler?: () => void;\n}\n\nconst textProperties: StyleProp<TextStyle> = {\n    color: 'white',\n    fontSize: 20\n};\n\nconst boldTextProperties: StyleProp<TextStyle> = {\n    ...textProperties,\n    fontWeight: 'bold'\n};\n\nexport const DecisionEvaluationComponent: React.FC<DecisionEvaluationProps> = (props) => (\n    <View\n        style={{\n            alignItems: 'center',\n            backgroundColor: props.decisionEvaluation.isHit ? splitColor : dangerColor,\n            flex: 1,\n            justifyContent: 'center',\n            width: '100%'\n        }}\n    >\n        {props.decisionEvaluation.isHit ? (\n            <Text style={textProperties}>Well done</Text>\n        ) : (\n            <View\n                style={{\n                    alignItems: 'center',\n                    flexDirection: 'row',\n                    flexWrap: 'wrap',\n                    justifyContent: 'center',\n                    paddingHorizontal: 8\n                }}\n            >\n                <Text style={boldTextProperties}>{props.decisionEvaluation.handName}</Text>\n                <Text style={textProperties}> vs </Text>\n                <Text style={boldTextProperties}>{props.decisionEvaluation.dealerSymbol}</Text>\n                <Text style={textProperties}> = </Text>\n                <Text style={boldTextProperties}>{props.decisionEvaluation.dynamicDecision}</Text>\n\n                <TouchableOpacity onPress={props.showDecisionsHandler} style={{ marginTop: 8 }}>\n                    <Text\n                        style={{\n                            backgroundColor: 'white',\n                            borderRadius: 16,\n                            color: dangerColor,\n                            fontSize: 20,\n                            paddingHorizontal: 16,\n                            paddingVertical: 2,\n                            textAlign: 'center'\n                        }}\n                    >\n                        {props.decisionEvaluation.handName} decisions ➡️\n                    </Text>\n                </TouchableOpacity>\n            </View>\n        )}\n    </View>\n);\n","import React from 'react';\nimport { ScrollView, Text, View } from 'react-native';\nimport { Actions, ActionsProps } from '../components/actions';\nimport { DecisionEvaluationComponent } from '../components/decision-evaluation';\nimport { Divider } from '../components/divider';\nimport { HandComponent } from '../components/hand-component';\nimport { OnBoardingSection } from '../components/onboarding-section';\nimport {\n    AppNavigation,\n    CasinoRulesKeys,\n    DecisionEvaluation,\n    GameConfig,\n    Hand,\n    OnBoardingSections,\n    Phases,\n    Player,\n    RouteNames,\n    TrainingHands\n} from '../types';\n\ntype TableProps = ActionsProps & {\n    dealerHand?: Hand;\n    decisionEvaluation?: DecisionEvaluation;\n    gameConfig: GameConfig;\n    navigation: AppNavigation;\n    onBoardingStep: number;\n    peeking: boolean;\n    phase: Phases;\n    player: Player;\n    trainingHands: TrainingHands;\n};\n\nexport const Table: React.FC<TableProps> = (props) => (\n    <React.Fragment>\n        <View\n            style={{\n                flex: 1,\n                width: '100%'\n            }}\n        >\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.tableDealerHand}\n                onBoardingStep={props.onBoardingStep}\n                style={{ minHeight: 128, justifyContent: 'center' }}\n            >\n                {props.dealerHand && (\n                    <HandComponent\n                        hand={props.dealerHand}\n                        handsNumber={1}\n                        isCurrentHand={props.phase === Phases.dealer}\n                        isSoundEnabled={props.gameConfig.isSoundEnabled}\n                        navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\n                        peeking={props.peeking}\n                    />\n                )}\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.tableFeedback}\n                onBoardingStep={props.onBoardingStep}\n                style={{ height: 80, justifyContent: 'center', width: '100%' }}\n            >\n                <Divider />\n                {props.decisionEvaluation ? (\n                    <DecisionEvaluationComponent\n                        decisionEvaluation={props.decisionEvaluation}\n                        showDecisionsHandler={\n                            props.onBoardingStep > -1\n                                ? undefined\n                                : () => {\n                                      props.navigation.navigate(RouteNames.handDecisions, {\n                                          trainingHand:\n                                              props.trainingHands[props.player.lastActionHand!]\n                                      });\n                                  }\n                        }\n                    />\n                ) : (\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\n                        <Text\n                            style={{\n                                color: 'white',\n                                fontSize: 20,\n                                paddingHorizontal: 8,\n                                paddingTop: 8,\n                                textAlign: 'center'\n                            }}\n                        >\n                            Dealer must draw to 16\n                        </Text>\n                        <Text\n                            style={{\n                                color: 'white',\n                                fontSize: 20,\n                                paddingBottom: 8,\n                                paddingHorizontal: 8,\n                                textAlign: 'center'\n                            }}\n                        >\n                            and stand on{' '}\n                            {props.gameConfig.casinoRules[CasinoRulesKeys.dealerHitsSoft17]\n                                ? 'hard 17'\n                                : 'all 17s'}\n                        </Text>\n                    </View>\n                )}\n                <Divider />\n            </OnBoardingSection>\n\n            <OnBoardingSection\n                isHighlighted={OnBoardingSections.tablePlayerHands}\n                onBoardingStep={props.onBoardingStep}\n                style={{ flex: 1 }}\n            >\n                <ScrollView\n                    contentContainerStyle={{\n                        flexGrow: 1,\n                        justifyContent: 'space-evenly'\n                    }}\n                    style={{ width: '100%' }}\n                >\n                    {props.player.hands.map((hand, index) => (\n                        <HandComponent\n                            hand={hand}\n                            handsNumber={props.player.hands.length}\n                            isCurrentHand={\n                                props.phase === Phases.player && index === props.player.handIndex\n                            }\n                            isSoundEnabled={props.gameConfig.isSoundEnabled}\n                            key={index}\n                            navigation={props.onBoardingStep > -1 ? undefined : props.navigation}\n                        />\n                    ))}\n                </ScrollView>\n            </OnBoardingSection>\n        </View>\n\n        <OnBoardingSection\n            isHighlighted={OnBoardingSections.tableActions}\n            onBoardingStep={props.onBoardingStep}\n        >\n            <Actions\n                gameConfig={props.gameConfig}\n                handlers={props.handlers}\n                isDoubleEnabled={props.isDoubleEnabled}\n                isHitEnabled={props.isHitEnabled}\n                isSplitEnabled={props.isSplitEnabled}\n                isSurrenderEnabled={props.isSurrenderEnabled}\n                phase={props.phase}\n                onBoardingStep={props.onBoardingStep}\n                startTrainingRound={props.startTrainingRound}\n                trainingHands={props.trainingHands}\n                trainingProgress={props.trainingProgress}\n            />\n        </OnBoardingSection>\n    </React.Fragment>\n);\n","import React from 'react';\nimport { ScrollView, Text } from 'react-native';\n\nexport const TrainingCompleted: React.FC = () => {\n    return (\n        <React.Fragment>\n            <ScrollView\n                style={{\n                    margin: 16\n                }}\n                contentContainerStyle={{\n                    alignItems: 'center',\n                    flexGrow: 1,\n                    justifyContent: 'center'\n                }}\n            >\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 24,\n                        fontWeight: 'bold',\n                        paddingTop: 16,\n                        textAlign: 'center'\n                    }}\n                >\n                    Training completed\n                </Text>\n\n                <Text style={{ color: 'white', fontSize: 64, marginVertical: 32 }}>🎉🍾</Text>\n\n                <Text style={{ color: 'white', fontSize: 24, marginBottom: 32 }}>\n                    Congratulations! You have trained every possible training pair. You can now test\n                    your skills in a real casino 💸💸\n                </Text>\n\n                <Text style={{ color: 'white', fontSize: 20, fontStyle: 'italic' }}>\n                    Master the Basic Strategy: reset the training stats from the configuration menu\n                    and keep practicing until you miss no pairs at all\n                </Text>\n            </ScrollView>\n        </React.Fragment>\n    );\n};\n","import React, { useState } from 'react';\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\nimport { Divider } from '../components/divider';\nimport { OnBoardingSection } from '../components/onboarding-section';\nimport { doubleColor, untrainedColor } from '../constants';\nimport { getSpecificTrainingPair } from '../logic/training-pair';\nimport {\n    AppNavigation,\n    GameConfig,\n    Hand,\n    HandCode,\n    Phases,\n    RouteNames,\n    TrainingHands,\n    TrainingPairStatus,\n    TrainingProgress\n} from '../types';\nimport { getObjectKeys } from '../utils';\n\ntype TrainingPairsProps = {\n    gameConfig: GameConfig;\n    navigation: AppNavigation;\n    onBoardingStep: number;\n    phase: Phases;\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\n    trainingHands: TrainingHands;\n    trainingProgress: TrainingProgress;\n};\n\nexport const TrainingPairs: React.FC<TrainingPairsProps> = (props) => {\n    const [unfoldedHand, setUnfoldedHand] = useState<HandCode | undefined>(HandCode.Hard5);\n\n    return (\n        <React.Fragment>\n            <OnBoardingSection onBoardingStep={props.onBoardingStep}>\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 24,\n                        fontWeight: 'bold',\n                        paddingVertical: 16,\n                        textAlign: 'center'\n                    }}\n                >\n                    Training pairs\n                </Text>\n            </OnBoardingSection>\n            <ScrollView\n                style={{\n                    flex: 1\n                }}\n                contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\n            >\n                {getObjectKeys(props.trainingProgress).map((handCode) => {\n                    const trainingHandStatus = props.trainingProgress[handCode];\n                    const handName = props.trainingHands[handCode].name;\n\n                    return (\n                        <OnBoardingSection\n                            isHighlighted={unfoldedHand === handCode}\n                            key={handCode}\n                            onBoardingStep={props.onBoardingStep}\n                            style={{ paddingVertical: 8, paddingHorizontal: 16, width: '100%' }}\n                        >\n                            <TouchableOpacity\n                                onPress={\n                                    props.onBoardingStep > -1\n                                        ? undefined\n                                        : () => {\n                                            setUnfoldedHand(\n                                                unfoldedHand !== handCode ? handCode : undefined\n                                            );\n                                        }\n                                }\n                                style={{ width: '100%' }}\n                            >\n                                <Text\n                                    style={{\n                                        color: 'white',\n                                        fontSize: 20,\n                                        marginBottom: 16,\n                                        textAlign: 'center'\n                                    }}\n                                >\n                                    {handName}\n                                </Text>\n                            </TouchableOpacity>\n                            {unfoldedHand && unfoldedHand === handCode && (\n                                <React.Fragment>\n                                    <View\n                                        style={{\n                                            flexDirection: 'row',\n                                            flexWrap: 'wrap',\n                                            justifyContent: 'space-around',\n                                            opacity:\n                                                props.phase === Phases.finished ? undefined : 0.3\n                                        }}\n                                    >\n                                        {getObjectKeys(trainingHandStatus).map((dealerSymbol) => {\n                                            const backgroundColor =\n                                                trainingHandStatus[dealerSymbol] ===\n                                                TrainingPairStatus.untrained\n                                                    ? untrainedColor\n                                                    : trainingHandStatus[dealerSymbol] ===\n                                                      TrainingPairStatus.passed\n                                                    ? 'lightgreen'\n                                                    : 'lightcoral';\n\n                                            return (\n                                                <TouchableOpacity\n                                                    key={dealerSymbol}\n                                                    onPress={\n                                                        props.onBoardingStep > -1 ||\n                                                        props.phase !== Phases.finished\n                                                            ? undefined\n                                                            : () => {\n                                                                  const trainingPair = getSpecificTrainingPair(\n                                                                      handCode,\n                                                                      dealerSymbol,\n                                                                      props.gameConfig.casinoRules\n                                                                  );\n                                                                  props.startTrainingRound(\n                                                                      trainingPair.player,\n                                                                      trainingPair.dealer\n                                                                  );\n                                                                  props.navigation.navigate(\n                                                                      RouteNames.table\n                                                                  );\n                                                              }\n                                                    }\n                                                    style={{\n                                                        alignItems: 'center',\n                                                        backgroundColor: backgroundColor,\n                                                        borderRadius: 8,\n                                                        marginBottom: 8,\n                                                        paddingVertical: 4,\n                                                        width: '18%'\n                                                    }}\n                                                >\n                                                    <Text\n                                                        style={{\n                                                            color: 'white',\n                                                            fontSize: 20,\n                                                            fontWeight: 'bold'\n                                                        }}\n                                                    >\n                                                        {dealerSymbol}\n                                                    </Text>\n                                                </TouchableOpacity>\n                                            );\n                                        })}\n                                    </View>\n                                    <TouchableOpacity\n                                        onPress={\n                                            props.onBoardingStep > -1\n                                                ? undefined\n                                                : () => {\n                                                      props.navigation.navigate(\n                                                          RouteNames.handDecisions,\n                                                          {\n                                                              trainingHand:\n                                                                  props.trainingHands[handCode]\n                                                          }\n                                                      );\n                                                  }\n                                        }\n                                    >\n                                        <Text\n                                            style={{\n                                                backgroundColor: doubleColor,\n                                                borderRadius: 16,\n                                                color: 'white',\n                                                fontSize: 20,\n                                                marginVertical: 16,\n                                                marginHorizontal: 24,\n                                                paddingVertical: 4,\n                                                textAlign: 'center'\n                                            }}\n                                        >\n                                            {handName} decisions ➡️\n                                        </Text>\n                                    </TouchableOpacity>\n                                </React.Fragment>\n                            )}\n                            <Divider />\n                        </OnBoardingSection>\n                    );\n                })}\n            </ScrollView>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { ScrollView, Text, View } from 'react-native';\nimport { CardComponent } from '../components/card-component';\nimport { HandComponent } from '../components/hand-component';\nimport { createCard } from '../logic/card';\nimport { CardSuit, Hand, SimpleCardSymbol, SpecialCardSymbol } from '../types';\n\nexport const UntrainedPairsPriority: React.FC = () => {\n    const hardNine: Hand = {\n        bet: 1,\n        cards: [\n            createCard(SimpleCardSymbol.Five, CardSuit.clubs),\n            createCard(SimpleCardSymbol.Four, CardSuit.hearts)\n        ],\n        values: [9]\n    };\n\n    return (\n        <React.Fragment>\n            <Text\n                style={{\n                    color: 'white',\n                    fontSize: 24,\n                    fontWeight: 'bold',\n                    paddingTop: 16,\n                    textAlign: 'center'\n                }}\n            >\n                Untrained pairs priority\n            </Text>\n            <ScrollView\n                style={{\n                    margin: 16\n                }}\n            >\n                <Text style={{ color: 'white', fontSize: 20 }}>\n                    Prioritizes untrained/missed pairs instead of dealing random cards (a training\n                    pair consists of a player hand and a dealer up card). When enabling Untrained\n                    pairs priority:\n                </Text>\n\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\n                    • Non-random cards will be dealt. Non-random cards are golden and have a square\n                    instead of a suit\n                </Text>\n\n                <View style={{ alignItems: 'center', marginTop: 16 }}>\n                    <CardComponent\n                        card={createCard(SimpleCardSymbol.Eight)}\n                        isSoundEnabled={false}\n                        skipAnimation={true}\n                    />\n                </View>\n\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\n                    • Each time you start training a random pair you will be dealt an\n                    untrained/missed hand against the corresponding dealer up card\n                </Text>\n\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 24 }}>\n                    • Each time you Hit or Split a hand you might be dealt a card that turns your\n                    current hand into an untrained/missed pair\n                </Text>\n\n                <HandComponent\n                    hand={hardNine}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n                <Text\n                    style={{ color: 'white', fontSize: 20, marginBottom: 8, textAlign: 'center' }}\n                >\n                    Hit\n                </Text>\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [...hardNine.cards, createCard(SimpleCardSymbol.Ace)],\n                        values: [10, 20]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n                <Text\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\n                >\n                    ...\n                </Text>\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [...hardNine.cards, createCard(SimpleCardSymbol.Ten)],\n                        values: [20]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n\n                <Text\n                    style={{\n                        color: 'white',\n                        fontSize: 20,\n                        fontStyle: 'italic',\n                        marginTop: 24\n                    }}\n                >\n                    You still will be dealt a random card when no untrained/missed pairs can be\n                    reached from your current hand or when the risk of busting your current hand is\n                    greater than 0\n                </Text>\n\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\n                    • You will never be dealt a hand that requires no actions (i.e. a Blackjack or\n                    21)\n                </Text>\n\n                <HandComponent\n                    hand={{\n                        bet: 1,\n                        cards: [\n                            createCard(SimpleCardSymbol.Ace, CardSuit.spades),\n                            createCard(SpecialCardSymbol.Jack, CardSuit.hearts)\n                        ],\n                        values: [11, 21]\n                    }}\n                    handsNumber={1}\n                    isCurrentHand={false}\n                    isSoundEnabled={false}\n                    skipAnimation={true}\n                />\n\n                <Text style={{ color: 'white', fontSize: 20, marginTop: 24 }}>\n                    • When you complete the training (i.e. reach 100% progress), Untrained pairs\n                    priority will be automatically disabled\n                </Text>\n            </ScrollView>\n        </React.Fragment>\n    );\n};\n","import { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Audio } from 'expo-av';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport hitSoundMp3 from '../assets/hit.mp3';\nimport missSoundMp3 from '../assets/miss.mp3';\nimport {\n    getGameConfig,\n    getHasCompletedOnboarding,\n    getPlayerEarnings,\n    getPlayerEarningsHistorical,\n    getTrainingProgress,\n    updateGameConfig,\n    updateHasCompletedOnboarding,\n    updatePlayerEarnings,\n    updatePlayerEarningsHistorical,\n    updateTrainingProgress\n} from './async-storage';\nimport { NavBar } from './components/nav-bar';\nimport { OnboardingBar } from './components/onboarding-bar';\nimport { tableColor } from './constants';\nimport { handleDealerTurn } from './logic/app-state';\nimport { evaluateDecision } from './logic/basic-strategy';\nimport { getRandomCard, symbolToSimpleSymbol } from './logic/card';\nimport { getDefaultGameConfig } from './logic/game-config';\nimport {\n    canBeDealerBlackjack,\n    canDouble,\n    canHit,\n    canSplit,\n    canSurrender,\n    isDealerBlackjack,\n    isFinished,\n    revealDealerHoleCard\n} from './logic/hand';\nimport { handToHandCode } from './logic/hand';\nimport { onBoardingSteps } from './logic/onboarding';\nimport {\n    createPlayer,\n    doubleCurrentHand,\n    getCurrentHand,\n    hitCurrentHand,\n    initializeHands,\n    isLastHand,\n    splitCurrentHand,\n    standCurrentHand,\n    startNextHand,\n    surrenderCurrentHand\n} from './logic/player';\nimport { getDefaultTrainingHands, getTrainingHands } from './logic/training-hand';\nimport {\n    getDefaultTrainingStatus,\n    getIsProgressBlocked,\n    getNextTrainingStatus,\n    retrieveTrainingStatus\n} from './logic/training-status';\nimport {\n    AppNavigation,\n    BaseDecisions,\n    CasinoRulesKeys,\n    DecisionEvaluation,\n    GameConfig,\n    Hand,\n    HandCode,\n    initialRouteName,\n    OnBoardingStepEvent,\n    Phases,\n    Player,\n    PlayerDecision,\n    PlayerDecisions,\n    RouteNames,\n    RouteParams,\n    TrainingStatus\n} from './types';\nimport { playSound } from './utils';\nimport { BasicStrategyTable } from './views/basic-strategy-table';\nimport { BlackjackPeek } from './views/blackjack-peek';\nimport { ConfigMenu } from './views/config-menu';\nimport { EarningsChart } from './views/earnings-chart';\nimport { HandDecisions } from './views/hand-decisions';\nimport { HitSplitAces } from './views/hit-split-aces';\nimport { MissedPairs } from './views/missed-pairs';\nimport { Onboarding } from './views/onboarding';\nimport { Table } from './views/table';\nimport { TrainingCompleted } from './views/training-completed';\nimport { TrainingPairs } from './views/training-pairs';\nimport { UntrainedPairsPriority } from './views/untrained-pairs-priority';\n\nconst Stack = createStackNavigator<RouteParams>();\nlet navigationListener: Function | undefined;\n\nconst initializeSounds = () =>\n    Promise.all([Audio.Sound.createAsync(hitSoundMp3), Audio.Sound.createAsync(missSoundMp3)])\n        .then((results) => ({\n            hit: results[0].sound,\n            miss: results[1].sound\n        }))\n        .catch((errors) => {\n            console.log(errors);\n            /* Failing to load audio is not a critical issue */\n            return undefined;\n        });\n\nexport const BlackJump: React.FC = () => {\n    const [currentRoute, setCurrentRoute] = useState<string>(initialRouteName);\n    const [dealerHand, setDealerHand] = useState<Hand>();\n    const [decisionEvaluation, setDecisionEvaluation] = useState<DecisionEvaluation>();\n    const [decisionEvaluationTimeout, setDecisionEvaluationTimeout] = useState(0);\n    const [gameConfig, setGameConfig] = useState(getDefaultGameConfig());\n    const [onBoardingStep, setOnBoardingStep] = useState(-1);\n    const [peeking, setPeeking] = useState(false);\n    const [phase, setPhase] = useState<Phases>(Phases.finished);\n    const [player, setPlayer] = useState<Player>(createPlayer());\n    const [trainingHands, setTrainingHands] = useState(getDefaultTrainingHands());\n    const [sounds, setSounds] = useState<{ hit: Audio.Sound; miss: Audio.Sound }>();\n    const [trainingStatus, setTrainingStatus] = useState(getDefaultTrainingStatus());\n\n    const navigationRef = useRef<NavigationContainerRef<RouteParams>>(null);\n\n    useEffect(() => {\n        Promise.all([\n            getGameConfig(gameConfig),\n            getHasCompletedOnboarding(),\n            getPlayerEarnings(),\n            getPlayerEarningsHistorical(),\n            getTrainingProgress(),\n            initializeSounds()\n        ]).then((results) => {\n            const _gameConfig = results[0];\n            const hasCompletedOnboarding = results[1];\n            const playerEarnings = results[2];\n            const playerEarningsHistorical = results[3];\n            const trainingProgress = results[4];\n            const _sounds = results[5];\n\n            setGameConfig(_gameConfig);\n            const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\n            setTrainingHands(nextTrainingHands);\n\n            if (!hasCompletedOnboarding) {\n                navigationRef.current?.navigate(RouteNames.onboarding);\n            }\n\n            setPlayer({\n                ...player,\n                cash: playerEarnings,\n                earningsHistorical: playerEarningsHistorical\n            });\n\n            if (trainingProgress) {\n                const nextTrainingStatus = retrieveTrainingStatus(\n                    trainingProgress,\n                    nextTrainingHands,\n                    _gameConfig\n                );\n                setTrainingStatus(nextTrainingStatus);\n            }\n\n            setSounds(_sounds);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (navigationRef.current && !navigationListener) {\n            navigationListener = navigationRef.current.addListener('state', (event) => {\n                setCurrentRoute(event.data.state!.routes[event.data.state!.index!].name);\n            });\n        }\n    }, [navigationRef.current]);\n\n    const currentHand = getCurrentHand(player);\n    const isDoubleEnabled =\n        currentHand !== undefined && canDouble(currentHand, player.hands, gameConfig.casinoRules);\n    const isHitEnabled = currentHand !== undefined && canHit(player.hands, gameConfig.casinoRules);\n    const isSplitEnabled =\n        currentHand !== undefined &&\n        canSplit(currentHand, player.hands.length, gameConfig.casinoRules);\n    const isSurrenderEnabled =\n        currentHand !== undefined &&\n        canSurrender(currentHand, player.hands.length, gameConfig.casinoRules);\n    const currentDealerSymbol = dealerHand && symbolToSimpleSymbol(dealerHand.cards[0].symbol);\n\n    const updateOnBoardingStep = (direction: 'forward' | 'backward') => {\n        const nextStep = onBoardingStep + (direction === 'forward' ? 1 : -1);\n        onBoardingSteps[nextStep] &&\n            onBoardingSteps[nextStep].load &&\n            onBoardingSteps[nextStep].load!(navigationRef.current as unknown as AppNavigation);\n        setOnBoardingStep(nextStep);\n    };\n\n    const exitOnboarding = () => {\n        setOnBoardingStep(-1);\n        updateHasCompletedOnboarding(true);\n        navigationRef.current?.navigate(RouteNames.table);\n    };\n\n    useEffect(() => {\n        if (decisionEvaluationTimeout) {\n            clearTimeout(decisionEvaluationTimeout);\n        }\n        if (decisionEvaluation && decisionEvaluation.isHit) {\n            const nextTimeout = setTimeout(() => {\n                setDecisionEvaluation(undefined);\n            }, 1000);\n            setDecisionEvaluationTimeout(nextTimeout as unknown as number);\n        }\n    }, [decisionEvaluation]);\n\n    useEffect(() => {\n        if (phase === 'dealer') {\n            handleDealerTurn(dealerHand!, gameConfig, player, setDealerHand, setPhase, setPlayer);\n        }\n    }, [phase, dealerHand]);\n\n    const saveGameConfig = (nextGameConfig: GameConfig) => {\n        setGameConfig(nextGameConfig);\n        updateGameConfig(nextGameConfig);\n    };\n\n    const startTrainingRound = (playerHand: Hand, dealerHand: Hand) => {\n        const nextPlayer = { ...player };\n        initializeHands(nextPlayer, playerHand);\n\n        if (\n            gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] &&\n            canBeDealerBlackjack(dealerHand)\n        ) {\n            setPeeking(true);\n            setTimeout(() => {\n                setPeeking(false);\n                if (isDealerBlackjack(dealerHand)) {\n                    revealDealerHoleCard(dealerHand);\n                    setPhase(Phases.dealer);\n                } else {\n                    setPhase(Phases.player);\n                }\n            }, 1500);\n        } else {\n            setPhase(\n                isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)\n                    ? Phases.dealer\n                    : Phases.player\n            );\n        }\n\n        setDealerHand(dealerHand);\n        setPlayer(nextPlayer);\n        setDecisionEvaluation(undefined);\n\n        if (\n            onBoardingSteps[onBoardingStep] &&\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.startRound\n        ) {\n            updateOnBoardingStep('forward');\n        }\n    };\n\n    const finishCurrentHand = (player: Player) => {\n        if (isLastHand(player)) {\n            setPhase(Phases.dealer);\n            // By setting the phase to dealer, the corresponding useEffect hook will be executed\n        } else {\n            const nextPlayer = { ...player };\n            startNextHand(\n                nextPlayer,\n                gameConfig.untrainedPairsPriority,\n                currentDealerSymbol!,\n                trainingHands,\n                trainingStatus.trainingProgress\n            );\n            setPlayer(nextPlayer);\n            if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\n                finishCurrentHand(nextPlayer);\n            }\n        }\n    };\n\n    const evaluatePlayerDecision = (playerDecision: PlayerDecision, hand: Hand) => {\n        const nextDecisionEvaluation = evaluateDecision(\n            hand,\n            dealerHand!,\n            trainingHands,\n            {\n                canDouble: isDoubleEnabled,\n                canSplit: isSplitEnabled,\n                canSurrender: isSurrenderEnabled\n            },\n            playerDecision\n        );\n\n        if (gameConfig.isSoundEnabled && sounds) {\n            playSound(nextDecisionEvaluation.isHit ? sounds.hit : sounds.miss);\n        }\n\n        setDecisionEvaluation(nextDecisionEvaluation);\n\n        const handCode = handToHandCode(currentHand);\n        let nextTrainingStatus = getNextTrainingStatus(\n            trainingStatus,\n            trainingHands,\n            gameConfig,\n            nextDecisionEvaluation.isHit,\n            handCode,\n            currentDealerSymbol!\n        );\n\n        if (handCode === HandCode.Split10s) {\n            // Because the only possible initial-hand for a Hard 20 is a 10,10,\n            // Split10s must also set the corresponding state for Hard 20\n            nextTrainingStatus = getNextTrainingStatus(\n                nextTrainingStatus,\n                trainingHands,\n                gameConfig,\n                nextDecisionEvaluation.isHit,\n                HandCode.Hard20,\n                currentDealerSymbol!\n            );\n        }\n\n        setTrainingStatus(nextTrainingStatus);\n        updateTrainingProgress(nextTrainingStatus.trainingProgress);\n\n        if (\n            onBoardingSteps[onBoardingStep] &&\n            onBoardingSteps[onBoardingStep].event === OnBoardingStepEvent.playerAction\n        ) {\n            updateOnBoardingStep('forward');\n        }\n\n        if (nextTrainingStatus.isCompleted && !trainingStatus.isCompleted) {\n            navigationRef.current?.navigate(RouteNames.trainingCompleted);\n            saveGameConfig({ ...gameConfig, untrainedPairsPriority: false });\n        }\n    };\n\n    const doubleHandler = () => {\n        const nextPlayer = { ...player };\n        evaluatePlayerDecision(PlayerDecisions.double, currentHand);\n        doubleCurrentHand(nextPlayer, getRandomCard());\n        setPlayer(nextPlayer);\n        finishCurrentHand(nextPlayer);\n    };\n\n    const hitHandler = () => {\n        const nextPlayer = { ...player };\n        evaluatePlayerDecision(BaseDecisions.hit, currentHand);\n        hitCurrentHand(\n            nextPlayer,\n            gameConfig.untrainedPairsPriority,\n            currentDealerSymbol!,\n            trainingHands,\n            trainingStatus.trainingProgress\n        );\n\n        setPlayer(nextPlayer);\n        if (isFinished(currentHand, nextPlayer.hands, gameConfig.casinoRules)) {\n            finishCurrentHand(nextPlayer);\n        }\n    };\n\n    const standHandler = () => {\n        const nextPlayer = { ...player };\n        evaluatePlayerDecision(BaseDecisions.stand, currentHand);\n        standCurrentHand(nextPlayer);\n        setPlayer(nextPlayer);\n        finishCurrentHand(nextPlayer);\n    };\n\n    const splitHandler = () => {\n        const nextPlayer = { ...player };\n        evaluatePlayerDecision(PlayerDecisions.split, currentHand);\n        splitCurrentHand(\n            nextPlayer,\n            gameConfig.untrainedPairsPriority,\n            currentDealerSymbol!,\n            trainingHands,\n            trainingStatus.trainingProgress\n        );\n\n        setPlayer(nextPlayer);\n        if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\n            finishCurrentHand(nextPlayer);\n        }\n    };\n\n    const surrenderHandler = () => {\n        const nextPlayer = { ...player };\n        evaluatePlayerDecision(PlayerDecisions.surrender, currentHand);\n        surrenderCurrentHand(nextPlayer);\n        setPlayer(nextPlayer);\n        finishCurrentHand(nextPlayer);\n    };\n\n    return (\n        <GestureHandlerRootView style={{ flex: 1 }}>\n            <NavigationContainer ref={navigationRef}>\n                <StatusBar hidden={true} />\n                <NavBar\n                    navigation={navigationRef.current as unknown as AppNavigation}\n                    onBoardingStep={onBoardingStep}\n                    player={player}\n                    routeName={currentRoute}\n                    trainingStatus={trainingStatus}\n                />\n                <Stack.Navigator\n                    initialRouteName={initialRouteName}\n                    screenOptions={{\n                        headerShown: false,\n                        cardStyle: {\n                            backgroundColor: tableColor\n                        }\n                    }}\n                >\n                    <Stack.Screen name={RouteNames.basicStrategyTable}>\n                        {() => <BasicStrategyTable casinoRules={gameConfig.casinoRules} />}\n                    </Stack.Screen>\n                    <Stack.Screen name={RouteNames.blackjackPeek} component={BlackjackPeek} />\n                    <Stack.Screen name={RouteNames.configMenu}>\n                        {(props) => (\n                            <ConfigMenu\n                                gameConfig={gameConfig}\n                                navigation={props.navigation}\n                                onBoardingStep={onBoardingStep}\n                                phase={phase}\n                                resetTrainingStatus={() => {\n                                    const nextTrainingStatus = getDefaultTrainingStatus();\n                                    const nextPlayer: Player = {\n                                        ...player,\n                                        cash: 0,\n                                        earningsHistorical: [0]\n                                    };\n\n                                    updateTrainingProgress(nextTrainingStatus.trainingProgress);\n                                    updatePlayerEarnings(nextPlayer.cash);\n                                    updatePlayerEarningsHistorical(nextPlayer.earningsHistorical);\n\n                                    setPlayer(nextPlayer);\n                                    setTrainingStatus(nextTrainingStatus);\n\n                                    props.navigation.navigate(RouteNames.table);\n                                }}\n                                setGameConfig={(_gameConfig) => {\n                                    const nextTrainingHands = getTrainingHands(\n                                        _gameConfig.casinoRules\n                                    );\n                                    const nextTrainingStatus: TrainingStatus = {\n                                        ...trainingStatus,\n                                        isProgressBlocked: getIsProgressBlocked(\n                                            trainingStatus,\n                                            trainingHands,\n                                            _gameConfig.selectedHandsOnly,\n                                            _gameConfig.selectedHands\n                                        )\n                                    };\n\n                                    saveGameConfig(_gameConfig);\n                                    setTrainingHands(nextTrainingHands);\n                                    setTrainingStatus(nextTrainingStatus);\n                                }}\n                                trainingHands={trainingHands}\n                                trainingStatus={trainingStatus}\n                            />\n                        )}\n                    </Stack.Screen>\n                    <Stack.Screen name={RouteNames.earningsChart}>\n                        {() => <EarningsChart earningsHistorical={player.earningsHistorical} />}\n                    </Stack.Screen>\n                    <Stack.Screen name={RouteNames.handDecisions}>\n                        {(props) => (\n                            <HandDecisions\n                                casinoRules={gameConfig.casinoRules}\n                                route={props.route}\n                            />\n                        )}\n                    </Stack.Screen>\n                    <Stack.Screen name={RouteNames.hitSplitAces} component={HitSplitAces} />\n                    <Stack.Screen name={RouteNames.missedPairs}>\n                        {(props) => (\n                            <MissedPairs\n                                gameConfig={gameConfig}\n                                missedTrainingPairs={trainingStatus.missedTrainingPairs}\n                                navigation={props.navigation}\n                                onBoardingStep={onBoardingStep}\n                                phase={phase}\n                                startTrainingRound={startTrainingRound}\n                                trainingHands={trainingHands}\n                            />\n                        )}\n                    </Stack.Screen>\n                    <Stack.Screen name={RouteNames.onboarding}>\n                        {() => (\n                            <Onboarding\n                                skipOnboardingHandler={exitOnboarding}\n                                startOnboardingHandler={() => updateOnBoardingStep('forward')}\n                            />\n                        )}\n                    </Stack.Screen>\n                    <Stack.Screen name={RouteNames.table}>\n                        {(props) => (\n                            <Table\n                                dealerHand={dealerHand}\n                                decisionEvaluation={decisionEvaluation}\n                                gameConfig={gameConfig}\n                                handlers={{\n                                    double: doubleHandler,\n                                    hit: hitHandler,\n                                    split: splitHandler,\n                                    stand: standHandler,\n                                    surrender: surrenderHandler\n                                }}\n                                isDoubleEnabled={isDoubleEnabled}\n                                isHitEnabled={isHitEnabled}\n                                isSplitEnabled={isSplitEnabled}\n                                isSurrenderEnabled={isSurrenderEnabled}\n                                navigation={props.navigation}\n                                onBoardingStep={onBoardingStep}\n                                peeking={peeking}\n                                phase={phase}\n                                player={player}\n                                startTrainingRound={startTrainingRound}\n                                trainingHands={trainingHands}\n                                trainingProgress={trainingStatus.trainingProgress}\n                            />\n                        )}\n                    </Stack.Screen>\n                    <Stack.Screen\n                        name={RouteNames.trainingCompleted}\n                        component={TrainingCompleted}\n                    />\n                    <Stack.Screen name={RouteNames.trainingPairs}>\n                        {(props) => (\n                            <TrainingPairs\n                                gameConfig={gameConfig}\n                                navigation={props.navigation}\n                                onBoardingStep={onBoardingStep}\n                                phase={phase}\n                                startTrainingRound={startTrainingRound}\n                                trainingHands={trainingHands}\n                                trainingProgress={trainingStatus.trainingProgress}\n                            />\n                        )}\n                    </Stack.Screen>\n                    <Stack.Screen\n                        name={RouteNames.untrainedPairsPriority}\n                        component={UntrainedPairsPriority}\n                    />\n                </Stack.Navigator>\n\n                {onBoardingStep > -1 && (\n                    <OnboardingBar\n                        exitOnboarding={exitOnboarding}\n                        nextStepHandler={() => updateOnBoardingStep('forward')}\n                        onBoardingStep={onBoardingStep}\n                        previousStepHandler={() => updateOnBoardingStep('backward')}\n                    />\n                )}\n            </NavigationContainer>\n        </GestureHandlerRootView>\n    );\n};\n","import React from 'react';\nimport { BlackJump } from './src/blackjump';\n\nexport default function App() {\n    return <BlackJump />;\n}\n"],"sourceRoot":""}