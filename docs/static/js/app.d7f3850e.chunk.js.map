{"version":3,"sources":["assets/failure.mp3","assets/success.mp3","assets/card-slide.mp3","src/types/card.ts","src/types/casino-rules.ts","src/types/decisions.ts","src/types/hand.ts","src/types/navigation.ts","src/types/onboarding.ts","src/types/phases.ts","src/types/training-pair.ts","src/async-storage.ts","src/constants.ts","src/components/nav-bar-items/config-button.tsx","src/components/nav-bar-items/earnings-indicator.tsx","src/components/nav-bar-items/precision-indicator.tsx","src/components/nav-bar-items/progress-indicator.tsx","src/logic/onboarding.ts","src/components/onboarding-section.tsx","src/components/nav-bar.tsx","src/components/button.tsx","src/components/onboarding-bar.tsx","src/utils.ts","src/logic/card.ts","src/logic/hand-code.ts","src/logic/hand.ts","src/logic/player.ts","src/logic/dealer-symbols.ts","src/logic/casino-rules.ts","src/logic/hand-decision-set.ts","src/logic/training-hand.ts","src/logic/training-pair.ts","src/logic/training-status.ts","src/logic/app-state.ts","src/logic/basic-strategy.ts","src/components/casino-rules/doubling-picker.tsx","src/components/casino-rules/rule-switcher.tsx","src/components/casino-rules/splits-number-picker.tsx","src/views/basic-strategy-table.tsx","src/logic/sound-queue.ts","src/components/card-component.tsx","src/components/hand-component.tsx","src/views/blue-cards-info.tsx","src/components/divider.tsx","src/components/help-icon.tsx","src/views/config-menu.tsx","src/views/failed-hands.tsx","src/views/gold-hands-info.tsx","src/components/hand-decisions-table.tsx","src/views/gold-hands-levels-info.tsx","src/views/hand-decisions.tsx","src/views/onboarding.tsx","src/components/actions.tsx","src/components/decision-evaluation.tsx","src/views/table.tsx","src/views/training-completed.tsx","src/views/training-hands.tsx","App.tsx","src/logic/game-config.ts"],"names":["module","exports","CardSuit","SimpleCardSymbol","SpecialCardSymbol","CasinoRulesKeys","Doubling","SplitsNumber","BaseDecisions","DynamicDecisions","PlayerDecisions","HandCode","HandOutcome","RouteNames","OnBoardingSections","Phases","initialRouteName","table","TrainingPairStatus","updatePlayerEarnings","playerEarnings","AsyncStorage","setItem","JSON","stringify","catch","updateTrainingProgress","TrainingProgress","colors","hit","stand","double_hit","double_stand","split_hit","split_stand","surrender_hit","double","split","surrender","ConfigButton","props","TouchableOpacity","onPress","isEnabled","routeName","navigation","navigate","configMenu","goBack","undefined","style","alignItems","flexGrow","justifyContent","width","Fragment","height","viewBox","fill","d","areGoldHandsBlockingProgress","progress","View","position","right","bottom","Text","color","fontWeight","EarningsIndicator","earningsColor","earnings","fontSize","marginTop","transform","PrecisionIndicator","precision","Math","floor","failedHands","flexDirection","marginLeft","ProgressIndicator","trainingHands","onBoardingSteps","activeSection","tableActions","hideNextButton","id","load","text","tablePlayerHands","hidePreviousButton","tableDealerHand","tableFeedback","progressIndicator","precisionIndicator","configMenuButton","basicStrategyTable","casinoRules","appSettings","resetTraining","OnBoardingSection","isOnboardingActive","onBoardingStep","isHighlighted","children","backgroundColor","opacity","top","left","animateIndicator","Animated","sequence","timing","toValue","duration","useNativeDriver","start","NavBar","attemptedTrainingPairs","passedTrainingPairs","earningsPosition","useMemo","Value","precisionPosition","progressPosition","useEffect","player","cash","translateX","Button","marginBottom","textColor","textSize","OnboardingBar","currentStep","previousStepHandler","padding","length","nextStepHandler","exitOnboarding","cartesianProduct","firstArray","secondArray","elementBuilder","reduce","product","x","concat","map","y","getObjectKeys","object","Object","keys","getRandomItem","items","round","random","playSound","sound","stopAsync","then","playAsync","cardsValue","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","suits","clubs","diamonds","hearts","spades","symbols","deck","suit","symbol","isBlueCard","isGoldCard","getCardEffectiveValue","card","values","getCardValues","getCardsValues","cards","options","numbers","numbersDictionary","dictionary","next","removeDuplicates","filter","peeking","isHoleCard","reducedValues","currentValues","getRandomCard","randomCard","getRandomSuit","simpleSymbolToSymbol","simpleSymbol","tenPointsSymbols","symbolToSimpleSymbol","indexOf","valueToSymbol","number","String","isSoftHandCode","handCode","includes","isSplitHandCode","areHandsSplitAces","hands","canSplit","hand","handsNumber","splitsNumber","createDealerHand","dealerSymbol","dealerCards","holeCard","push","createHand","bet","dealCard","getCardForUntrainedHand","playerHand","trainingProgress","isPlayerHandSoft","playerHandValues","valuesToUntrainedHands","trainingHand","valueToReachThisHand","isHandUntrainedForDealerSymbol","code","untrained","softDifference","parseInt","hardDifference","value","getHandEffectiveValue","effectiveValue","some","v","reverse","find","getHandValidValues","handCodeToHand","handSymbols","getSplitHandSymbols","handValues","s","complementarySymbol","getSoftHandSymbols","minValue","max","maxValue","min","firstValue","secondValue","getHardHandSymbols","handToHandCode","c","join","hasHoleCard","isBlackjack","isBust","isFinished","isAcesPairHand","isAcesPair","hitSplitAces","revealDealerHoleCard","getCurrentHand","handIndex","resolveHands","dealerHand","handOutcome","playerHandValue","dealerHandValue","bust","blackjack","dealerWins","playerWins","outcome","resolveHand","allDealerSymbols","getUntrainedDealerSymbols","trainingHandStatus","passed","getDefaultCasinoRules","blackjackPeek","doubling","nineToElevenSoft","doublingAfterSplit","three","alwaysHit","alwaysStand","getHandDecisionSetLevel","decisionSet","reduced","previousValue","level","handDecisionSetGetters","Split2s","none","Split3s","Split4s","Split5s","tenToEleven","Split6s","Split7s","Split8s","Split9s","Split10s","SplitAs","Soft13","anyPair","Soft14","Soft15","Soft16","Soft17","Soft18","Soft19","Soft20","Hard5","Hard6","Hard7","Hard8","Hard9","nineToEleven","Hard10","Hard11","Hard12","Hard13","Hard14","Hard15","Hard16","Hard17","Hard18","Hard19","Hard20","getActiveTrainingHands","goldHandsLevels","getGoldHandsNumber","getTrainingHands","dependencies","name","forEach","getUntrainedTrainingHands","allTrainingPairsNumber","getSpecificTrainingPair","dealer","getAreGoldHandsBlockingProgress","gameConfig","useGoldHands","getDefaultTrainingStatus","failedTrainingPairs","isCompleted","reducedTrainingProgress","reducedDealerSymbols","isTrainingCompleted","reduceTrainingPairProgress","trainingPairStatus","reducedTrainingStatus","failed","retrieveTrainingStatus","trainingStatus","reduceTrainingHandProgress","getNextTrainingStatus","isHit","currentHandCode","currentDealerSymbol","currentHandTrainingStatus","nextAttemptedTrainingPairs","nextFailedTrainingPairs","currentFailedTrainingPairs","failedTrainingPair","getNextFailedTrainingPairs","nextPassedTrainingHands","evaluateDynamicDecision","dynamicDecision","dynamicConditions","canDouble","canSurrender","DoublingPicker","paddingTop","flex","Picker","selectedValue","onValueChange","newValue","nextDoubling","nextCasinoRules","setCasinoRules","Item","label","RuleSwitcher","SwitchCore","Switch","isDisabled","ruleName","marginRight","trackColor","true","false","hideLabel","SplitsNumberPicker","nextSplitsNumber","one","two","actionsAbbreviationMap","handCodesAbbreviationMap","cellWidth","TextCell","marginVertical","paddingVertical","textAlign","BasicStrategyTable","useState","ScrollView","paddingHorizontal","key","cardSymbol","action","pushSound","soundQueue","sounds","isActive","playNextSound","nextSound","pop","setTimeout","CardComponent","cardSlideSound","setCardSlideSound","animateCard","skipAnimation","parallel","animationsDuration","isSoundEnabled","Audio","Sound","createAsync","cardSlideSoundMp3","volume","result","setValue","cardColor","borderRadius","translateY","blueCardsInfo","goldHandsInfo","HandComponent","displayValues","isCurrentHand","flexWrap","maxWidth","index","BlueCardsInfo","hardFourteen","splitFour","margin","fontStyle","Divider","HelpIcon","textStyle","ConfigMenu","setAreGoldHandsBlockingProgress","setGoldHandsLevels","goldHandsNumber","setGoldHandsNumber","isDealerAnimationEnabled","setIsDealerAnimationEnabled","setIsSoundEnabled","setTrainingHands","useBlueCards","setUseBlueCards","setUseGoldHands","isSomeLevelSelected","_goldHandsLevels","areGoldHandsBlockingProgressHandler","nextGoldHandsLevels","nextUseGoldHands","nextTrainingHands","casinoRuleChangeHandler","nextGoldHandsNumber","isSaveButtonEnabled","contentContainerStyle","paddingBottom","goldHandsLevelsInfo","numberKey","disabled","paddingLeft","nextGameConfig","setGameConfig","phase","finished","onboarding","Alert","alert","nextTrainingStatus","setTrainingStatus","FailedHands","handName","trainingPair","startTrainingRound","GoldHandsInfo","HandDecisionsTable","handDecisionSet","simpleCardSymbol","levelsColor","1","2","3","4","GoldHandsLevelsInfo","hardEight","splitNine","marginHorizontal","HandDecisions","route","params","dependency","Onboarding","startOnboardingHandler","skipOnboardingHandler","Actions","isPlayerTurn","isDoublingAvailable","isSurrenderAvailable","activeOptionalButtons","Number","optionalButtonsWidth","untrainedTrainingHands","randomTrainingHand","untrainedDealerSymbols","randomDealerSymbol","getRandomTrainingPair","isHitEnabled","handlers","isSplitEnabled","isDoubleEnabled","isSurrenderEnabled","textProperties","DecisionEvaluationComponent","decisionEvaluation","showDecisionsHandler","Table","minHeight","handDecisions","lastActionHand","TrainingCompleted","TrainingHands","unfoldedHand","setUnfoldedHand","navigationListener","Stack","createStackNavigator","App","currentRoute","setCurrentRoute","setDealerHand","setDecisionEvaluation","decisionEvaluationTimeout","setDecisionEvaluationTimeout","setOnBoardingStep","setPeeking","setPhase","createPlayer","setPlayer","setSounds","navigationRef","useRef","currentGameConfig","Promise","all","getItem","storedGameConfig","parse","failureSoundMp3","successSoundMp3","results","failure","success","errors","console","log","current","getProgress","addListener","event","data","state","routes","currentHand","handEffectiveValue","isHandWithTwoCards","isSingleHand","contains9To11","handValue","is10To11","is9To11","updateOnBoardingStep","direction","nextStep","hasCompletedOnboarding","_trainingStatus","clearTimeout","nextTimeout","nextDealerHand","handleDealerTurn","nextPlayer","initialHand","initializeHands","visibleCard","canBeDealerBlackjack","cardValues","isDealerBlackjack","finishCurrentHand","isLastHand","nextHand","nextCard","startNextHand","evaluatePlayerDecision","playerDecision","nextDecisionEvaluation","optimalDecision","evaluateDecision","trainingCompleted","doubleHandler","doubleCurrentHand","hitHandler","hitCurrentHand","standHandler","standCurrentHand","splitHandler","firstHand","secondHand","splice","splitCurrentHand","surrenderHandler","surrenderCurrentHand","NavigationContainer","ref","StatusBar","hidden","Navigator","screenOptions","headerShown","cardStyle","Screen","component","_gameConfig"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,wECU/BC,EAWAC,EAaAC,ECxBAC,EAUAC,EAQAC,EC1BAC,EAoBAC,EAUAC,E,kJFtBAR,K,eAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAWAC,K,QAAAA,E,QAAAA,E,UAAAA,E,SAAAA,E,SAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,SAAAA,E,UAAAA,M,cAaAC,K,SAAAA,E,UAAAA,E,UAAAA,M,cCxBAC,K,+BAAAA,E,oBAAAA,E,0CAAAA,E,8BAAAA,E,qBAAAA,E,6BAAAA,E,uBAAAA,M,cAUAC,O,eAAAA,I,6BAAAA,I,+BAAAA,I,uCAAAA,I,sBAAAA,M,cAQAC,O,eAAAA,I,aAAAA,I,aAAAA,I,kBAAAA,M,cC1BAC,K,UAAAA,E,eAAAA,M,cAoBAC,K,0BAAAA,E,8BAAAA,E,wBAAAA,E,4BAAAA,E,iCAAAA,M,cAUAC,K,gBAAAA,E,cAAAA,E,uBAAAA,M,SCvBAC,EAqCAC,ECtCAC,E,wBDCAF,K,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,eAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,cAqCAC,K,sBAAAA,E,YAAAA,E,yBAAAA,E,yBAAAA,E,aAAAA,M,cCtCAC,K,wCAAAA,E,8BAAAA,E,wBAAAA,E,0BAAAA,E,8BAAAA,E,0CAAAA,E,8BAAAA,E,wBAAAA,E,cAAAA,E,sCAAAA,E,+BAAAA,M,KAcL,ICpBKC,ECFAC,EFsBCC,EAAmBH,EAAWI,O,SCpB/BH,K,0BAAAA,E,wCAAAA,E,0BAAAA,E,oCAAAA,E,wCAAAA,E,sCAAAA,E,8BAAAA,E,4BAAAA,E,kCAAAA,E,8BAAAA,E,qCAAAA,M,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","file":"static/js/app.d7f3850e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/failure.497d59f1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/success.dc863917.mp3\";","module.exports = __webpack_public_path__ + \"static/media/card-slide.d80ce25b.mp3\";","import { Dictionary } from './dictionary';\r\n\r\nexport interface Card {\r\n    isBlueCard: boolean;\r\n    isGoldCard: boolean;\r\n    isHoleCard?: boolean;\r\n    suit: CardSuit;\r\n    symbol: CardSymbol;\r\n}\r\n\r\nexport enum CardSuit {\r\n    clubs = '\\u2663',\r\n    diamonds = '\\u2666',\r\n    hearts = '\\u2665',\r\n    spades = '\\u2660'\r\n}\r\n\r\nexport type CardSymbol = SimpleCardSymbol | SpecialCardSymbol;\r\n\r\nexport type CardValues = Dictionary<number[], CardSymbol>;\r\n\r\nexport enum SimpleCardSymbol {\r\n    Ace = 'A',\r\n    Two = '2',\r\n    Three = '3',\r\n    Four = '4',\r\n    Five = '5',\r\n    Six = '6',\r\n    Seven = '7',\r\n    Eight = '8',\r\n    Nine = '9',\r\n    Ten = '10'\r\n}\r\n\r\nexport enum SpecialCardSymbol {\r\n    Jack = 'J',\r\n    Queen = 'Q',\r\n    King = 'K'\r\n}\r\n\r\nexport type TenPointsCardSymbol = SimpleCardSymbol.Ten | SpecialCardSymbol;\r\n","export interface CasinoRules {\r\n    [CasinoRulesKeys.blackjackPeek]: boolean;\r\n    [CasinoRulesKeys.doubling]: Doubling;\r\n    [CasinoRulesKeys.doublingAfterSplit]: boolean;\r\n    [CasinoRulesKeys.hitSplitAces]: boolean;\r\n    [CasinoRulesKeys.holeCard]: boolean;\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber;\r\n    [CasinoRulesKeys.surrender]: boolean;\r\n}\r\n\r\nexport enum CasinoRulesKeys {\r\n    blackjackPeek = 'Blackjack Peek',\r\n    doubling = 'Doubling',\r\n    doublingAfterSplit = 'Doubling after split',\r\n    hitSplitAces = 'Hit split aces',\r\n    holeCard = 'Hole card',\r\n    splitsNumber = 'Splits number',\r\n    surrender = 'Surrender'\r\n}\r\n\r\nexport enum Doubling {\r\n    none = 0,\r\n    tenToEleven = 1,\r\n    nineToEleven = 2,\r\n    nineToElevenSoft = 3,\r\n    anyPair = 4\r\n}\r\n\r\nexport enum SplitsNumber {\r\n    none = 0,\r\n    one = 1,\r\n    two = 2,\r\n    three = 3\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\n\r\nexport enum BaseDecisions {\r\n    hit = 'Hit',\r\n    stand = 'Stand'\r\n}\r\n\r\nexport interface DecisionEvaluation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    dynamicDecision: DynamicDecision;\r\n    handName: string;\r\n    isHit: boolean;\r\n}\r\n\r\nexport interface DynamicConditions {\r\n    canDouble: boolean;\r\n    canSplit: boolean;\r\n    canSurrender: boolean;\r\n}\r\n\r\nexport type DynamicDecision = BaseDecisions | DynamicDecisions;\r\n\r\nexport enum DynamicDecisions {\r\n    double_hit = 'Double / Hit',\r\n    double_stand = 'Double / Stand',\r\n    split_hit = 'Split / Hit',\r\n    split_stand = 'Split / Stand',\r\n    surrender_hit = 'Surrender / Hit'\r\n}\r\n\r\nexport type PlayerDecision = BaseDecisions | PlayerDecisions;\r\n\r\nexport enum PlayerDecisions {\r\n    double = 'Double',\r\n    split = 'Split',\r\n    surrender = 'Surrender'\r\n}\r\n","import { Card } from './card';\r\n\r\nexport interface Hand {\r\n    bet: number;\r\n    cards: Card[];\r\n    outcome?: string;\r\n    values: number[];\r\n}\r\n\r\nexport enum HandCode {\r\n    Split2s = '2,2',\r\n    Split3s = '3,3',\r\n    Split4s = '4,4',\r\n    Split5s = '5,5',\r\n    Split6s = '6,6',\r\n    Split7s = '7,7',\r\n    Split8s = '8,8',\r\n    Split9s = '9,9',\r\n    Split10s = '10,10',\r\n    SplitAs = 'A,A',\r\n    Soft13 = '3/13',\r\n    Soft14 = '4/14',\r\n    Soft15 = '5/15',\r\n    Soft16 = '6/16',\r\n    Soft17 = '7/17',\r\n    Soft18 = '8/18',\r\n    Soft19 = '9/19',\r\n    Soft20 = '10/20',\r\n    Hard5 = '5',\r\n    Hard6 = '6',\r\n    Hard7 = '7',\r\n    Hard8 = '8',\r\n    Hard9 = '9',\r\n    Hard10 = '10',\r\n    Hard11 = '11',\r\n    Hard12 = '12',\r\n    Hard13 = '13',\r\n    Hard14 = '14',\r\n    Hard15 = '15',\r\n    Hard16 = '16',\r\n    Hard17 = '17',\r\n    Hard18 = '18',\r\n    Hard19 = '19',\r\n    Hard20 = '20'\r\n}\r\n\r\nexport enum HandOutcome {\r\n    blackjack = 'Blackjack',\r\n    bust = 'Bust',\r\n    dealerWins = 'Dealer wins',\r\n    playerWins = 'Player wins',\r\n    push = 'Push'\r\n}\r\n","import { Route } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { TrainingHand } from './training-hand';\r\n\r\nexport type AppNavigation = StackNavigationProp<RouteParams>;\r\n\r\nexport type AppRoute<T extends RouteNames> = Route<T, RouteParams[T]>;\r\n\r\nexport enum RouteNames {\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    blueCardsInfo = 'blueCardsInfo',\r\n    configMenu = 'configMenu',\r\n    failedHands = 'failedHands',\r\n    goldHandsInfo = 'goldHandsInfo',\r\n    goldHandsLevelsInfo = 'goldHandsLevelsInfo',\r\n    handDecisions = 'handDecisions',\r\n    onboarding = 'onboarding',\r\n    table = 'table',\r\n    trainingCompleted = 'trainingCompleted',\r\n    trainingHands = 'trainingHands'\r\n}\r\n\r\nexport const initialRouteName = RouteNames.table;\r\n\r\nexport type RouteParams = {\r\n    [RouteNames.basicStrategyTable]: undefined;\r\n    [RouteNames.blueCardsInfo]: undefined;\r\n    [RouteNames.configMenu]: undefined;\r\n    [RouteNames.failedHands]: undefined;\r\n    [RouteNames.goldHandsInfo]: undefined;\r\n    [RouteNames.goldHandsLevelsInfo]: undefined;\r\n    [RouteNames.handDecisions]: {\r\n        trainingHand: TrainingHand;\r\n    };\r\n    [RouteNames.onboarding]: undefined;\r\n    [RouteNames.table]: undefined;\r\n    [RouteNames.trainingCompleted]: undefined;\r\n    [RouteNames.trainingHands]: undefined;\r\n};\r\n","import { AppNavigation } from './navigation';\r\n\r\nexport enum OnBoardingSections {\r\n    appSettings = 'appSettings',\r\n    basicStrategyTable = 'basicStrategyTable',\r\n    casinoRules = 'casinoRules',\r\n    configMenuButton = 'configMenuButton',\r\n    precisionIndicator = 'precisionIndicator',\r\n    progressIndicator = 'progressIndicator',\r\n    resetTraining = 'resetTraining',\r\n    tableActions = 'tableActions',\r\n    tableDealerHand = 'tableDealerHand',\r\n    tableFeedback = 'tableFeedback',\r\n    tablePlayerHands = 'tablePlayerHands'\r\n}\r\n\r\nexport type OnBoardingStep = {\r\n    activeSection?: OnBoardingSections;\r\n    hideNextButton?: boolean;\r\n    hidePreviousButton?: boolean;\r\n    id: number;\r\n    load: (navigation: AppNavigation) => void;\r\n    text: string;\r\n};\r\n","export enum Phases {\r\n    dealer = 'dealer',\r\n    finished = 'finished',\r\n    player = 'player'\r\n}\r\n","import { SimpleCardSymbol } from './card';\r\nimport { Hand, HandCode } from './hand';\r\n\r\nexport interface TrainingPair {\r\n    dealer: Hand;\r\n    player: Hand;\r\n}\r\n\r\nexport interface TrainingPairRepresentation {\r\n    dealerSymbol: SimpleCardSymbol;\r\n    handCode: HandCode;\r\n}\r\n\r\nexport enum TrainingPairStatus {\r\n    untrained = 0,\r\n    passed = 1,\r\n    failed = 2\r\n}\r\n","import AsyncStorage from '@react-native-community/async-storage';\r\nimport { CasinoRulesKeys, GameConfig, TrainingProgress } from './types';\r\n\r\nconst gameConfigKey = 'gameConfig';\r\nconst hasCompletedOnboardingKey = 'hasCompletedOnboarding';\r\nconst playerEarningsKey = 'playerEarnings';\r\nconst trainingProgressKey = 'trainedHands';\r\n\r\nexport const getGameConfig = (currentGameConfig: GameConfig) =>\r\n    AsyncStorage.getItem(gameConfigKey)\r\n        .then<GameConfig>((value) => {\r\n            const storedGameConfig: Partial<GameConfig> | undefined = value && JSON.parse(value);\r\n            return {\r\n                casinoRules:\r\n                    storedGameConfig && storedGameConfig.casinoRules !== undefined\r\n                        ? {\r\n                              [CasinoRulesKeys.blackjackPeek]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.blackjackPeek\r\n                                        ],\r\n                              [CasinoRulesKeys.doubling]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.doubling]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.doubling],\r\n                              [CasinoRulesKeys.doublingAfterSplit]:\r\n                                  storedGameConfig.casinoRules[\r\n                                      CasinoRulesKeys.doublingAfterSplit\r\n                                  ] !== undefined\r\n                                      ? storedGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ]\r\n                                      : currentGameConfig.casinoRules[\r\n                                            CasinoRulesKeys.doublingAfterSplit\r\n                                        ],\r\n                              [CasinoRulesKeys.hitSplitAces]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.hitSplitAces],\r\n                              [CasinoRulesKeys.holeCard]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.holeCard]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.holeCard],\r\n                              [CasinoRulesKeys.splitsNumber]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.splitsNumber]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.splitsNumber],\r\n                              [CasinoRulesKeys.surrender]:\r\n                                  storedGameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                                  undefined\r\n                                      ? storedGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                                      : currentGameConfig.casinoRules[CasinoRulesKeys.surrender]\r\n                          }\r\n                        : currentGameConfig.casinoRules,\r\n                goldHandsLevels:\r\n                    storedGameConfig && storedGameConfig.goldHandsLevels !== undefined\r\n                        ? storedGameConfig.goldHandsLevels\r\n                        : currentGameConfig.goldHandsLevels,\r\n                isDealerAnimationEnabled:\r\n                    storedGameConfig && storedGameConfig.isDealerAnimationEnabled !== undefined\r\n                        ? storedGameConfig.isDealerAnimationEnabled\r\n                        : currentGameConfig.isDealerAnimationEnabled,\r\n                isSoundEnabled:\r\n                    storedGameConfig && storedGameConfig.isSoundEnabled !== undefined\r\n                        ? storedGameConfig.isSoundEnabled\r\n                        : currentGameConfig.isSoundEnabled,\r\n                useBlueCards:\r\n                    storedGameConfig && storedGameConfig.useBlueCards !== undefined\r\n                        ? storedGameConfig.useBlueCards\r\n                        : currentGameConfig.useBlueCards,\r\n                useGoldHands:\r\n                    storedGameConfig && storedGameConfig.useGoldHands !== undefined\r\n                        ? storedGameConfig.useGoldHands\r\n                        : currentGameConfig.useGoldHands\r\n            };\r\n        })\r\n        .catch(() => currentGameConfig);\r\n\r\nexport const getHasCompletedOnboarding = () =>\r\n    AsyncStorage.getItem(hasCompletedOnboardingKey)\r\n        .then<boolean>((value) => (value ? JSON.parse(value) : false))\r\n        .catch(() => false);\r\n\r\nexport const getPlayerEarnings = () =>\r\n    AsyncStorage.getItem(playerEarningsKey)\r\n        .then<number>((value) => (value ? parseInt(value) : 0))\r\n        .catch(() => 0);\r\n\r\nexport const getTrainingProgress = () =>\r\n    AsyncStorage.getItem(trainingProgressKey)\r\n        .then<TrainingProgress>((value) => (value ? JSON.parse(value) : undefined))\r\n        .catch(() => undefined);\r\n\r\nexport const updateGameConfig = (gameConfig: GameConfig) => {\r\n    AsyncStorage.setItem(gameConfigKey, JSON.stringify(gameConfig)).catch(() => {});\r\n};\r\n\r\nexport const updateHasCompletedOnboarding = (hasCompletedOnboarding: boolean) => {\r\n    AsyncStorage.setItem(\r\n        hasCompletedOnboardingKey,\r\n        JSON.stringify(hasCompletedOnboarding)\r\n    ).catch(() => {});\r\n};\r\n\r\nexport const updatePlayerEarnings = (playerEarnings: number) => {\r\n    AsyncStorage.setItem(playerEarningsKey, JSON.stringify(playerEarnings)).catch(() => {});\r\n};\r\n\r\nexport const updateTrainingProgress = (TrainingProgress: TrainingProgress) => {\r\n    AsyncStorage.setItem(trainingProgressKey, JSON.stringify(TrainingProgress)).catch(() => {});\r\n};\r\n","import { BaseDecisions, Dictionary, DynamicDecisions, PlayerDecisions } from './types';\r\n\r\nexport const doubleColor = '#a1a669';\r\nexport const hitColor = '#428bca';\r\nexport const splitColor = '#5cb85c';\r\nexport const standColor = '#46b8da';\r\nexport const surrenderColor = '#8f6088';\r\n\r\nexport const dangerColor = '#dc3545';\r\nexport const warningColor = '#ffc107';\r\n\r\nexport const tableColor = '#088446';\r\n\r\nexport const colors: Dictionary<string, BaseDecisions | DynamicDecisions | PlayerDecisions> = {\r\n    [BaseDecisions.hit]: hitColor,\r\n    [BaseDecisions.stand]: standColor,\r\n    [DynamicDecisions.double_hit]: doubleColor,\r\n    [DynamicDecisions.double_stand]: doubleColor,\r\n    [DynamicDecisions.split_hit]: splitColor,\r\n    [DynamicDecisions.split_stand]: splitColor,\r\n    [DynamicDecisions.surrender_hit]: surrenderColor,\r\n    [PlayerDecisions.double]: doubleColor,\r\n    [PlayerDecisions.split]: splitColor,\r\n    [PlayerDecisions.surrender]: surrenderColor\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, initialRouteName, RouteNames } from '../../types';\r\n\r\nexport interface ConfigButtonProps {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nexport const ConfigButton: React.FC<ConfigButtonProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          if (props.routeName === initialRouteName) {\r\n                              props.navigation.navigate(RouteNames.configMenu);\r\n                          } else {\r\n                              props.navigation.goBack();\r\n                          }\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {props.routeName === initialRouteName ? (\r\n                <React.Fragment>\r\n                    <Svg height={24} viewBox=\"340 140 280 279.416\" width={24}>\r\n                        <Path\r\n                            fill=\"white\"\r\n                            d=\"M620,305.666v-51.333l-31.5-5.25c-2.333-8.75-5.833-16.917-9.917-23.917L597.25,199.5l-36.167-36.75l-26.25,18.083\r\n\tc-7.583-4.083-15.75-7.583-23.916-9.917L505.667,140h-51.334l-5.25,31.5c-8.75,2.333-16.333,5.833-23.916,9.916L399.5,163.333\r\n\tL362.75,199.5l18.667,25.666c-4.083,7.584-7.583,15.75-9.917,24.5l-31.5,4.667v51.333l31.5,5.25\r\n\tc2.333,8.75,5.833,16.334,9.917,23.917l-18.667,26.25l36.167,36.167l26.25-18.667c7.583,4.083,15.75,7.583,24.5,9.917l5.25,30.916\r\n\th51.333l5.25-31.5c8.167-2.333,16.333-5.833,23.917-9.916l26.25,18.666l36.166-36.166l-18.666-26.25\r\n\tc4.083-7.584,7.583-15.167,9.916-23.917L620,305.666z M480,333.666c-29.75,0-53.667-23.916-53.667-53.666s24.5-53.667,53.667-53.667\r\n\tS533.667,250.25,533.667,280S509.75,333.666,480,333.666z\"\r\n                        />\r\n                    </Svg>\r\n                    {props.areGoldHandsBlockingProgress && props.progress < 100 && (\r\n                        <View\r\n                            style={{\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                bottom: 8\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'black', fontWeight: 'bold' }}>⚠️</Text>\r\n                        </View>\r\n                    )}\r\n                </React.Fragment>\r\n            ) : (\r\n                <Svg height={24} viewBox=\"0 0 352 512\" width={24}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n                    />\r\n                </Svg>\r\n            )}\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text } from 'react-native';\r\nimport Svg, { G, Path } from 'react-native-svg';\r\nimport { dangerColor, splitColor } from '../../constants';\r\n\r\nexport interface EarningsIndicatorProps {\r\n    earnings: number;\r\n}\r\n\r\nexport const EarningsIndicator: React.FC<EarningsIndicatorProps> = (props) => {\r\n    const earningsColor =\r\n        props.earnings > 0 ? splitColor : props.earnings < 0 ? dangerColor : 'white';\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text style={{ color: earningsColor, fontSize: 20 }}>\r\n                {`${props.earnings > 0 ? '+' : ''}${props.earnings}`}\r\n            </Text>\r\n            <Svg height={24} viewBox=\"0 0 468 468\" width={24} style={{ marginTop: 2 }}>\r\n                <G transform=\"translate(0,468) scale(0.078000,-0.078000)\">\r\n                    <Path\r\n                        fill={earningsColor}\r\n                        d=\"M2600 5595 c0 -237 -3 -305 -12 -305 -7 0 -63 -5 -125 -10 -140 -12\r\n                    -299 -49 -398 -91 -11 -4 -49 -20 -85 -35 -304 -124 -635 -421 -789 -706 -33\r\n                    -63 -80 -169 -88 -202 -35 -143 -41 -258 -23 -421 37 -323 180 -591 420 -785\r\n                    77 -62 83 -66 116 -87 28 -18 244 -126 279 -140 27 -10 103 -36 115 -38 19 -5\r\n                    100 -27 120 -35 59 -20 254 -55 418 -75 l52 -7 0 -515 0 -516 -82 6 c-76 5\r\n                    -198 30 -223 45 -5 4 -12 7 -15 8 -71 14 -269 163 -285 215 -4 11 -10 19 -14\r\n                    19 -12 0 -75 133 -95 200 l-17 55 -410 -3 -410 -2 6 -63 c17 -165 65 -343 132\r\n                    -487 26 -54 99 -185 115 -205 4 -5 27 -35 51 -65 72 -93 202 -215 327 -306 60\r\n                    -44 244 -154 257 -154 5 0 25 -9 44 -19 34 -18 167 -63 264 -90 62 -17 188\r\n                    -31 276 -31 l79 0 0 -325 0 -325 375 0 375 0 2 332 3 333 85 6 c121 9 341 58\r\n                    430 96 8 3 18 7 22 7 3 1 10 4 14 8 4 5 13 8 20 8 16 0 162 70 249 119 39 22\r\n                    77 44 85 48 8 4 20 12 27 17 7 6 36 27 64 46 70 47 221 181 267 237 20 24 47\r\n                    57 60 71 36 42 132 200 162 267 104 232 133 496 79 720 -11 44 -21 89 -24 100\r\n                    -7 28 -110 235 -132 264 -193 254 -402 410 -708 524 -138 51 -348 95 -495 102\r\n                    -58 3 -129 8 -158 11 l-52 5 2 502 3 502 58 -2 c154 -5 367 -94 455 -188 66\r\n                    -71 103 -148 110 -230 l5 -65 431 0 432 0 -4 38 c-4 47 -29 151 -52 222 -141\r\n                    430 -441 791 -800 962 -133 63 -169 78 -235 94 -5 2 -44 12 -86 23 -42 11\r\n                    -123 25 -180 31 -57 6 -112 13 -121 16 -17 5 -18 28 -18 290 l0 284 -375 0\r\n                    -375 0 0 -305z m0 -1585 l0 -450 -57 0 c-52 1 -84 6 -159 23 -30 7 -158 59\r\n                    -164 66 -3 3 -18 13 -35 21 -54 28 -151 128 -186 192 -32 59 -34 69 -34 158 0\r\n                    69 6 111 20 154 56 167 269 281 528 285 l87 1 0 -450z m975 -1485 c219 -17\r\n                    399 -118 472 -266 46 -93 48 -281 3 -367 -80 -153 -329 -259 -612 -261 l-88\r\n                    -1 0 448 c0 247 3 452 7 456 4 4 37 4 73 2 36 -3 101 -8 145 -11z\"\r\n                    />\r\n                </G>\r\n            </Svg>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface PrecisionIndicatorProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    precision: number;\r\n}\r\n\r\nexport const PrecisionIndicator: React.FC<PrecisionIndicatorProps> = (props) => {\r\n    const precision = Math.floor(props.precision * 1000) / 10;\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.failedHands);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{precision}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M784.5,368.7L990,163.2l-166.9,11.6L834.7,7.9L629.2,213.4l-9,128.5L499.6,462.6c-10.1,0.1-20.1,3.9-27.8,11.6c-15.5,15.5-15.5,40.6,0,56.1c15.5,15.5,40.6,15.5,56.1,0c9.6-9.6,13.3-23,10.9-35.4L656,377.7L784.5,368.7z M671.4,232.6l112-112l-7.1,101l101-7l-112,112l-101,7L671.4,232.6z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M967.8,357.1l-35.6,33.2c10.7,41.4,15.4,84.1,13.9,127.5c-8.6,246-215.7,439.2-461.7,430.6c-246-8.6-439.2-215.7-430.6-461.7c8.6-246,215.7-439.2,461.7-430.6c28.6,1,56.9,5,84.6,11.4l37.7-35.2c-39.3-11.5-79.9-18.2-120.9-19.6C247,3.3,19.7,215.2,10.3,485.2C0.9,755.1,212.8,982.3,482.7,991.8c269.9,9.4,497.2-202.5,506.6-472.4C991.3,463.9,984,409.5,967.8,357.1z\"\r\n                    />\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M698.1,426.1c7,18.4,11.6,37.7,13.3,57.6c10.2,116.6-76.4,219.9-193.1,230.1C401.7,724,298.5,637.4,288.3,520.8c-10.2-116.6,76.4-219.9,193-230.1c25.8-2.3,51.7,0.3,76.3,7.3l-4-45.6c-24.8-5.3-50.5-7.1-76.1-4.8C337.1,259.8,232.8,384.1,245,524.5C257.3,665,381.6,769.3,522.1,757C662.6,744.7,766.9,620.5,754.6,480c-1.7-19.8-5.8-39.1-11.9-57.7L698.1,426.1z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport Svg, { Path } from 'react-native-svg';\r\nimport { AppNavigation, RouteNames } from '../../types';\r\n\r\nexport interface NavBarProps {\r\n    isEnabled: boolean;\r\n    navigation: AppNavigation;\r\n    progress: number;\r\n}\r\n\r\nexport const ProgressIndicator: React.FC<NavBarProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={\r\n                props.isEnabled\r\n                    ? () => {\r\n                          props.navigation.navigate(RouteNames.trainingHands);\r\n                      }\r\n                    : undefined\r\n            }\r\n            style={{\r\n                alignItems: 'center',\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <View style={{ flexDirection: 'row' }}>\r\n                <Text style={{ color: 'white', fontSize: 20 }}>{props.progress}%</Text>\r\n                <Svg height={28} viewBox=\"0 0 1000 1000\" width={28} style={{ marginLeft: 4 }}>\r\n                    <Path\r\n                        fill=\"white\"\r\n                        d=\"M819.5,386.3h-2.5c-18.4,0-33.4,5.3-48,14.3c-12.7-37.1-45-63.7-86.6-63.7c-18.4,0-35.9,5.3-50.4,14.3c-12.7-37-45-63.7-86.6-63.7c-16.2,0-31.3,4.1-44.7,11.2v-95.3c0-51.9-39.3-94-91.6-94s-94.7,42.1-94.7,94v365l-57.5-57.3c-37-36.7-102.4-31.5-133.9,0s-52.1,94.9-7,140l264.5,262.7c5.5,5.4,11.5,9.9,17.8,13.8c48.2,39.3,103.5,62.6,220.3,62.6c266.9,0,291.6-144,291.6-321.6v-188C910.1,428.4,871.8,386.3,819.5,386.3z M860.3,668.4c0,150.3-0.7,272.1-241.8,272.1c-102.1,0-163.4-22.8-209.9-68.9L158.3,622.9c-22.2-22.2-16.6-50.5,1.6-68.6c18.1-18.1,51.4-18.8,68.9-1.4c0,0,43.9,43.7,81.8,81.3c28.6,28.5,53.8,53.5,53.8,53.5V213.2c0-24.6,20.1-44.5,44.9-44.5c24.8,0,41.7,19.9,41.7,44.5V515h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.4-0.5-5h0.5V391.3c0-24.6,17.9-44.5,42.7-44.5c0,0,43.9-0.6,43.9,44.5v163.3h0.5c-0.3,1.6-0.5,3.3-0.5,5c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.9-11.1,24.9-24.7c0-1.7-0.2-3.3-0.5-5h0.5V440.8c0-24.6,17.6-44.5,42.4-44.5c0,0,44.8,2.8,44.8,44.5v143.5h0.5c-0.3,1.6-0.5,3.3-0.5,4.9c0,13.7,11.2,24.7,24.9,24.7c13.8,0,24.3-11.1,24.3-24.7c0-1.7-0.2-3.3-0.5-4.9h0.5v-98c0-24.6,18.5-44.5,43.3-44.5c0,0,43.4-1.8,43.4,44.5C860.3,486.3,860.3,628.4,860.3,668.4z M277.5,343.4v-83.1c-7.9-17.7-12.4-37.3-12.4-58c0-78.8,63.9-142.7,142.7-142.7s142.7,63.9,142.7,142.7c0,10.8-1.3,21.2-3.6,31.3c17.9,0.7,34.1,8.1,45.9,20.1c4.6-16.4,7.3-33.5,7.3-51.4C600,96.1,513.9,10,407.7,10S215.4,96.1,215.4,202.3C215.4,258.1,239.4,308.3,277.5,343.4z\"\r\n                    />\r\n                </Svg>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import { OnBoardingSections, OnBoardingStep, RouteNames } from '../types';\r\n\r\nexport const onBoardingSteps: OnBoardingStep[] = [\r\n    {\r\n        activeSection: OnBoardingSections.tableActions,\r\n        hideNextButton: true,\r\n        id: 1,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click Train to start training a random hand'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tablePlayerHands,\r\n        hidePreviousButton: true,\r\n        id: 2,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This is your hand'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tableDealerHand,\r\n        id: 3,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: \"This is the dealer's hand\"\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tableActions,\r\n        hideNextButton: true,\r\n        hidePreviousButton: true,\r\n        id: 4,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Chose an action for each of your hands'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.tableFeedback,\r\n        hidePreviousButton: true,\r\n        id: 5,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'See whether you chose the right action or not'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.progressIndicator,\r\n        id: 6,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of trained hands'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.progressIndicator,\r\n        id: 7,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.trainingHands);\r\n        },\r\n        text: 'Click on it to train hands or view their status'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.precisionIndicator,\r\n        id: 8,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'This indicator shows the % of passed hands'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.precisionIndicator,\r\n        id: 9,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.failedHands);\r\n        },\r\n        text: \"Click on it to see the hands you've failed\"\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.configMenuButton,\r\n        id: 10,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.table);\r\n        },\r\n        text: 'Click here to access the configuration menu'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.basicStrategyTable,\r\n        id: 11,\r\n        load: (navigation) => {\r\n            navigation.navigate(RouteNames.configMenu);\r\n        },\r\n        text: 'View and memorize the basic strategy table'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.casinoRules,\r\n        id: 12,\r\n        load: () => {},\r\n        text: 'Chose the casino rules you want to train with'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.appSettings,\r\n        id: 13,\r\n        load: () => {},\r\n        text: 'Speed up your training with additional options'\r\n    },\r\n    {\r\n        activeSection: OnBoardingSections.resetTraining,\r\n        id: 14,\r\n        load: () => {},\r\n        text: 'Start training over and master basic strategy'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport { StyleProp, View, ViewStyle } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { OnBoardingSections } from '../types';\r\n\r\nexport interface OnBoardingSectionProps {\r\n    isHighlighted?: OnBoardingSections | boolean;\r\n    onBoardingStep: number;\r\n    style?: StyleProp<ViewStyle> | ((isHighlighted: boolean) => StyleProp<ViewStyle>);\r\n}\r\n\r\nexport const OnBoardingSection: React.FC<OnBoardingSectionProps> = (props) => {\r\n    const isOnboardingActive = props.onBoardingStep > -1;\r\n    const isHighlighted =\r\n        isOnboardingActive &&\r\n        (typeof props.isHighlighted === 'boolean'\r\n            ? props.isHighlighted\r\n            : props.isHighlighted !== undefined &&\r\n              onBoardingSteps[props.onBoardingStep] &&\r\n              onBoardingSteps[props.onBoardingStep].activeSection === props.isHighlighted);\r\n    const style =\r\n        props.style && typeof props.style === 'function' ? props.style(isHighlighted) : props.style;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                width: '100%',\r\n                ...(style as {})\r\n            }}\r\n        >\r\n            {props.children}\r\n            {isOnboardingActive && !isHighlighted && (\r\n                <View\r\n                    style={{\r\n                        backgroundColor: 'black',\r\n                        opacity: 0.5,\r\n                        top: 0,\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        right: 0,\r\n                        left: 0\r\n                    }}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n","import React, { useEffect, useMemo } from 'react';\r\nimport { Animated, View } from 'react-native';\r\nimport { tableColor } from '../constants';\r\nimport { AppNavigation, OnBoardingSections, Player } from '../types';\r\nimport { ConfigButton } from './nav-bar-items/config-button';\r\nimport { EarningsIndicator } from './nav-bar-items/earnings-indicator';\r\nimport { PrecisionIndicator } from './nav-bar-items/precision-indicator';\r\nimport { ProgressIndicator } from './nav-bar-items/progress-indicator';\r\nimport { OnBoardingSection } from './onboarding-section';\r\n\r\nexport interface NavBarProps {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    attemptedTrainingPairs: number;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    player: Player;\r\n    passedTrainingPairs: number;\r\n    progress: number;\r\n    routeName?: string;\r\n}\r\n\r\nconst shakeAmplitude = 6;\r\nconst shakeDuration = 40;\r\nconst useNativeDriver = true;\r\n\r\nconst animateIndicator = (position: Animated.Value) => {\r\n    Animated.sequence([\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: -shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: shakeAmplitude,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        }),\r\n        Animated.timing(position, {\r\n            toValue: 0,\r\n            duration: shakeDuration,\r\n            useNativeDriver\r\n        })\r\n    ]).start();\r\n};\r\n\r\nexport const NavBar: React.FC<NavBarProps> = (props) => {\r\n    const precision =\r\n        props.attemptedTrainingPairs > 0\r\n            ? props.passedTrainingPairs / props.attemptedTrainingPairs\r\n            : 0;\r\n\r\n    const earningsPosition = useMemo(() => new Animated.Value(0), []);\r\n    const precisionPosition = useMemo(() => new Animated.Value(0), []);\r\n    const progressPosition = useMemo(() => new Animated.Value(0), []);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(earningsPosition);\r\n    }, [props.player.cash]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(precisionPosition);\r\n    }, [precision]);\r\n\r\n    useEffect(() => {\r\n        animateIndicator(progressPosition);\r\n    }, [props.progress]);\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                height: 48,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    backgroundColor: 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '25%'\r\n                }}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'center',\r\n                        transform: [{ translateX: earningsPosition }]\r\n                    }}\r\n                >\r\n                    <EarningsIndicator earnings={props.player.cash} />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.precisionIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        alignItems: 'center',\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: precisionPosition }]\r\n                    }}\r\n                >\r\n                    <PrecisionIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        precision={precision}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.progressIndicator}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '30%'\r\n                })}\r\n            >\r\n                <Animated.View\r\n                    style={{\r\n                        alignItems: 'center',\r\n                        flexGrow: 1,\r\n                        transform: [{ translateX: progressPosition }]\r\n                    }}\r\n                >\r\n                    <ProgressIndicator\r\n                        isEnabled={props.onBoardingStep === -1}\r\n                        navigation={props.navigation}\r\n                        progress={props.progress}\r\n                    />\r\n                </Animated.View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.configMenuButton}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={(isHighlighted) => ({\r\n                    alignItems: 'center',\r\n                    backgroundColor: isHighlighted ? tableColor : 'black',\r\n                    height: '100%',\r\n                    justifyContent: 'center',\r\n                    width: '15%'\r\n                })}\r\n            >\r\n                <ConfigButton\r\n                    areGoldHandsBlockingProgress={props.areGoldHandsBlockingProgress}\r\n                    isEnabled={props.onBoardingStep === -1}\r\n                    navigation={props.navigation}\r\n                    progress={props.progress}\r\n                    routeName={props.routeName}\r\n                />\r\n            </OnBoardingSection>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\n\r\ninterface ButtonProps {\r\n    backgroundColor?: string;\r\n    height: number | string;\r\n    isEnabled: boolean;\r\n    marginBottom?: number;\r\n    marginTop?: number;\r\n    onPress: () => void;\r\n    text: string;\r\n    textColor?: string;\r\n    textSize?: number;\r\n    width: number | string;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = (props) => (\r\n    <TouchableOpacity\r\n        style={{\r\n            height: props.height,\r\n            marginBottom: props.marginBottom,\r\n            marginTop: props.marginTop,\r\n            width: props.width\r\n        }}\r\n        onPress={props.isEnabled ? props.onPress : undefined}\r\n    >\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                backgroundColor: props.backgroundColor,\r\n                height: '100%',\r\n                justifyContent: 'center',\r\n                opacity: props.isEnabled ? 1 : 0.4,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: props.textColor || 'white',\r\n                    fontSize: props.textSize || 20,\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                {props.text}\r\n            </Text>\r\n        </View>\r\n    </TouchableOpacity>\r\n);\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { Button } from './button';\r\n\r\ninterface OnboardingBarProps {\r\n    exitOnboarding: () => void;\r\n    nextStepHandler: () => void;\r\n    onBoardingStep: number;\r\n    previousStepHandler: () => void;\r\n}\r\n\r\nexport const OnboardingBar: React.FC<OnboardingBarProps> = (props) => {\r\n    const currentStep = onBoardingSteps[props.onBoardingStep];\r\n\r\n    return (\r\n        <View style={{ alignItems: 'center', backgroundColor: 'white', flexDirection: 'row' }}>\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep > 0 && !currentStep.hidePreviousButton && (\r\n                    <Button\r\n                        height={56}\r\n                        isEnabled={true}\r\n                        onPress={props.previousStepHandler}\r\n                        text=\"⬅️\"\r\n                        textColor=\"black\"\r\n                        textSize={24}\r\n                        width=\"100%\"\r\n                    />\r\n                )}\r\n            </View>\r\n\r\n            <View style={{ width: '70%' }}>\r\n                <Text style={{ color: 'black', fontSize: 20, padding: 16 }}>\r\n                    {currentStep.text}\r\n                </Text>\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                {props.onBoardingStep < onBoardingSteps.length - 1 &&\r\n                    !currentStep.hideNextButton && (\r\n                        <Button\r\n                            height={56}\r\n                            isEnabled={true}\r\n                            onPress={props.nextStepHandler}\r\n                            text=\"➡️\"\r\n                            textColor=\"black\"\r\n                            textSize={24}\r\n                            width=\"100%\"\r\n                        />\r\n                    )}\r\n            </View>\r\n\r\n            <View style={{ width: '10%' }}>\r\n                <Button\r\n                    height={56}\r\n                    isEnabled={true}\r\n                    onPress={props.exitOnboarding}\r\n                    text=\"❌\"\r\n                    textColor=\"black\"\r\n                    textSize={20}\r\n                    width=\"100%\"\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { Dictionary } from './types';\r\n\r\nexport const cartesianProduct = <T, U, R>(\r\n    firstArray: T[],\r\n    secondArray: U[],\r\n    elementBuilder: (t: T, u: U) => R\r\n): R[] => {\r\n    return firstArray.reduce<R[]>((product, x) => {\r\n        return product.concat(secondArray.map((y) => elementBuilder(x, y)));\r\n    }, []);\r\n};\r\n\r\nexport const getObjectKeys = <T extends string | number | symbol>(object: { [key in T]: any }) =>\r\n    Object.keys(object) as T[];\r\n\r\nexport const getRandomItem = <T>(items: T[]) =>\r\n    items[Math.round(Math.random() * (items.length - 1))];\r\n\r\nexport const playSound = (sound: Audio.Sound) =>\r\n    sound\r\n        .stopAsync() // In case is already playing and it hasn't finished yet\r\n        .catch(/* Failing to stop audio is not a critical issue */)\r\n        .then(() => sound.playAsync())\r\n        .catch(/* Failing to play audio is not a critical issue */);\r\n\r\nexport const removeDuplicates = (numbers: number[]): number[] => {\r\n    const numbersDictionary = numbers.reduce<Dictionary<number>>(\r\n        (dictionary, next) => ({ ...dictionary, [next]: next }),\r\n        {}\r\n    );\r\n    return Object.keys(numbersDictionary).map((x) => numbersDictionary[x]);\r\n};\r\n\r\nexport const shuffleArray = <T>(array: T[]) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n};\r\n","import {\r\n    Card,\r\n    CardSuit,\r\n    CardSymbol,\r\n    CardValues,\r\n    SimpleCardSymbol,\r\n    SpecialCardSymbol,\r\n    TenPointsCardSymbol\r\n} from '../types';\r\nimport { cartesianProduct, getObjectKeys, getRandomItem, removeDuplicates } from '../utils';\r\n\r\nconst cardsValue: CardValues = {\r\n    [SimpleCardSymbol.Ace]: [1, 11],\r\n    [SimpleCardSymbol.Two]: [2],\r\n    [SimpleCardSymbol.Three]: [3],\r\n    [SimpleCardSymbol.Four]: [4],\r\n    [SimpleCardSymbol.Five]: [5],\r\n    [SimpleCardSymbol.Six]: [6],\r\n    [SimpleCardSymbol.Seven]: [7],\r\n    [SimpleCardSymbol.Eight]: [8],\r\n    [SimpleCardSymbol.Nine]: [9],\r\n    [SimpleCardSymbol.Ten]: [10],\r\n    [SpecialCardSymbol.Jack]: [10],\r\n    [SpecialCardSymbol.Queen]: [10],\r\n    [SpecialCardSymbol.King]: [10]\r\n};\r\n\r\nconst suits = [CardSuit.clubs, CardSuit.diamonds, CardSuit.hearts, CardSuit.spades];\r\n\r\nconst symbols = getObjectKeys(cardsValue);\r\n\r\nconst deck = cartesianProduct(\r\n    suits,\r\n    symbols,\r\n    (suit, symbol): Card => ({ isBlueCard: false, isGoldCard: false, suit, symbol })\r\n);\r\n\r\nexport const getCardEffectiveValue = (card: Card): number => {\r\n    const values = getCardValues(card);\r\n    return values[values.length - 1];\r\n};\r\n\r\nexport const getCardsValues = (cards: Card[], options?: { peeking?: boolean }) => {\r\n    const cardsValues = cards\r\n        .filter((card) => options?.peeking || !card.isHoleCard)\r\n        .map((card) => getCardValues(card));\r\n    const cardsAggregatedValues = cardsValues.reduce(\r\n        (reducedValues, currentValues) =>\r\n            cartesianProduct(reducedValues, currentValues, (x, y) => x + y),\r\n        [0]\r\n    );\r\n    return removeDuplicates(cardsAggregatedValues);\r\n};\r\n\r\nconst getCardValues = (card: Card): number[] => cardsValue[card.symbol];\r\n\r\nexport const getRandomCard = (options?: { isHoleCard?: boolean }) => {\r\n    let randomCard = getRandomItem(deck);\r\n    if (options?.isHoleCard) {\r\n        randomCard = { ...randomCard, isHoleCard: true };\r\n    }\r\n    return randomCard;\r\n};\r\n\r\nexport const getRandomSuit = () => getRandomItem(suits);\r\n\r\nexport const revealHoleCard = (card: Card) => {\r\n    card.isHoleCard = false;\r\n};\r\n\r\nexport const simpleSymbolToSymbol = (simpleSymbol: SimpleCardSymbol): CardSymbol =>\r\n    simpleSymbol === SimpleCardSymbol.Ten ? getRandomItem(tenPointsSymbols) : simpleSymbol;\r\n\r\nexport const symbolToSimpleSymbol = (symbol: CardSymbol): SimpleCardSymbol =>\r\n    tenPointsSymbols.indexOf(symbol as SpecialCardSymbol) > -1\r\n        ? SimpleCardSymbol.Ten\r\n        : (symbol as SimpleCardSymbol);\r\n\r\nconst tenPointsSymbols: TenPointsCardSymbol[] = [\r\n    SimpleCardSymbol.Ten,\r\n    SpecialCardSymbol.Jack,\r\n    SpecialCardSymbol.Queen,\r\n    SpecialCardSymbol.King\r\n];\r\n\r\nexport const valueToSymbol = (number: number): CardSymbol =>\r\n    number === 10\r\n        ? getRandomItem(tenPointsSymbols)\r\n        : number === 1\r\n        ? SimpleCardSymbol.Ace\r\n        : (String(number) as CardSymbol);\r\n","import { CardSymbol, HandCode, SimpleCardSymbol } from '../types';\r\nimport { valueToSymbol, simpleSymbolToSymbol } from './card';\r\n\r\nexport const getHardHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const value = parseInt(handCode, 10);\r\n\r\n    const minValue = Math.max(2, value - 10);\r\n    const maxValue = Math.min(value - minValue, 10);\r\n\r\n    let firstValue = Math.floor(Math.random() * (maxValue - minValue) + minValue);\r\n    let secondValue = value - firstValue;\r\n\r\n    // If numbers are equal, we would be training a splittable hand. Change them when possible\r\n    // E.g. Transform a 7,7 (for 14) into a 6,8. Do not transform a 10,10 for 20\r\n    if (firstValue === secondValue && firstValue > minValue && firstValue < maxValue) {\r\n        firstValue++;\r\n        secondValue--;\r\n    }\r\n\r\n    return [valueToSymbol(firstValue), valueToSymbol(secondValue)];\r\n};\r\n\r\nexport const getSoftHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const handValues = handCode.split('/').map((s) => parseInt(s, 10));\r\n    const complementarySymbol = valueToSymbol(handValues[0] - 1);\r\n\r\n    // Make Ace the second card sometimes by randomly reversing the symbols\r\n    return Math.floor(Math.random() * 100) % 2\r\n        ? [complementarySymbol, SimpleCardSymbol.Ace]\r\n        : [SimpleCardSymbol.Ace, complementarySymbol];\r\n};\r\n\r\nexport const getSplitHandSymbols = (handCode: HandCode): CardSymbol[] => {\r\n    const splitSymbols = handCode.split(',') as SimpleCardSymbol[];\r\n    return splitSymbols.map(simpleSymbolToSymbol);\r\n};\r\n\r\nexport const isSoftHandCode = (handCode: HandCode) => handCode.includes('/');\r\n\r\nexport const isSplitHandCode = (handCode: HandCode) => handCode.includes(',');\r\n","import {\r\n    Card,\r\n    CardSymbol,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    Hand,\r\n    HandCode,\r\n    HandOutcome,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPairStatus,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomItem } from '../utils';\r\nimport {\r\n    getCardEffectiveValue,\r\n    getCardsValues,\r\n    getRandomCard,\r\n    getRandomSuit,\r\n    revealHoleCard,\r\n    symbolToSimpleSymbol,\r\n    valueToSymbol\r\n} from './card';\r\nimport {\r\n    getHardHandSymbols,\r\n    getSoftHandSymbols,\r\n    getSplitHandSymbols,\r\n    isSoftHandCode,\r\n    isSplitHandCode\r\n} from './hand-code';\r\n\r\nexport const areHandsSplitAces = (hands: Hand[]) =>\r\n    hands.length > 1 &&\r\n    hands[0].cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hands[1].cards[0].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const canBeDealerBlackjack = (hand: Hand) => {\r\n    const visibleCard = hand.cards[0];\r\n    const cardSymbol = symbolToSimpleSymbol(visibleCard.symbol);\r\n    return cardSymbol === SimpleCardSymbol.Ace || cardSymbol === SimpleCardSymbol.Ten;\r\n};\r\n\r\nexport const canDouble = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const handEffectiveValue = getHandEffectiveValue(hand);\r\n    const isHandWithTwoCards = hand.cards.length === 2;\r\n    const isSingleHand = hands.length === 1;\r\n\r\n    const contains9To11 = hand.values.some((handValue) => [9, 10, 11].indexOf(handValue) > -1);\r\n    const is10To11 = handEffectiveValue === 10 || handEffectiveValue === 11;\r\n    const is9To11 = handEffectiveValue === 9 || is10To11;\r\n\r\n    return (\r\n        isHandWithTwoCards &&\r\n        (casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToElevenSoft && contains9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven && is9To11) ||\r\n            (casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven && is10To11)) &&\r\n        (isSingleHand || casinoRules[CasinoRulesKeys.doublingAfterSplit]) &&\r\n        (!areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces])\r\n    );\r\n};\r\n\r\nexport const canHit = (hands: Hand[], casinoRules: CasinoRules) =>\r\n    !areHandsSplitAces(hands) || casinoRules[CasinoRulesKeys.hitSplitAces];\r\n\r\nexport const canSplit = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    hand.cards.length === 2 &&\r\n    getCardEffectiveValue(hand.cards[0]) === getCardEffectiveValue(hand.cards[1]) &&\r\n    casinoRules[CasinoRulesKeys.splitsNumber] >= handsNumber;\r\n\r\nexport const canSurrender = (hand: Hand, handsNumber: number, casinoRules: CasinoRules) =>\r\n    handsNumber === 1 && hand.cards.length === 2 && casinoRules[CasinoRulesKeys.surrender];\r\n\r\nexport const createDealerHand = (casinoRules: CasinoRules, dealerSymbol?: CardSymbol) => {\r\n    const dealerCards: Card[] = [\r\n        dealerSymbol\r\n            ? {\r\n                  isBlueCard: false,\r\n                  isGoldCard: true,\r\n                  suit: getRandomSuit(),\r\n                  symbol: dealerSymbol\r\n              }\r\n            : getRandomCard()\r\n    ];\r\n\r\n    if (casinoRules[CasinoRulesKeys.holeCard]) {\r\n        dealerCards.push(getRandomCard({ isHoleCard: true }));\r\n    }\r\n\r\n    return createHand(dealerCards);\r\n};\r\n\r\nexport const createHand = (cards: Card[], bet = 1): Hand => ({\r\n    bet,\r\n    cards: cards,\r\n    values: getCardsValues(cards)\r\n});\r\n\r\nexport const dealCard = (hand: Hand, card: Card) => {\r\n    hand.cards.push(card);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n\r\n// Called after player hitting, splitting or starting a split hand. It returns a card that\r\n// turns the current player hand into another untrained hand (against the current dealer card).\r\n// If there are no untrained hands (against the current dealer card) or no untrained hands can\r\n// be reached from the current player hand (e.g. a Hard 20), returns a random card\r\nexport const getCardForUntrainedHand = (\r\n    playerHand: Hand,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n): Card => {\r\n    const isPlayerHandSoft = playerHand.values.length > 1;\r\n    const playerHandValues = getCardsValues(playerHand.cards);\r\n\r\n    const valuesToUntrainedHands = Object.values(trainingHands)\r\n        .map((trainingHand) => {\r\n            const isHandUntrainedForDealerSymbol =\r\n                trainingProgress[trainingHand.code][dealerSymbol] === TrainingPairStatus.untrained;\r\n\r\n            let valueToReachThisHand: number;\r\n\r\n            if (isSplitHandCode(trainingHand.code)) {\r\n                // Untrained split hands can never be reached after user action\r\n                valueToReachThisHand = -1;\r\n            } else if (isSoftHandCode(trainingHand.code)) {\r\n                const currentHandMinValue = parseInt(trainingHand.code.split('/')[0], 10);\r\n                const softDifference = currentHandMinValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 3/13. Can reach 4/14+ but not 3/13- (equal or lower)\r\n                    valueToReachThisHand = softDifference > 0 ? softDifference : -1;\r\n                } else {\r\n                    // E.g. Player hand = 8. Can only 9/19 (soft hand)\r\n                    valueToReachThisHand = softDifference === 1 ? softDifference : -1;\r\n                }\r\n            } else {\r\n                const currentHandHardValue = parseInt(trainingHand.code, 10);\r\n                const hardDifference = currentHandHardValue - playerHandValues[0];\r\n\r\n                if (isPlayerHandSoft) {\r\n                    // E.g. Player hand = 5/15. Can reach 12-15 but not 11- (soft hand) neither\r\n                    // 16+ (soft hand)\r\n                    const makesSoftHand = playerHandValues[1] + hardDifference <= 21;\r\n                    valueToReachThisHand =\r\n                        !makesSoftHand && hardDifference > 1 && hardDifference <= 10\r\n                            ? hardDifference\r\n                            : -1;\r\n                } else {\r\n                    // E.g. Player hand = 7. Can reach 9-17 but not 7- (equal or lower),\r\n                    // 8 (soft hand), 14 (split hand) neither 18+ (out of scope)\r\n                    valueToReachThisHand =\r\n                        hardDifference > 1 && // Lower & Soft hand\r\n                        hardDifference <= 10 && // Out of scope\r\n                        hardDifference !== playerHandValues[0] // Split hand\r\n                            ? hardDifference\r\n                            : -1;\r\n                }\r\n            }\r\n\r\n            return isHandUntrainedForDealerSymbol && valueToReachThisHand > -1\r\n                ? valueToReachThisHand\r\n                : -1;\r\n        })\r\n        .filter((value) => value > -1);\r\n\r\n    const nextCard: Card =\r\n        valuesToUntrainedHands.length > 0\r\n            ? {\r\n                  isBlueCard: true,\r\n                  isGoldCard: false,\r\n                  suit: getRandomSuit(),\r\n                  symbol: valueToSymbol(getRandomItem(valuesToUntrainedHands))\r\n              }\r\n            : getRandomCard();\r\n\r\n    return nextCard;\r\n};\r\n\r\nexport const getHandEffectiveValue = (hand: Hand) => {\r\n    let effectiveValue = hand.values[0];\r\n    if (hand.values.some((v) => v < 22)) {\r\n        effectiveValue = [...hand.values].reverse().find((v) => v < 22)!;\r\n    }\r\n    return effectiveValue;\r\n};\r\n\r\nexport const getHandValidValues = (hand: Hand): number[] => {\r\n    return hand.values.some((v) => v < 22) ? hand.values.filter((v) => v < 22) : [hand.values[0]];\r\n};\r\n\r\nexport const handCodeToHand = (handCode: HandCode): Hand => {\r\n    const handSymbols = isSplitHandCode(handCode)\r\n        ? getSplitHandSymbols(handCode)\r\n        : isSoftHandCode(handCode)\r\n        ? getSoftHandSymbols(handCode)\r\n        : getHardHandSymbols(handCode);\r\n\r\n    return createHand(\r\n        handSymbols.map(\r\n            (symbol): Card => ({\r\n                isBlueCard: false,\r\n                isGoldCard: true,\r\n                suit: getRandomSuit(),\r\n                symbol\r\n            })\r\n        )\r\n    );\r\n};\r\n\r\nexport const handToHandCode = (hand: Hand): HandCode => {\r\n    const handSymbols = hand.cards.map((c) => symbolToSimpleSymbol(c.symbol));\r\n    const isSplitHand = handSymbols.length === 2 && handSymbols[0] === handSymbols[1];\r\n\r\n    return isSplitHand\r\n        ? (handSymbols.join(',') as HandCode)\r\n        : (getHandValidValues(hand).join('/') as HandCode);\r\n};\r\n\r\nexport const hasHoleCard = (hand: Hand) => hand.cards.length > 1 && hand.cards[1].isHoleCard;\r\n\r\nconst isAcesPair = (hand: Hand) =>\r\n    hand.cards.length === 2 &&\r\n    hand.cards[0].symbol === SimpleCardSymbol.Ace &&\r\n    hand.cards[1].symbol === SimpleCardSymbol.Ace;\r\n\r\nexport const isBlackjack = (hand: Hand, handsNumber: number) => {\r\n    return (\r\n        handsNumber === 1 &&\r\n        hand.cards.length === 2 &&\r\n        hand.values.length === 2 &&\r\n        hand.values[0] === 11 &&\r\n        hand.values[1] === 21\r\n    );\r\n};\r\n\r\nconst isBust = (hand: Hand) => {\r\n    return getHandEffectiveValue(hand) > 21;\r\n};\r\n\r\nexport const isDealerBlackjack = (hand: Hand) => {\r\n    const cardValues = getCardsValues(hand.cards, { peeking: true });\r\n    return (\r\n        hand.cards.length === 2 &&\r\n        cardValues.length === 2 &&\r\n        cardValues[0] === 11 &&\r\n        cardValues[1] === 21\r\n    );\r\n};\r\n\r\nexport const isFinished = (hand: Hand, hands: Hand[], casinoRules: CasinoRules) => {\r\n    const isAcesPairHand = isAcesPair(hand);\r\n    return (\r\n        getHandEffectiveValue(hand) >= 21 ||\r\n        (areHandsSplitAces(hands) &&\r\n            ((isAcesPairHand && !canSplit(hand, hands.length, casinoRules)) ||\r\n                (!isAcesPairHand && !casinoRules[CasinoRulesKeys.hitSplitAces])))\r\n    );\r\n};\r\n\r\nexport const resolveHand = (\r\n    playerHand: Hand,\r\n    handsNumber: number,\r\n    dealerHand: Hand\r\n): HandOutcome => {\r\n    const playerHandValue = getHandEffectiveValue(playerHand);\r\n    const dealerHandValue = getHandEffectiveValue(dealerHand!);\r\n    const handOutcome = isBust(playerHand)\r\n        ? HandOutcome.bust\r\n        : isBlackjack(playerHand, handsNumber) && isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.push\r\n        : isBlackjack(playerHand, handsNumber)\r\n        ? HandOutcome.blackjack\r\n        : isBlackjack(dealerHand!, handsNumber)\r\n        ? HandOutcome.dealerWins\r\n        : isBust(dealerHand!)\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue > dealerHandValue\r\n        ? HandOutcome.playerWins\r\n        : playerHandValue === dealerHandValue\r\n        ? HandOutcome.push\r\n        : HandOutcome.dealerWins;\r\n\r\n    playerHand.outcome = handOutcome;\r\n    return handOutcome;\r\n};\r\n\r\nexport const revealDealerHoleCard = (hand: Hand) => {\r\n    revealHoleCard(hand.cards[1]);\r\n    hand.values = getCardsValues(hand.cards);\r\n};\r\n","import {\r\n    Card,\r\n    Hand,\r\n    HandOutcome,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { createHand, dealCard, getCardForUntrainedHand, handToHandCode, resolveHand } from './hand';\r\n\r\nexport const createPlayer = (cash = 0): Player => ({\r\n    cash,\r\n    handIndex: 0,\r\n    hands: [],\r\n    lastActionHand: undefined\r\n});\r\n\r\nexport const hitCurrentHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(currentHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(currentHand, nextCard);\r\n};\r\n\r\nexport const doubleCurrentHand = (player: Player, card: Card) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    dealCard(currentHand, card);\r\n    player.cash -= currentHand.bet;\r\n    currentHand.bet *= 2;\r\n};\r\n\r\nexport const getCurrentHand = (player: Player): Hand => player.hands[player.handIndex];\r\n\r\nexport const initializeHands = (player: Player, initialHand: Hand) => {\r\n    player.cash -= initialHand.bet;\r\n    player.hands = [initialHand];\r\n    player.handIndex = 0;\r\n    player.lastActionHand = undefined;\r\n};\r\n\r\nexport const isLastHand = (player: Player) => player.hands.length - 1 <= player.handIndex;\r\n\r\nexport const resolveHands = (player: Player, dealerHand: Hand) => {\r\n    const earnings = player.hands.reduce((earnings, hand) => {\r\n        const handOutcome = resolveHand(hand, player.hands.length, dealerHand);\r\n        return (\r\n            earnings +\r\n            (handOutcome === HandOutcome.blackjack\r\n                ? hand.bet * 2.5\r\n                : handOutcome === HandOutcome.playerWins\r\n                ? hand.bet * 2\r\n                : handOutcome === HandOutcome.push\r\n                ? hand.bet\r\n                : 0)\r\n        );\r\n    }, 0);\r\n    player.cash += earnings;\r\n};\r\n\r\nexport const splitCurrentHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    const firstHand = createHand([currentHand.cards[0]]);\r\n    const secondHand = createHand([currentHand.cards[1]]);\r\n    player.cash -= secondHand.bet;\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(firstHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(firstHand, nextCard);\r\n    player.hands.splice(player.handIndex, 1, firstHand, secondHand);\r\n};\r\n\r\nexport const startNextHand = (\r\n    player: Player,\r\n    useBlueCards: boolean,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress\r\n) => {\r\n    player.handIndex++;\r\n    const nextHand = player.hands[player.handIndex];\r\n    const nextCard = useBlueCards\r\n        ? getCardForUntrainedHand(nextHand, dealerSymbol, trainingHands, trainingProgress)\r\n        : getRandomCard();\r\n    dealCard(nextHand, nextCard);\r\n};\r\n\r\nexport const standCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n};\r\n\r\nexport const surrenderCurrentHand = (player: Player) => {\r\n    const currentHand = getCurrentHand(player);\r\n    player.lastActionHand = handToHandCode(currentHand);\r\n    player.cash += currentHand.bet / 2;\r\n    player.hands.splice(player.handIndex, 1);\r\n};\r\n","import { SimpleCardSymbol, TrainingHandStatus, TrainingPairStatus } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nexport const allDealerSymbols: SimpleCardSymbol[] = [\r\n    SimpleCardSymbol.Two,\r\n    SimpleCardSymbol.Three,\r\n    SimpleCardSymbol.Four,\r\n    SimpleCardSymbol.Five,\r\n    SimpleCardSymbol.Six,\r\n    SimpleCardSymbol.Seven,\r\n    SimpleCardSymbol.Eight,\r\n    SimpleCardSymbol.Nine,\r\n    SimpleCardSymbol.Ten,\r\n    SimpleCardSymbol.Ace\r\n];\r\n\r\nexport const getUntrainedDealerSymbols = (trainingHandStatus: TrainingHandStatus) =>\r\n    getObjectKeys(trainingHandStatus).filter(\r\n        (dealerSymbol) => trainingHandStatus[dealerSymbol] !== TrainingPairStatus.passed\r\n    );\r\n","import { CasinoRules, CasinoRulesKeys, Doubling, SplitsNumber } from '../types';\r\n\r\nexport const getDefaultCasinoRules = (): CasinoRules => ({\r\n    [CasinoRulesKeys.blackjackPeek]: false,\r\n    [CasinoRulesKeys.doubling]: Doubling.nineToElevenSoft,\r\n    [CasinoRulesKeys.doublingAfterSplit]: true,\r\n    [CasinoRulesKeys.hitSplitAces]: false,\r\n    [CasinoRulesKeys.holeCard]: false,\r\n    [CasinoRulesKeys.splitsNumber]: SplitsNumber.three,\r\n    [CasinoRulesKeys.surrender]: false\r\n});\r\n","import {\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    HandDecisionSet,\r\n    HandDecisionSetGetters,\r\n    SimpleCardSymbol,\r\n    SplitsNumber\r\n} from '../types';\r\n\r\nconst alwaysHit: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n};\r\n\r\nconst alwaysStand: HandDecisionSet = {\r\n    [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Nine]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n    [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n};\r\n\r\nexport const getHandDecisionSetLevel = (decisionSet: HandDecisionSet) =>\r\n    Object.values(decisionSet).reduce<{\r\n        previousValue: string;\r\n        level: number;\r\n    }>(\r\n        (reduced, next) => {\r\n            return reduced.previousValue === next\r\n                ? reduced\r\n                : { previousValue: next, level: reduced.level + 1 };\r\n        },\r\n        {\r\n            previousValue: '',\r\n            level: 0\r\n        }\r\n    ).level;\r\n\r\nexport const handDecisionSetGetters: HandDecisionSetGetters = {\r\n    [HandCode.Split2s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split3s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split4s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split5s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split6s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.doublingAfterSplit]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split7s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split8s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Split9s]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.stand\r\n    }),\r\n    [HandCode.Split10s]: () => alwaysStand,\r\n    [HandCode.SplitAs]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]:\r\n            casinoRules[CasinoRulesKeys.splitsNumber] > SplitsNumber.none &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.split_hit\r\n                : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft13]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft14]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft17]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft18]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.anyPair\r\n                ? DynamicDecisions.double_stand\r\n                : BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Soft19]: () => alwaysStand,\r\n    [HandCode.Soft20]: () => alwaysStand,\r\n    [HandCode.Hard5]: () => alwaysHit,\r\n    [HandCode.Hard6]: () => alwaysHit,\r\n    [HandCode.Hard7]: () => alwaysHit,\r\n    [HandCode.Hard8]: () => alwaysHit,\r\n    [HandCode.Hard9]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.nineToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard10]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard11]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Five]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Six]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Seven]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]:\r\n            casinoRules[CasinoRulesKeys.doubling] >= Doubling.tenToEleven &&\r\n            casinoRules[CasinoRulesKeys.blackjackPeek]\r\n                ? DynamicDecisions.double_hit\r\n                : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard12]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard13]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard14]: () => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard15]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard16]: (casinoRules) => ({\r\n        [SimpleCardSymbol.Two]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Three]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Four]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Five]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Six]: BaseDecisions.stand,\r\n        [SimpleCardSymbol.Seven]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Eight]: BaseDecisions.hit,\r\n        [SimpleCardSymbol.Nine]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ten]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit,\r\n        [SimpleCardSymbol.Ace]: casinoRules[CasinoRulesKeys.surrender]\r\n            ? DynamicDecisions.surrender_hit\r\n            : BaseDecisions.hit\r\n    }),\r\n    [HandCode.Hard17]: () => alwaysStand,\r\n    [HandCode.Hard18]: () => alwaysStand,\r\n    [HandCode.Hard19]: () => alwaysStand,\r\n    [HandCode.Hard20]: () => alwaysStand\r\n};\r\n","import {\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    GoldHandsLevels,\r\n    HandCode,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { getHandDecisionSetLevel, handDecisionSetGetters } from './hand-decision-set';\r\n\r\nexport const getActiveTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    goldHandsLevels: GoldHandsLevels\r\n) => Object.values(trainingHands).filter((hand) => goldHandsLevels[hand.level]);\r\n\r\nexport const getDefaultTrainingHands = () => getTrainingHands(getDefaultCasinoRules());\r\n\r\nexport const getGoldHandsNumber = (\r\n    trainingHands: TrainingHands,\r\n    goldHandsLevels: GoldHandsLevels\r\n) => allDealerSymbols.length * getActiveTrainingHands(trainingHands, goldHandsLevels).length;\r\n\r\nexport const getTrainingHands = (casinoRules: CasinoRules) => {\r\n    const trainingHands: TrainingHands = {\r\n        [HandCode.Split2s]: {\r\n            code: HandCode.Split2s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split2s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n            level: -1,\r\n            name: '2,2'\r\n        },\r\n        [HandCode.Split3s]: {\r\n            code: HandCode.Split3s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split3s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n            level: -1,\r\n            name: '3,3'\r\n        },\r\n        [HandCode.Split4s]: {\r\n            code: HandCode.Split4s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split4s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n            level: -1,\r\n            name: '4,4'\r\n        },\r\n        [HandCode.Split5s]: {\r\n            code: HandCode.Split5s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split5s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: '5,5'\r\n        },\r\n        [HandCode.Split6s]: {\r\n            code: HandCode.Split6s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split6s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.doublingAfterSplit],\r\n            level: -1,\r\n            name: '6,6'\r\n        },\r\n        [HandCode.Split7s]: {\r\n            code: HandCode.Split7s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split7s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber],\r\n            level: -1,\r\n            name: '7,7'\r\n        },\r\n        [HandCode.Split8s]: {\r\n            code: HandCode.Split8s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split8s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: '8,8'\r\n        },\r\n        [HandCode.Split9s]: {\r\n            code: HandCode.Split9s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split9s](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber],\r\n            level: -1,\r\n            name: '9,9'\r\n        },\r\n        [HandCode.Split10s]: {\r\n            code: HandCode.Split10s,\r\n            decisionSet: handDecisionSetGetters[HandCode.Split10s](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: '10,10'\r\n        },\r\n        [HandCode.SplitAs]: {\r\n            code: HandCode.SplitAs,\r\n            decisionSet: handDecisionSetGetters[HandCode.SplitAs](casinoRules),\r\n            dependencies: [CasinoRulesKeys.splitsNumber, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'A,A'\r\n        },\r\n        [HandCode.Soft13]: {\r\n            code: HandCode.Soft13,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft13](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 13'\r\n        },\r\n        [HandCode.Soft14]: {\r\n            code: HandCode.Soft14,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft14](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 14'\r\n        },\r\n        [HandCode.Soft15]: {\r\n            code: HandCode.Soft15,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft15](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 15'\r\n        },\r\n        [HandCode.Soft16]: {\r\n            code: HandCode.Soft16,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft16](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 16'\r\n        },\r\n        [HandCode.Soft17]: {\r\n            code: HandCode.Soft17,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft17](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 17'\r\n        },\r\n        [HandCode.Soft18]: {\r\n            code: HandCode.Soft18,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft18](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Soft 18'\r\n        },\r\n        [HandCode.Soft19]: {\r\n            code: HandCode.Soft19,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft19](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Soft 19'\r\n        },\r\n        [HandCode.Soft20]: {\r\n            code: HandCode.Soft20,\r\n            decisionSet: handDecisionSetGetters[HandCode.Soft20](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Soft 20'\r\n        },\r\n        /* Soft 21 => Either Blackjack or maximum score! This hand doesn't need training */\r\n        /* Hard 4 => Only possible with 2,2. Covered in Split hands */\r\n        [HandCode.Hard5]: {\r\n            code: HandCode.Hard5,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard5](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 5'\r\n        },\r\n        [HandCode.Hard6]: {\r\n            code: HandCode.Hard6,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard6](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 6'\r\n        },\r\n        [HandCode.Hard7]: {\r\n            code: HandCode.Hard7,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard7](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 7'\r\n        },\r\n        [HandCode.Hard8]: {\r\n            code: HandCode.Hard8,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard8](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 8'\r\n        },\r\n        [HandCode.Hard9]: {\r\n            code: HandCode.Hard9,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard9](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Hard 9'\r\n        },\r\n        [HandCode.Hard10]: {\r\n            code: HandCode.Hard10,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard10](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling],\r\n            level: -1,\r\n            name: 'Hard 10'\r\n        },\r\n        [HandCode.Hard11]: {\r\n            code: HandCode.Hard11,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard11](casinoRules),\r\n            dependencies: [CasinoRulesKeys.doubling, CasinoRulesKeys.blackjackPeek],\r\n            level: -1,\r\n            name: 'Hard 11'\r\n        },\r\n        [HandCode.Hard12]: {\r\n            code: HandCode.Hard12,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard12](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 12'\r\n        },\r\n        [HandCode.Hard13]: {\r\n            code: HandCode.Hard13,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard13](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 13'\r\n        },\r\n        [HandCode.Hard14]: {\r\n            code: HandCode.Hard14,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard14](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 14'\r\n        },\r\n        [HandCode.Hard15]: {\r\n            code: HandCode.Hard15,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard15](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender],\r\n            level: -1,\r\n            name: 'Hard 15'\r\n        },\r\n        [HandCode.Hard16]: {\r\n            code: HandCode.Hard16,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard16](casinoRules),\r\n            dependencies: [CasinoRulesKeys.surrender],\r\n            level: -1,\r\n            name: 'Hard 16'\r\n        },\r\n        [HandCode.Hard17]: {\r\n            code: HandCode.Hard17,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard17](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 17'\r\n        },\r\n        [HandCode.Hard18]: {\r\n            code: HandCode.Hard18,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard18](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 18'\r\n        },\r\n        [HandCode.Hard19]: {\r\n            code: HandCode.Hard19,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard19](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 19'\r\n        },\r\n        [HandCode.Hard20]: {\r\n            code: HandCode.Hard20,\r\n            decisionSet: handDecisionSetGetters[HandCode.Hard20](casinoRules),\r\n            dependencies: [],\r\n            level: -1,\r\n            name: 'Hard 20'\r\n        }\r\n        /* Hard 21 => Maximum score! This hand doesn't need training */\r\n    };\r\n\r\n    Object.values(trainingHands).forEach((trainingHand) => {\r\n        trainingHand.level = getHandDecisionSetLevel(trainingHand.decisionSet);\r\n    });\r\n\r\n    return trainingHands;\r\n};\r\n\r\nexport const getUntrainedTrainingHands = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    goldHandsLevels: GoldHandsLevels\r\n) =>\r\n    getActiveTrainingHands(trainingHands, goldHandsLevels).filter(\r\n        (trainingHand) => getUntrainedDealerSymbols(trainingProgress[trainingHand.code]).length > 0\r\n    );\r\n","import {\r\n    CasinoRules,\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingPair,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys, getRandomItem } from '../utils';\r\nimport { allDealerSymbols, getUntrainedDealerSymbols } from './dealer-symbols';\r\nimport { createDealerHand, handCodeToHand } from './hand';\r\nimport { getActiveTrainingHands, getUntrainedTrainingHands } from './training-hand';\r\n\r\nexport const allTrainingPairsNumber = allDealerSymbols.length * Object.keys(HandCode).length;\r\n\r\nexport const getRandomTrainingPair = (\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    gameConfig: GameConfig\r\n): TrainingPair => {\r\n    const untrainedTrainingHands = getUntrainedTrainingHands(\r\n        trainingHands,\r\n        trainingProgress,\r\n        gameConfig.goldHandsLevels\r\n    );\r\n\r\n    const randomTrainingHand =\r\n        untrainedTrainingHands.length > 0\r\n            ? getRandomItem(untrainedTrainingHands)\r\n            : getRandomItem(getActiveTrainingHands(trainingHands, gameConfig.goldHandsLevels)); // In case all hands have been passed\r\n\r\n    const trainingHandStatus = trainingProgress[randomTrainingHand.code];\r\n    const untrainedDealerSymbols = getUntrainedDealerSymbols(trainingHandStatus);\r\n\r\n    const randomDealerSymbol =\r\n        untrainedDealerSymbols.length > 0\r\n            ? getRandomItem(untrainedDealerSymbols)\r\n            : getRandomItem(getObjectKeys(trainingHandStatus)); // In case all hands have been passed\r\n\r\n    return {\r\n        dealer: createDealerHand(gameConfig.casinoRules, randomDealerSymbol),\r\n        player: handCodeToHand(randomTrainingHand.code)\r\n    };\r\n};\r\n\r\nexport const getSpecificTrainingPair = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    casinoRules: CasinoRules\r\n): TrainingPair => {\r\n    return {\r\n        dealer: createDealerHand(casinoRules, dealerSymbol),\r\n        player: handCodeToHand(handCode)\r\n    };\r\n};\r\n","import {\r\n    GameConfig,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingHandStatus,\r\n    TrainingPairStatus,\r\n    TrainingProgress,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\nimport { allDealerSymbols } from './dealer-symbols';\r\nimport { getUntrainedTrainingHands } from './training-hand';\r\nimport { allTrainingPairsNumber } from './training-pair';\r\n\r\nexport const getAreGoldHandsBlockingProgress = (\r\n    gameConfig: GameConfig,\r\n    trainingHands: TrainingHands,\r\n    trainingProgress: TrainingProgress,\r\n    progress: number\r\n) =>\r\n    gameConfig.useGoldHands\r\n        ? progress < 100 &&\r\n          getUntrainedTrainingHands(trainingHands, trainingProgress, gameConfig.goldHandsLevels)\r\n              .length === 0\r\n        : false;\r\n\r\nexport const getDefaultTrainingStatus = (): TrainingStatus => ({\r\n    attemptedTrainingPairs: 0,\r\n    failedTrainingPairs: [],\r\n    isCompleted: false,\r\n    passedTrainingPairs: 0,\r\n    trainingProgress: Object.values(HandCode).reduce<TrainingProgress>(\r\n        (reducedTrainingProgress, handCode) => ({\r\n            ...reducedTrainingProgress,\r\n            [handCode]: allDealerSymbols.reduce<TrainingHandStatus>(\r\n                (reducedDealerSymbols, dealerSymbol) => ({\r\n                    ...reducedDealerSymbols,\r\n                    [dealerSymbol]: TrainingPairStatus.untrained\r\n                }),\r\n                {} as TrainingHandStatus\r\n            )\r\n        }),\r\n        {} as TrainingProgress\r\n    )\r\n});\r\n\r\nexport const isTrainingCompleted = (passedTrainingPairs: number) =>\r\n    passedTrainingPairs === allTrainingPairsNumber;\r\n\r\nconst reduceTrainingHandProgress = (\r\n    handCode: HandCode,\r\n    trainingHandStatus: TrainingHandStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus =>\r\n    getObjectKeys(trainingHandStatus).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, dealerSymbol) =>\r\n            reduceTrainingPairProgress(\r\n                handCode,\r\n                dealerSymbol,\r\n                trainingHandStatus[dealerSymbol],\r\n                reducedTrainingStatus\r\n            ),\r\n        reducedTrainingStatus\r\n    );\r\n\r\nconst reduceTrainingPairProgress = (\r\n    handCode: HandCode,\r\n    dealerSymbol: SimpleCardSymbol,\r\n    trainingPairStatus: TrainingPairStatus,\r\n    reducedTrainingStatus: TrainingStatus\r\n): TrainingStatus => {\r\n    return {\r\n        attemptedTrainingPairs:\r\n            reducedTrainingStatus.attemptedTrainingPairs +\r\n            (trainingPairStatus !== TrainingPairStatus.untrained ? 1 : 0),\r\n        isCompleted: reducedTrainingStatus.isCompleted,\r\n        failedTrainingPairs:\r\n            trainingPairStatus === TrainingPairStatus.failed\r\n                ? reducedTrainingStatus.failedTrainingPairs.concat([\r\n                      {\r\n                          dealerSymbol,\r\n                          handCode\r\n                      }\r\n                  ])\r\n                : reducedTrainingStatus.failedTrainingPairs,\r\n        passedTrainingPairs:\r\n            reducedTrainingStatus.passedTrainingPairs +\r\n            (trainingPairStatus === TrainingPairStatus.passed ? 1 : 0),\r\n        trainingProgress: reducedTrainingStatus.trainingProgress\r\n    };\r\n};\r\n\r\nexport const retrieveTrainingStatus = (trainingProgress: TrainingProgress): TrainingStatus => {\r\n    const trainingStatus = getObjectKeys(trainingProgress).reduce<TrainingStatus>(\r\n        (reducedTrainingStatus, handCode) =>\r\n            reduceTrainingHandProgress(handCode, trainingProgress[handCode], reducedTrainingStatus),\r\n        {\r\n            attemptedTrainingPairs: 0,\r\n            failedTrainingPairs: [],\r\n            isCompleted: false,\r\n            passedTrainingPairs: 0,\r\n            trainingProgress: trainingProgress\r\n        } as TrainingStatus\r\n    );\r\n\r\n    trainingStatus.isCompleted = isTrainingCompleted(trainingStatus.passedTrainingPairs);\r\n\r\n    return trainingStatus;\r\n};\r\n","import { updatePlayerEarnings } from '../async-storage';\r\nimport {\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    Player,\r\n    SimpleCardSymbol,\r\n    TrainingPairRepresentation,\r\n    TrainingPairStatus,\r\n    TrainingStatus\r\n} from '../types';\r\nimport { getRandomCard } from './card';\r\nimport { getHandEffectiveValue, dealCard, revealDealerHoleCard, hasHoleCard } from './hand';\r\nimport { resolveHands } from './player';\r\nimport { isTrainingCompleted } from './training-status';\r\n\r\nexport const handleDealerTurn = (\r\n    dealerHand: Hand,\r\n    gameConfig: GameConfig,\r\n    player: Player,\r\n    setDealerHand: (dealerHand: Hand) => void,\r\n    setPhase: (phase: Phases) => void,\r\n    setPlayer: (player: Player) => void\r\n) => {\r\n    let nextDealerHand = { ...dealerHand };\r\n\r\n    if (gameConfig.isDealerAnimationEnabled && getHandEffectiveValue(nextDealerHand) < 17) {\r\n        setTimeout(() => {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            } else {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n            // Setting the dealerHand will trigger this handler again, through useEffect\r\n        }, 1000);\r\n    } else {\r\n        if (!gameConfig.isDealerAnimationEnabled) {\r\n            if (hasHoleCard(dealerHand)) {\r\n                revealDealerHoleCard(nextDealerHand);\r\n            }\r\n\r\n            while (getHandEffectiveValue(nextDealerHand) < 17) {\r\n                dealCard(nextDealerHand, getRandomCard());\r\n            }\r\n            setDealerHand(nextDealerHand);\r\n        }\r\n\r\n        resolveHands(player, nextDealerHand);\r\n        setPlayer({ ...player });\r\n        updatePlayerEarnings(player.cash);\r\n        setPhase(Phases.finished);\r\n    }\r\n};\r\n\r\nconst getNextFailedTrainingPairs = (\r\n    currentFailedTrainingPairs: TrainingPairRepresentation[],\r\n    isHit: boolean,\r\n    handCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingPairRepresentation[] => {\r\n    return isHit\r\n        ? currentFailedTrainingPairs.filter(\r\n              (failedTrainingPair) =>\r\n                  failedTrainingPair.dealerSymbol !== currentDealerSymbol ||\r\n                  failedTrainingPair.handCode !== handCode\r\n          )\r\n        : currentFailedTrainingPairs.some(\r\n              (failedTrainingPair) =>\r\n                  failedTrainingPair.dealerSymbol === currentDealerSymbol &&\r\n                  failedTrainingPair.handCode === handCode\r\n          )\r\n        ? currentFailedTrainingPairs\r\n        : [{ dealerSymbol: currentDealerSymbol, handCode }].concat(currentFailedTrainingPairs);\r\n};\r\n\r\nexport const getNextTrainingStatus = (\r\n    trainingStatus: TrainingStatus,\r\n    isHit: boolean,\r\n    currentHandCode: HandCode,\r\n    currentDealerSymbol: SimpleCardSymbol\r\n): TrainingStatus => {\r\n    // The current trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol]\r\n    // value must be kept to update attemptedTrainingPairs and passedTrainingPairs\r\n    const currentHandTrainingStatus =\r\n        trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol];\r\n\r\n    trainingStatus.trainingProgress[currentHandCode][currentDealerSymbol] = isHit\r\n        ? TrainingPairStatus.passed\r\n        : TrainingPairStatus.failed;\r\n\r\n    const nextAttemptedTrainingPairs =\r\n        trainingStatus.attemptedTrainingPairs +\r\n        (currentHandTrainingStatus === TrainingPairStatus.untrained ? 1 : 0);\r\n\r\n    const nextFailedTrainingPairs = getNextFailedTrainingPairs(\r\n        trainingStatus.failedTrainingPairs,\r\n        isHit,\r\n        currentHandCode,\r\n        currentDealerSymbol\r\n    );\r\n\r\n    const nextPassedTrainingHands =\r\n        trainingStatus.passedTrainingPairs +\r\n        (isHit && currentHandTrainingStatus !== TrainingPairStatus.passed\r\n            ? 1\r\n            : !isHit && currentHandTrainingStatus === TrainingPairStatus.passed\r\n            ? -1\r\n            : 0);\r\n\r\n    return {\r\n        attemptedTrainingPairs: nextAttemptedTrainingPairs,\r\n        failedTrainingPairs: nextFailedTrainingPairs,\r\n        isCompleted: isTrainingCompleted(nextPassedTrainingHands),\r\n        passedTrainingPairs: nextPassedTrainingHands,\r\n        trainingProgress: trainingStatus.trainingProgress\r\n    };\r\n};\r\n","import {\r\n    BaseDecisions,\r\n    DecisionEvaluation,\r\n    DynamicConditions,\r\n    DynamicDecision,\r\n    DynamicDecisions,\r\n    Hand,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    TrainingHands\r\n} from '../types';\r\nimport { symbolToSimpleSymbol } from './card';\r\nimport { handToHandCode } from './hand';\r\n\r\nexport const evaluateDecision = (\r\n    playerHand: Hand,\r\n    dealerHand: Hand,\r\n    trainingHands: TrainingHands,\r\n    dynamicConditions: DynamicConditions,\r\n    playerDecision: PlayerDecision\r\n): DecisionEvaluation => {\r\n    const handCode = handToHandCode(playerHand);\r\n    const trainingHand = trainingHands[handCode];\r\n    const dealerSymbol = symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const dynamicDecision = trainingHand.decisionSet[dealerSymbol];\r\n    const optimalDecision = evaluateDynamicDecision(dynamicDecision, dynamicConditions);\r\n\r\n    return {\r\n        dealerSymbol,\r\n        dynamicDecision,\r\n        handName: trainingHand.name,\r\n        isHit: playerDecision === optimalDecision\r\n    };\r\n};\r\n\r\nconst evaluateDynamicDecision = (\r\n    dynamicDecision: DynamicDecision,\r\n    dynamicConditions: DynamicConditions\r\n): PlayerDecision =>\r\n    dynamicDecision === DynamicDecisions.double_hit\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.double_stand\r\n        ? dynamicConditions.canDouble\r\n            ? PlayerDecisions.double\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.split_hit\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.hit\r\n        : dynamicDecision === DynamicDecisions.split_stand\r\n        ? dynamicConditions.canSplit\r\n            ? PlayerDecisions.split\r\n            : BaseDecisions.stand\r\n        : dynamicDecision === DynamicDecisions.surrender_hit\r\n        ? dynamicConditions.canSurrender\r\n            ? PlayerDecisions.surrender\r\n            : BaseDecisions.hit\r\n        : dynamicDecision;\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, Doubling } from '../../types';\r\n\r\ninterface DoublingPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const DoublingPicker: React.FC<DoublingPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.doubling}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.doubling]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextDoubling = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextDoubling > 0,\r\n                            [CasinoRulesKeys.doubling]: nextDoubling\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"Any pair\" value={Doubling.anyPair} />\r\n                    <Picker.Item label=\"9, 10, 11, S19, S20\" value={Doubling.nineToElevenSoft} />\r\n                    <Picker.Item label=\"9, 10, 11\" value={Doubling.nineToEleven} />\r\n                    <Picker.Item label=\"10, 11\" value={Doubling.tenToEleven} />\r\n                    <Picker.Item label=\"None\" value={Doubling.none} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Text, View } from 'react-native';\r\nimport { hitColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys } from '../../types';\r\n\r\ninterface RuleSwitcherProps {\r\n    casinoRules: CasinoRules;\r\n    hideLabel?: boolean;\r\n    isDisabled?: boolean;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    ruleName:\r\n        | CasinoRulesKeys.blackjackPeek\r\n        | CasinoRulesKeys.doublingAfterSplit\r\n        | CasinoRulesKeys.hitSplitAces\r\n        | CasinoRulesKeys.holeCard\r\n        | CasinoRulesKeys.surrender;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const RuleSwitcher: React.FC<RuleSwitcherProps> = (props) => {\r\n    const SwitchCore = (\r\n        <Switch\r\n            onValueChange={\r\n                props.isDisabled\r\n                    ? undefined\r\n                    : (newValue) => {\r\n                          const nextCasinoRules = {\r\n                              ...props.casinoRules,\r\n                              [props.ruleName]: newValue\r\n                          };\r\n                          if (props.ruleName === CasinoRulesKeys.holeCard && !newValue) {\r\n                              nextCasinoRules[CasinoRulesKeys.blackjackPeek] = false;\r\n                          }\r\n                          props.setCasinoRules(nextCasinoRules);\r\n                          props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                      }\r\n            }\r\n            style={{ marginRight: 8 }}\r\n            trackColor={{ true: hitColor, false: 'white' }}\r\n            value={props.casinoRules[props.ruleName]}\r\n        />\r\n    );\r\n\r\n    return props.hideLabel ? (\r\n        SwitchCore\r\n    ) : (\r\n        <View\r\n            style={{\r\n                flexDirection: 'row',\r\n                opacity: props.isDisabled ? 0.3 : undefined,\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            {SwitchCore}\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {props.ruleName}\r\n            </Text>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Picker, View, Text } from 'react-native';\r\nimport { tableColor } from '../../constants';\r\nimport { CasinoRules, CasinoRulesKeys, SplitsNumber } from '../../types';\r\n\r\ninterface SplitsNumberPickerProps {\r\n    casinoRules: CasinoRules;\r\n    onValueChange?: (nextCasinoRules: CasinoRules) => void;\r\n    setCasinoRules: (casinoRules: CasinoRules) => void;\r\n}\r\n\r\nexport const SplitsNumberPicker: React.FC<SplitsNumberPickerProps> = (props) => {\r\n    return (\r\n        <View\r\n            style={{\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                paddingTop: 16,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 20\r\n                }}\r\n            >\r\n                {CasinoRulesKeys.splitsNumber}\r\n            </Text>\r\n\r\n            <View style={{ backgroundColor: 'white', flex: 1, marginLeft: 8 }}>\r\n                <Picker\r\n                    selectedValue={props.casinoRules[CasinoRulesKeys.splitsNumber]}\r\n                    style={{\r\n                        backgroundColor: 'transparent',\r\n                        color: tableColor,\r\n                        height: 35,\r\n                        width: '100%'\r\n                    }}\r\n                    onValueChange={(newValue: string) => {\r\n                        const nextSplitsNumber = parseInt(newValue);\r\n                        const nextCasinoRules = {\r\n                            ...props.casinoRules,\r\n                            [CasinoRulesKeys.doublingAfterSplit]:\r\n                                props.casinoRules[CasinoRulesKeys.doublingAfterSplit] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.hitSplitAces]:\r\n                                props.casinoRules[CasinoRulesKeys.hitSplitAces] &&\r\n                                nextSplitsNumber > 0,\r\n                            [CasinoRulesKeys.splitsNumber]: nextSplitsNumber\r\n                        };\r\n                        props.setCasinoRules(nextCasinoRules);\r\n                        props.onValueChange && props.onValueChange(nextCasinoRules);\r\n                    }}\r\n                >\r\n                    <Picker.Item label=\"None\" value={SplitsNumber.none} />\r\n                    <Picker.Item label=\"1\" value={SplitsNumber.one} />\r\n                    <Picker.Item label=\"2\" value={SplitsNumber.two} />\r\n                    <Picker.Item label=\"3\" value={SplitsNumber.three} />\r\n                </Picker>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { colors } from '../constants';\r\nimport { allDealerSymbols } from '../logic/dealer-symbols';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    BaseDecisions,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    DynamicDecisions,\r\n    HandCode,\r\n    SplitsNumber\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\nconst actionsAbbreviationMap: Dictionary<string, BaseDecisions | DynamicDecisions> = {\r\n    [BaseDecisions.hit]: 'H',\r\n    [BaseDecisions.stand]: 'S',\r\n    [DynamicDecisions.double_hit]: 'Dh',\r\n    [DynamicDecisions.double_stand]: 'Ds',\r\n    [DynamicDecisions.split_hit]: 'Ph',\r\n    [DynamicDecisions.split_stand]: 'Ps',\r\n    [DynamicDecisions.surrender_hit]: 'Rh'\r\n};\r\n\r\nconst handCodesAbbreviationMap: Partial<Dictionary<string, HandCode>> = {\r\n    [HandCode.Split2s]: '2s',\r\n    [HandCode.Split3s]: '3s',\r\n    [HandCode.Split4s]: '4s',\r\n    [HandCode.Split5s]: '5s',\r\n    [HandCode.Split6s]: '6s',\r\n    [HandCode.Split7s]: '7s',\r\n    [HandCode.Split8s]: '8s',\r\n    [HandCode.Split9s]: '9s',\r\n    [HandCode.Split10s]: 'Xs',\r\n    [HandCode.SplitAs]: 'As',\r\n    [HandCode.Soft13]: 'A2',\r\n    [HandCode.Soft14]: 'A3',\r\n    [HandCode.Soft15]: 'A4',\r\n    [HandCode.Soft16]: 'A5',\r\n    [HandCode.Soft17]: 'A6',\r\n    [HandCode.Soft18]: 'A7',\r\n    [HandCode.Soft19]: 'A8',\r\n    [HandCode.Soft20]: 'A9'\r\n};\r\n\r\nconst cellWidth = Math.floor((100 * 100) / (allDealerSymbols.length + 1)) / 100;\r\n\r\ninterface TextCellProps {\r\n    backgroundColor?: string;\r\n}\r\n\r\nconst TextCell: React.FC<TextCellProps> = (props) => (\r\n    <Text\r\n        style={{\r\n            backgroundColor: props.backgroundColor,\r\n            color: 'white',\r\n            fontSize: 16,\r\n            marginVertical: 1,\r\n            paddingVertical: 2,\r\n            textAlign: 'center',\r\n            width: `${cellWidth}%`\r\n        }}\r\n    >\r\n        {props.children}\r\n    </Text>\r\n);\r\n\r\ninterface BasicStrategyTableProps {\r\n    casinoRules: CasinoRules;\r\n}\r\n\r\nexport const BasicStrategyTable: React.FC<BasicStrategyTableProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    return (\r\n        <ScrollView style={{ width: '100%' }}>\r\n            <View style={{ paddingHorizontal: 16, marginBottom: 16 }}>\r\n                <DoublingPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={\r\n                        props.casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                        props.casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                    }\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.blackjackPeek}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <SplitsNumberPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </View>\r\n\r\n            <View style={{ flexDirection: 'row', width: '100%' }}>\r\n                {[''].concat(Object.values(allDealerSymbols)).map((dealerSymbol) => (\r\n                    <TextCell key={dealerSymbol}>{dealerSymbol}</TextCell>\r\n                ))}\r\n            </View>\r\n\r\n            {Object.values(HandCode).map((handCode) => {\r\n                const trainingHand = trainingHands[handCode];\r\n                return (\r\n                    <View key={handCode} style={{ flexDirection: 'row', width: '100%' }}>\r\n                        <TextCell>{handCodesAbbreviationMap[handCode] || handCode}</TextCell>\r\n                        {getObjectKeys(trainingHand.decisionSet).map((cardSymbol) => (\r\n                            <TextCell\r\n                                key={cardSymbol}\r\n                                backgroundColor={colors[trainingHand.decisionSet[cardSymbol]]}\r\n                            >\r\n                                {actionsAbbreviationMap[trainingHand.decisionSet[cardSymbol]]}\r\n                            </TextCell>\r\n                        ))}\r\n                    </View>\r\n                );\r\n            })}\r\n\r\n            <View style={{ paddingHorizontal: 16, marginVertical: 16 }}>\r\n                {getObjectKeys(actionsAbbreviationMap).map((action) => (\r\n                    <Text\r\n                        key={action}\r\n                        style={{\r\n                            backgroundColor: colors[action],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 8,\r\n                            paddingVertical: 4,\r\n                            marginBottom: 4\r\n                        }}\r\n                    >\r\n                        {actionsAbbreviationMap[action]} = {action}\r\n                    </Text>\r\n                ))}\r\n            </View>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport { playSound } from '../utils';\r\n\r\ntype SoundQueue = { isActive: boolean; sounds: Audio.Sound[] };\r\n\r\nexport const createSoundQueue = (): SoundQueue => ({\r\n    isActive: false,\r\n    sounds: []\r\n});\r\n\r\nconst playNextSound = (soundQueue: SoundQueue) => {\r\n    const nextSound = soundQueue.sounds.pop();\r\n    if (nextSound) {\r\n        playSound(nextSound).then(() => {\r\n            setTimeout(() => playNextSound(soundQueue), 250);\r\n        });\r\n    } else {\r\n        soundQueue.isActive = false;\r\n    }\r\n};\r\n\r\nexport const pushSound = (soundQueue: SoundQueue, sound: Audio.Sound) => {\r\n    soundQueue.sounds.push(sound);\r\n    if (!soundQueue.isActive) {\r\n        soundQueue.isActive = true;\r\n        playNextSound(soundQueue);\r\n    }\r\n};\r\n","import { Audio } from 'expo-av';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Animated, Text, TouchableOpacity, View } from 'react-native';\r\nimport cardSlideSoundMp3 from '../../assets/card-slide.mp3';\r\nimport { createSoundQueue, pushSound } from '../logic/sound-queue';\r\nimport { AppNavigation, Card, RouteNames, SimpleCardSymbol } from '../types';\r\n\r\ninterface CardComponentProps {\r\n    card: Card;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nconst animationsDuration = 400;\r\nconst initialOpacity = 0;\r\nconst initialPosition = -20;\r\n\r\nconst soundQueue = createSoundQueue();\r\n\r\nexport const CardComponent: React.FC<CardComponentProps> = (props) => {\r\n    const opacity = useMemo(() => new Animated.Value(initialOpacity), []);\r\n    const position = useMemo(() => new Animated.Value(initialPosition), []);\r\n    const [cardSlideSound, setCardSlideSound] = useState<Audio.Sound | false>();\r\n\r\n    const animateCard = (sound?: Audio.Sound | false) => {\r\n        if (!props.skipAnimation) {\r\n            Animated.parallel([\r\n                Animated.timing(opacity, {\r\n                    useNativeDriver: true,\r\n                    toValue: 1,\r\n                    duration: animationsDuration * 2\r\n                }),\r\n                Animated.timing(position, {\r\n                    useNativeDriver: true,\r\n                    toValue: 0,\r\n                    duration: animationsDuration\r\n                })\r\n            ]).start();\r\n        }\r\n\r\n        if (props.isSoundEnabled && sound) {\r\n            pushSound(soundQueue, sound);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (cardSlideSound === undefined) {\r\n            Audio.Sound.createAsync(cardSlideSoundMp3, { volume: 0.5 })\r\n                .then((result) => {\r\n                    animateCard(result.sound);\r\n                    setCardSlideSound(result.sound);\r\n                })\r\n                .catch(() => {\r\n                    /* Failing to load audio is not a critical issue */\r\n                    animateCard();\r\n                    setCardSlideSound(false);\r\n                });\r\n        } else {\r\n            if (!props.skipAnimation) {\r\n                opacity.setValue(initialOpacity);\r\n                position.setValue(initialPosition);\r\n            }\r\n\r\n            animateCard(cardSlideSound);\r\n        }\r\n    }, [props.card]);\r\n\r\n    const cardColor = props.card.isBlueCard\r\n        ? '#346fa1'\r\n        : props.card.isGoldCard\r\n        ? '#e5c100'\r\n        : props.card.suit === '♦' || props.card.suit === '♥'\r\n        ? 'red'\r\n        : 'black';\r\n\r\n    const backgroundColor = props.card.isHoleCard ? 'lightgrey' : 'white';\r\n\r\n    return (\r\n        <Animated.View\r\n            style={{\r\n                backgroundColor,\r\n                borderRadius: 8,\r\n                height: 66,\r\n                marginBottom: 8,\r\n                marginRight: 8,\r\n                opacity: props.skipAnimation ? undefined : opacity,\r\n                transform: props.skipAnimation ? undefined : [{ translateY: position }],\r\n                width: 56\r\n            }}\r\n        >\r\n            {!props.card.isHoleCard && (\r\n                <TouchableOpacity\r\n                    onPress={\r\n                        props.navigation\r\n                            ? () => {\r\n                                  if (props.card.isBlueCard) {\r\n                                      props.navigation!.navigate(RouteNames.blueCardsInfo);\r\n                                  } else if (props.card.isGoldCard) {\r\n                                      props.navigation!.navigate(RouteNames.goldHandsInfo);\r\n                                  }\r\n                              }\r\n                            : undefined\r\n                    }\r\n                >\r\n                    {props.card.isBlueCard || props.card.isGoldCard ? (\r\n                        <View\r\n                            style={{\r\n                                backgroundColor: cardColor,\r\n                                borderRadius: props.card.isBlueCard ? 12 : undefined,\r\n                                height: 12,\r\n                                position: 'absolute',\r\n                                right: 8,\r\n                                top: 8,\r\n                                width: 12\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        <Text\r\n                            style={{\r\n                                color: cardColor,\r\n                                fontSize: 16,\r\n                                position: 'absolute',\r\n                                right: 4,\r\n                                top: 4\r\n                            }}\r\n                        >\r\n                            {props.card.suit}\r\n                        </Text>\r\n                    )}\r\n                    <Text\r\n                        style={{\r\n                            color: cardColor,\r\n                            fontSize: 40,\r\n                            marginRight: props.card.symbol === SimpleCardSymbol.Ten ? 0 : 8,\r\n                            marginTop: 12,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.card.symbol}\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            )}\r\n        </Animated.View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { getHandValidValues, isBlackjack } from '../logic/hand';\r\nimport { AppNavigation, Hand } from '../types';\r\nimport { CardComponent } from './card-component';\r\n\r\ninterface HandComponentProps {\r\n    hand: Hand;\r\n    handsNumber: number;\r\n    isCurrentHand: boolean;\r\n    isSoundEnabled: boolean;\r\n    navigation?: AppNavigation;\r\n    peeking?: boolean;\r\n    skipAnimation?: boolean;\r\n}\r\n\r\nexport const HandComponent: React.FC<HandComponentProps> = (props) => {\r\n    const handValues = getHandValidValues(props.hand).join('/');\r\n    const displayValues = isBlackjack(props.hand, props.handsNumber)\r\n        ? 'Blackjack'\r\n        : handValues.indexOf('21') > -1\r\n        ? '21'\r\n        : handValues;\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                backgroundColor: props.isCurrentHand ? 'rgba(255, 255, 255, 0.2)' : undefined,\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'center',\r\n                maxWidth: '100%',\r\n                paddingTop: 8,\r\n                paddingHorizontal: 8\r\n            }}\r\n        >\r\n            {props.hand.cards.map((card, index) => (\r\n                <CardComponent\r\n                    card={card}\r\n                    isSoundEnabled={props.isSoundEnabled}\r\n                    key={index}\r\n                    navigation={props.navigation}\r\n                    skipAnimation={props.skipAnimation}\r\n                />\r\n            ))}\r\n            <View style={{ alignItems: 'center', justifyContent: 'center', marginBottom: 8 }}>\r\n                {props.peeking ? (\r\n                    <Text style={{ color: 'black', fontSize: 32, height: '100%' }}>👁️</Text>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <Text style={{ color: 'white', fontSize: 25 }}> {displayValues}</Text>\r\n                        {props.hand.outcome && (\r\n                            <Text style={{ color: 'white', fontSize: 25, fontWeight: 'bold' }}>\r\n                                {props.hand.outcome}\r\n                            </Text>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { CardComponent } from '../components/card-component';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { CardSuit, Hand, SimpleCardSymbol } from '../types';\r\n\r\nexport const BlueCardsInfo: React.FC = () => {\r\n    const hardFourteen: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Five\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.diamonds,\r\n                symbol: SimpleCardSymbol.Nine\r\n            }\r\n        ],\r\n        values: [14]\r\n    };\r\n\r\n    const splitFour: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Four\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.spades,\r\n                symbol: SimpleCardSymbol.Four\r\n            }\r\n        ],\r\n        values: [8]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Blue cards\r\n            </Text>\r\n\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    When Blue cards are enabled, each time you Hit or Split a hand, instead of being\r\n                    a dealt a random card, you will be dealt a card that turns your current hand\r\n                    into a hand you haven't trained yet (or a hand you didn't get right) against the\r\n                    dealer's up card.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Blue cards have blue symbols and a blue circle (instead of the suit):\r\n                </Text>\r\n\r\n                <View style={{ alignItems: 'center' }}>\r\n                    <CardComponent\r\n                        card={{\r\n                            isBlueCard: true,\r\n                            isGoldCard: false,\r\n                            suit: CardSuit.spades,\r\n                            symbol: SimpleCardSymbol.Eight\r\n                        }}\r\n                        isSoundEnabled={false}\r\n                        skipAnimation={true}\r\n                    />\r\n                </View>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontWeight: 'bold', marginVertical: 16 }}\r\n                >\r\n                    Notice that enabling this option will increase your probabilities of winning,\r\n                    since you won't get busted as much as you would when being dealt random cards\r\n                    (specially on high value hands like Hard 16).\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardFourteen}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    Let's say you have a Hard 14 and the dealer's up card is a 9. If you decide to\r\n                    Hit, the app will check whether there are any hands greater than 14 which you\r\n                    haven't trained yet (or you didn't get right) against a dealer's 9. Hands\r\n                    greater than 14 are:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            }\r\n                        ],\r\n                        values: [15]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.clubs,\r\n                                symbol: SimpleCardSymbol.Two\r\n                            }\r\n                        ],\r\n                        values: [16]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            ...hardFourteen.cards,\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Six\r\n                            }\r\n                        ],\r\n                        values: [20]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    - If you haven't trained any of those hands yet (against a dealer's 9), you will\r\n                    be dealt a blue card that turns the Hard 14 into one of those hands\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    - If you have already trained all of those hands (against a dealer's 9), you\r\n                    will then be dealt a random card\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    The same behavior will be applied when splitting a hand. Let's say the dealer\r\n                    has a 6, you have a 4,4 and you decide to Split it.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={splitFour}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    The app will then check which hands greater than 4 you haven't trained yet (or\r\n                    didn't get right) against a dealer's 6 and turn each of the 4s into one of those\r\n                    hands. Available hands greater than 4 are:\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            }\r\n                        ],\r\n                        values: [5, 15]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SimpleCardSymbol.Two\r\n                            }\r\n                        ],\r\n                        values: [6]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 32, marginBottom: 8, textAlign: 'center' }}\r\n                >\r\n                    ...\r\n                </Text>\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            splitFour.cards[0],\r\n                            {\r\n                                isBlueCard: true,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.clubs,\r\n                                symbol: SimpleCardSymbol.Ten\r\n                            }\r\n                        ],\r\n                        values: [14]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    After you have trained each hand at least once Blue cards won't apply anymore.\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\nexport const Divider: React.FC = () => (\r\n    <View\r\n        style={{\r\n            backgroundColor: 'white',\r\n            height: 2,\r\n            width: '100%'\r\n        }}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport { Text, TouchableOpacity } from 'react-native';\r\nimport { tableColor } from '../constants';\r\n\r\ninterface HelpIconProps {\r\n    onPress: () => void;\r\n}\r\n\r\nexport const HelpIcon: React.FC<HelpIconProps> = (props) => {\r\n    return (\r\n        <TouchableOpacity onPress={props.onPress}>\r\n            <Text\r\n                style={{\r\n                    backgroundColor: 'white',\r\n                    borderRadius: 16,\r\n                    color: tableColor,\r\n                    fontSize: 18,\r\n                    fontWeight: 'bold',\r\n                    marginLeft: 8,\r\n                    marginTop: 2,\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                ?\r\n            </Text>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Alert, ScrollView, Switch, Text, View } from 'react-native';\r\nimport { updateGameConfig, updatePlayerEarnings, updateTrainingProgress } from '../async-storage';\r\nimport { Button } from '../components/button';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { Divider } from '../components/divider';\r\nimport { HelpIcon } from '../components/help-icon';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { dangerColor, doubleColor, hitColor, splitColor, warningColor } from '../constants';\r\nimport { getGoldHandsNumber, getTrainingHands } from '../logic/training-hand';\r\nimport {\r\n    getAreGoldHandsBlockingProgress,\r\n    getDefaultTrainingStatus\r\n} from '../logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    CasinoRules,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    GoldHandsLevels,\r\n    OnBoardingSections,\r\n    Phases,\r\n    RouteNames,\r\n    SplitsNumber,\r\n    TrainingHands,\r\n    TrainingStatus\r\n} from '../types';\r\n\r\ntype ConfigMenuProps = {\r\n    areGoldHandsBlockingProgress: boolean;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    progress: number;\r\n    setGameConfig: (gameConfig: GameConfig) => void;\r\n    setTrainingStatus: (trainingStatus: TrainingStatus) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingStatus: TrainingStatus;\r\n};\r\n\r\nconst textStyle = {\r\n    color: 'white',\r\n    fontSize: 20\r\n};\r\n\r\nexport const ConfigMenu: React.FC<ConfigMenuProps> = (props) => {\r\n    const [areGoldHandsBlockingProgress, setAreGoldHandsBlockingProgress] = useState(\r\n        props.progress < 100 && props.areGoldHandsBlockingProgress\r\n    );\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n    const [goldHandsLevels, setGoldHandsLevels] = useState(props.gameConfig.goldHandsLevels);\r\n    const [goldHandsNumber, setGoldHandsNumber] = useState(\r\n        getGoldHandsNumber(props.trainingHands, props.gameConfig.goldHandsLevels)\r\n    );\r\n    const [isDealerAnimationEnabled, setIsDealerAnimationEnabled] = useState(\r\n        props.gameConfig.isDealerAnimationEnabled\r\n    );\r\n    const [isSoundEnabled, setIsSoundEnabled] = useState(props.gameConfig.isSoundEnabled);\r\n    const [trainingHands, setTrainingHands] = useState(props.trainingHands);\r\n    const [useBlueCards, setUseBlueCards] = useState(props.gameConfig.useBlueCards);\r\n    const [useGoldHands, setUseGoldHands] = useState(props.gameConfig.useGoldHands);\r\n\r\n    const isSomeLevelSelected = (_goldHandsLevels: GoldHandsLevels) =>\r\n        _goldHandsLevels[1] || _goldHandsLevels[2] || _goldHandsLevels[3] || _goldHandsLevels[4];\r\n\r\n    const areGoldHandsBlockingProgressHandler = (options?: {\r\n        nextCasinoRules?: CasinoRules;\r\n        nextGoldHandsLevels?: GoldHandsLevels;\r\n        nextTrainingHands?: TrainingHands;\r\n        nextUseGoldHands?: boolean;\r\n    }) => {\r\n        setAreGoldHandsBlockingProgress(\r\n            isSomeLevelSelected((options && options.nextGoldHandsLevels) || goldHandsLevels) &&\r\n                getAreGoldHandsBlockingProgress(\r\n                    {\r\n                        casinoRules: (options && options.nextCasinoRules) || casinoRules,\r\n                        goldHandsLevels:\r\n                            (options && options.nextGoldHandsLevels) || goldHandsLevels,\r\n                        isDealerAnimationEnabled,\r\n                        isSoundEnabled,\r\n                        useBlueCards,\r\n                        useGoldHands:\r\n                            options && options.nextUseGoldHands !== undefined\r\n                                ? options.nextUseGoldHands\r\n                                : useGoldHands\r\n                    },\r\n                    (options && options.nextTrainingHands) || trainingHands,\r\n                    props.trainingStatus.trainingProgress,\r\n                    props.progress\r\n                )\r\n        );\r\n    };\r\n\r\n    const casinoRuleChangeHandler = (nextCasinoRules: CasinoRules) => {\r\n        const nextTrainingHands = getTrainingHands(nextCasinoRules);\r\n        const nextGoldHandsNumber = getGoldHandsNumber(nextTrainingHands, goldHandsLevels);\r\n\r\n        setGoldHandsNumber(nextGoldHandsNumber);\r\n        setTrainingHands(nextTrainingHands);\r\n        areGoldHandsBlockingProgressHandler({ nextCasinoRules, nextTrainingHands });\r\n    };\r\n\r\n    const saveHandler = () => {\r\n        const nextGameConfig: GameConfig = {\r\n            casinoRules,\r\n            goldHandsLevels,\r\n            isDealerAnimationEnabled,\r\n            isSoundEnabled,\r\n            useBlueCards,\r\n            useGoldHands\r\n        };\r\n        props.setGameConfig(nextGameConfig);\r\n        updateGameConfig(nextGameConfig);\r\n        props.navigation.navigate(RouteNames.table);\r\n    };\r\n\r\n    const isSaveButtonEnabled =\r\n        (props.gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] !==\r\n            casinoRules[CasinoRulesKeys.blackjackPeek] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doublingAfterSplit] !==\r\n                casinoRules[CasinoRulesKeys.doublingAfterSplit] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.doubling] !==\r\n                casinoRules[CasinoRulesKeys.doubling] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.hitSplitAces] !==\r\n                casinoRules[CasinoRulesKeys.hitSplitAces] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.holeCard] !==\r\n                casinoRules[CasinoRulesKeys.holeCard] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.splitsNumber] !==\r\n                casinoRules[CasinoRulesKeys.splitsNumber] ||\r\n            props.gameConfig.casinoRules[CasinoRulesKeys.surrender] !==\r\n                casinoRules[CasinoRulesKeys.surrender] ||\r\n            props.gameConfig.goldHandsLevels[1] !== goldHandsLevels[1] ||\r\n            props.gameConfig.goldHandsLevels[2] !== goldHandsLevels[2] ||\r\n            props.gameConfig.goldHandsLevels[3] !== goldHandsLevels[3] ||\r\n            props.gameConfig.goldHandsLevels[4] !== goldHandsLevels[4] ||\r\n            props.gameConfig.isDealerAnimationEnabled !== isDealerAnimationEnabled ||\r\n            props.gameConfig.isSoundEnabled !== isSoundEnabled ||\r\n            props.gameConfig.useBlueCards !== useBlueCards ||\r\n            props.gameConfig.useGoldHands !== useGoldHands) &&\r\n        isSomeLevelSelected(goldHandsLevels);\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            style={{\r\n                flexGrow: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.basicStrategyTable}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 8,\r\n                    paddingHorizontal: 16,\r\n                    paddingVertical: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={splitColor}\r\n                    isEnabled={true}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.basicStrategyTable);\r\n                    }}\r\n                    text=\"Basic strategy table\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                {areGoldHandsBlockingProgress && (\r\n                    <Text\r\n                        style={{\r\n                            color: warningColor,\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingTop: 16\r\n                        }}\r\n                    >\r\n                        ⚠️ The selected Gold hands levels are blocking untrained hands. Modify the\r\n                        selected levels or disable Gold Hands to train the missing hands\r\n                    </Text>\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.casinoRules}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Casino rules\r\n                </Text>\r\n                <Divider />\r\n\r\n                <DoublingPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={\r\n                        casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                        casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                    }\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                {/* TODO Create a help icon on Hit split aces */}\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    isDisabled={casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.hitSplitAces}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        hideLabel={true}\r\n                        onValueChange={casinoRuleChangeHandler}\r\n                        ruleName={CasinoRulesKeys.holeCard}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <View>\r\n                        {/* TODO Create a help icon on Hole card */}\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20\r\n                            }}\r\n                        >\r\n                            {CasinoRulesKeys.holeCard}\r\n                        </Text>\r\n\r\n                        <RuleSwitcher\r\n                            casinoRules={casinoRules}\r\n                            isDisabled={!casinoRules[CasinoRulesKeys.holeCard]}\r\n                            onValueChange={casinoRuleChangeHandler}\r\n                            ruleName={CasinoRulesKeys.blackjackPeek}\r\n                            setCasinoRules={setCasinoRules}\r\n                        />\r\n                    </View>\r\n                </View>\r\n\r\n                <SplitsNumberPicker\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n\r\n                <RuleSwitcher\r\n                    casinoRules={casinoRules}\r\n                    onValueChange={casinoRuleChangeHandler}\r\n                    ruleName={CasinoRulesKeys.surrender}\r\n                    setCasinoRules={setCasinoRules}\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.appSettings}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ padding: 16 }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    App settings\r\n                </Text>\r\n                <Divider />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setUseBlueCards}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={useBlueCards}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Blue cards\r\n                    </Text>\r\n                    <HelpIcon\r\n                        onPress={() => {\r\n                            props.navigation.navigate(RouteNames.blueCardsInfo);\r\n                        }}\r\n                    />\r\n                </View>\r\n\r\n                {props.progress === 100 && useBlueCards && (\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontStyle: 'italic',\r\n                            paddingVertical: 16\r\n                        }}\r\n                    >\r\n                        Blue cards don't have any effect on 100% progress. Reset the training if you\r\n                        want to see them again\r\n                    </Text>\r\n                )}\r\n\r\n                <View\r\n                    style={{\r\n                        alignItems: 'flex-start',\r\n                        flexDirection: 'row',\r\n                        paddingTop: 16,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    <Switch\r\n                        onValueChange={(value) => {\r\n                            setUseGoldHands(value);\r\n                            areGoldHandsBlockingProgressHandler({ nextUseGoldHands: value });\r\n                        }}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={useGoldHands}\r\n                    />\r\n\r\n                    <View>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                            <Text\r\n                                style={{\r\n                                    color: areGoldHandsBlockingProgress ? warningColor : 'white',\r\n                                    fontSize: 20\r\n                                }}\r\n                            >\r\n                                Gold hands\r\n                            </Text>\r\n                            <HelpIcon\r\n                                onPress={() => {\r\n                                    props.navigation.navigate(RouteNames.goldHandsInfo);\r\n                                }}\r\n                            />\r\n                        </View>\r\n\r\n                        <View\r\n                            style={{\r\n                                marginTop: 16,\r\n                                opacity: useGoldHands ? undefined : 0.3\r\n                            }}\r\n                        >\r\n                            <View style={{ flexDirection: 'row' }}>\r\n                                <Text\r\n                                    style={{\r\n                                        ...textStyle,\r\n                                        color: areGoldHandsBlockingProgress ? warningColor : 'white'\r\n                                    }}\r\n                                >\r\n                                    Hand levels\r\n                                </Text>\r\n                                <HelpIcon\r\n                                    onPress={() => {\r\n                                        props.navigation.navigate(RouteNames.goldHandsLevelsInfo);\r\n                                    }}\r\n                                />\r\n                            </View>\r\n\r\n                            <View\r\n                                style={{\r\n                                    flexDirection: 'row',\r\n                                    flexWrap: 'wrap'\r\n                                }}\r\n                            >\r\n                                {Object.keys(goldHandsLevels).map((numberKey) => {\r\n                                    const number = parseInt(numberKey, 10);\r\n                                    return (\r\n                                        <React.Fragment key={numberKey}>\r\n                                            <Switch\r\n                                                disabled={!useGoldHands}\r\n                                                onValueChange={(newValue) => {\r\n                                                    const nextGoldHandsLevels = {\r\n                                                        ...goldHandsLevels,\r\n                                                        [number]: newValue\r\n                                                    };\r\n                                                    setGoldHandsLevels(nextGoldHandsLevels);\r\n                                                    setGoldHandsNumber(\r\n                                                        getGoldHandsNumber(\r\n                                                            trainingHands,\r\n                                                            nextGoldHandsLevels\r\n                                                        )\r\n                                                    );\r\n                                                    areGoldHandsBlockingProgressHandler({\r\n                                                        nextGoldHandsLevels\r\n                                                    });\r\n                                                }}\r\n                                                style={{ marginTop: 16 }}\r\n                                                trackColor={{ true: hitColor, false: 'white' }}\r\n                                                value={goldHandsLevels[number] || false}\r\n                                            />\r\n                                            <Text\r\n                                                style={{\r\n                                                    ...textStyle,\r\n                                                    color: areGoldHandsBlockingProgress\r\n                                                        ? warningColor\r\n                                                        : 'white',\r\n                                                    marginTop: 16,\r\n                                                    paddingLeft: 4\r\n                                                }}\r\n                                            >\r\n                                                {numberKey}\r\n                                            </Text>\r\n                                        </React.Fragment>\r\n                                    );\r\n                                })}\r\n                            </View>\r\n                            <Text style={{ ...textStyle, marginTop: 16, textAlign: 'center' }}>\r\n                                ({goldHandsNumber} gold hands)\r\n                            </Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep} style={{ padding: 16 }}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontWeight: 'bold',\r\n                        marginBottom: 8,\r\n                        width: '100%'\r\n                    }}\r\n                >\r\n                    Animations\r\n                </Text>\r\n                <Divider />\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsSoundEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isSoundEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Sound effects 🔊\r\n                    </Text>\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', paddingTop: 16, width: '100%' }}>\r\n                    <Switch\r\n                        onValueChange={setIsDealerAnimationEnabled}\r\n                        style={{ marginRight: 8 }}\r\n                        trackColor={{ true: hitColor, false: 'white' }}\r\n                        value={isDealerAnimationEnabled}\r\n                    />\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        Dealer cards delay\r\n                    </Text>\r\n                </View>\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingHorizontal: 16,\r\n                    paddingTop: 24\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={isSaveButtonEnabled}\r\n                    marginBottom={40}\r\n                    onPress={saveHandler}\r\n                    text=\"Save\"\r\n                    width=\"100%\"\r\n                />\r\n\r\n                <Divider />\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={props.phase === Phases.finished}\r\n                    marginTop={40}\r\n                    onPress={() => {\r\n                        props.navigation.navigate(RouteNames.onboarding);\r\n                    }}\r\n                    text=\"Onboarding\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.resetTraining}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{\r\n                    alignItems: 'center',\r\n                    paddingBottom: 16,\r\n                    paddingHorizontal: 16\r\n                }}\r\n            >\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={dangerColor}\r\n                    isEnabled={true}\r\n                    marginTop={8}\r\n                    onPress={() => {\r\n                        Alert.alert(\r\n                            'Reset training',\r\n                            'Resetting the training will mark all hands as untrained, ' +\r\n                                'setting the progress and precision indicators to 0%, ' +\r\n                                'and set the player earnings to 0$ as well. ' +\r\n                                'Are you sure you want to reset the training?',\r\n                            [\r\n                                {\r\n                                    text: 'Cancel',\r\n                                    style: 'cancel'\r\n                                },\r\n                                {\r\n                                    text: 'Reset',\r\n                                    onPress: () => {\r\n                                        const nextTrainingStatus = getDefaultTrainingStatus();\r\n                                        props.setTrainingStatus(nextTrainingStatus);\r\n                                        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n                                        updatePlayerEarnings(0);\r\n                                    }\r\n                                }\r\n                            ]\r\n                        );\r\n                    }}\r\n                    text=\"Reset training\"\r\n                    width=\"100%\"\r\n                />\r\n            </OnBoardingSection>\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands,\r\n    TrainingPairRepresentation\r\n} from '../types';\r\n\r\ntype FailedHandsProps = {\r\n    failedTrainingPairs: TrainingPairRepresentation[];\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const FailedHands: React.FC<FailedHandsProps> = (props) => {\r\n    return (\r\n        <OnBoardingSection\r\n            onBoardingStep={props.onBoardingStep}\r\n            style={{ alignItems: undefined, flex: 1 }}\r\n        >\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Failed hands\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{ flex: 1 }}\r\n            >\r\n                {props.failedTrainingPairs.length === 0 ? (\r\n                    <View style={{ alignItems: 'center', flex: 1, justifyContent: 'center' }}>\r\n                        <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                            No failed hands so far. Nice job!\r\n                        </Text>\r\n                    </View>\r\n                ) : (\r\n                    Object.values(props.failedTrainingPairs).map((failedTrainingPair) => {\r\n                        const handName = props.trainingHands[failedTrainingPair.handCode].name;\r\n\r\n                        return (\r\n                            <View key={handName} style={{ marginBottom: 16, width: '100%' }}>\r\n                                <View\r\n                                    style={{\r\n                                        alignItems: 'center',\r\n                                        flexDirection: 'row',\r\n                                        justifyContent: 'space-between'\r\n                                    }}\r\n                                >\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row'\r\n                                        }}\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName}\r\n                                        </Text>\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            vs dealer's{' '}\r\n                                        </Text>\r\n                                        <Text\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 16,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {failedTrainingPair.dealerSymbol}\r\n                                        </Text>\r\n                                    </View>\r\n                                    <View\r\n                                        style={{\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        <TouchableOpacity\r\n                                            onPress={\r\n                                                props.phase !== Phases.finished\r\n                                                    ? undefined\r\n                                                    : () => {\r\n                                                          const trainingPair = getSpecificTrainingPair(\r\n                                                              failedTrainingPair.handCode,\r\n                                                              failedTrainingPair.dealerSymbol,\r\n                                                              props.gameConfig.casinoRules\r\n                                                          );\r\n                                                          props.startTrainingRound(\r\n                                                              trainingPair.player,\r\n                                                              trainingPair.dealer\r\n                                                          );\r\n                                                          props.navigation.navigate(\r\n                                                              RouteNames.table\r\n                                                          );\r\n                                                      }\r\n                                            }\r\n                                        >\r\n                                            <Text\r\n                                                style={{\r\n                                                    backgroundColor: doubleColor,\r\n                                                    borderRadius: 16,\r\n                                                    color: 'white',\r\n                                                    fontSize: 20,\r\n                                                    marginBottom: 16,\r\n                                                    paddingHorizontal: 16,\r\n                                                    paddingVertical: 4,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                Train ➡️\r\n                                            </Text>\r\n                                        </TouchableOpacity>\r\n                                    </View>\r\n                                </View>\r\n                                <Divider />\r\n                            </View>\r\n                        );\r\n                    })\r\n                )}\r\n            </ScrollView>\r\n        </OnBoardingSection>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { CardSuit, SimpleCardSymbol, SpecialCardSymbol } from '../types';\r\n\r\nexport const GoldHandsInfo: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Gold hands\r\n            </Text>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    When Gold hands are enabled you will be dealt specific initial hands and dealer\r\n                    will be dealt specific up cards, prioritizing those you haven't trained yet and\r\n                    those which you didn't get right.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontStyle: 'italic', marginBottom: 16 }}\r\n                >\r\n                    Gold cards have golden symbols and a golden square (instead of the suit):\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: true,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Nine\r\n                            },\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: true,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SimpleCardSymbol.Eight\r\n                            }\r\n                        ],\r\n                        values: [17]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginVertical: 16 }}>\r\n                    Additionally, you can filter the hands you will be dealt by configuring the gold\r\n                    hands Levels.\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{ color: 'white', fontSize: 20, fontWeight: 'bold', marginBottom: 16 }}\r\n                >\r\n                    Notice that when enabling Gold hands you will get hands that are infrequent when\r\n                    playing in real scenarios so the results (i.e. the money earnings) are not\r\n                    relevant.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Once you have trained each possible hand, disable Gold hands in order to train\r\n                    in more similar conditions to the ones in real scenarios.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Another consequence of enabling Gold hands, for example, is that you will never\r\n                    be dealt a Blackjack as initial hand (because it's a hand that requires no\r\n                    training).\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={{\r\n                        bet: 1,\r\n                        cards: [\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.spades,\r\n                                symbol: SimpleCardSymbol.Ace\r\n                            },\r\n                            {\r\n                                isBlueCard: false,\r\n                                isGoldCard: false,\r\n                                suit: CardSuit.hearts,\r\n                                symbol: SpecialCardSymbol.Jack\r\n                            }\r\n                        ],\r\n                        values: [21]\r\n                    }}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { HandDecisionSet } from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ninterface HandDecisionsTableProps {\r\n    handDecisionSet: HandDecisionSet;\r\n}\r\n\r\nexport const HandDecisionsTable: React.FC<HandDecisionsTableProps> = (props) => (\r\n    <View style={{ width: '100%' }}>\r\n        {getObjectKeys(props.handDecisionSet).map((simpleCardSymbol) => {\r\n            return (\r\n                <View key={simpleCardSymbol} style={{ flexDirection: 'row', width: '100%' }}>\r\n                    <Text\r\n                        style={{\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            paddingTop: 12,\r\n                            textAlign: 'center',\r\n                            width: '15%'\r\n                        }}\r\n                    >\r\n                        {simpleCardSymbol}\r\n                    </Text>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: colors[props.handDecisionSet[simpleCardSymbol]],\r\n                            color: 'white',\r\n                            fontSize: 20,\r\n                            fontWeight: 'bold',\r\n                            marginTop: 8,\r\n                            paddingVertical: 4,\r\n                            paddingHorizontal: 8,\r\n                            textAlign: 'center',\r\n                            width: '85%'\r\n                        }}\r\n                    >\r\n                        {props.handDecisionSet[simpleCardSymbol]}\r\n                    </Text>\r\n                </View>\r\n            );\r\n        })}\r\n    </View>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getTrainingHands } from '../logic/training-hand';\r\n\r\nimport {\r\n    CardSuit,\r\n    CasinoRulesKeys,\r\n    Dictionary,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    SimpleCardSymbol,\r\n    SplitsNumber\r\n} from '../types';\r\n\r\ntype GoldHandsLevelsInfoProps = {\r\n    gameConfig: GameConfig;\r\n};\r\n\r\nconst levelsColor: Dictionary<string, number> = {\r\n    1: '#a0c5e4',\r\n    2: '#5496cf',\r\n    3: '#2e618d',\r\n    4: '#1a3750'\r\n};\r\n\r\nexport const GoldHandsLevelsInfo: React.FC<GoldHandsLevelsInfoProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.gameConfig.casinoRules);\r\n\r\n    const trainingHands = getTrainingHands(casinoRules);\r\n\r\n    const hardEight: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.clubs,\r\n                symbol: SimpleCardSymbol.Five\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.hearts,\r\n                symbol: SimpleCardSymbol.Three\r\n            }\r\n        ],\r\n        values: [8]\r\n    };\r\n    const splitNine: Hand = {\r\n        bet: 1,\r\n        cards: [\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.spades,\r\n                symbol: SimpleCardSymbol.Nine\r\n            },\r\n            {\r\n                isBlueCard: false,\r\n                isGoldCard: false,\r\n                suit: CardSuit.diamonds,\r\n                symbol: SimpleCardSymbol.Nine\r\n            }\r\n        ],\r\n        values: [18]\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Text\r\n                style={{\r\n                    color: 'white',\r\n                    fontSize: 24,\r\n                    fontWeight: 'bold',\r\n                    paddingTop: 16,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                Hand levels\r\n            </Text>\r\n\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    The level of a hand tells how many different actions must be memorized for that\r\n                    hand depending on the dealer's up card.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    For example, a Hard 8 has a single optimal action, regardless the dealer's up\r\n                    card, thus it is level 1.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={hardEight}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandDecisionsTable handDecisionSet={trainingHands[HandCode.Hard8].decisionSet} />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 32 }}>\r\n                    The more optimal actions you need to memorize for a hand, the higher the hand\r\n                    level is. For a 9,9 for example 4 different actions must be memorized depending\r\n                    on the dealer's up card, so it's level 4.\r\n                </Text>\r\n\r\n                <HandComponent\r\n                    hand={splitNine}\r\n                    handsNumber={1}\r\n                    isCurrentHand={false}\r\n                    isSoundEnabled={false}\r\n                    skipAnimation={true}\r\n                />\r\n                <HandDecisionsTable handDecisionSet={trainingHands[HandCode.Split9s].decisionSet} />\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16, marginTop: 32 }}>\r\n                    When disabling a level, the hands on that level will never be dealt as initial\r\n                    hands if Gold hands are enabled. For example, disabling level 1 will prevent\r\n                    Hard 8 from being dealt as initial hand while disabling level 4 will prevent\r\n                    9,9.\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20, marginBottom: 16 }}>\r\n                    Notice that the casino rules modify the level of some hands. For example, Hard\r\n                    16 is level 2 when Surrender is disabled but it becomes level 3 when Surrender\r\n                    is enabled. Here is a list of each hand level:\r\n                </Text>\r\n\r\n                <View style={{ flexDirection: 'row', marginBottom: 16 }}>\r\n                    {Object.keys(props.gameConfig.goldHandsLevels).map((level) => (\r\n                        <View\r\n                            key={level}\r\n                            style={{\r\n                                alignItems: 'center',\r\n                                flexDirection: 'row',\r\n                                width: '25%'\r\n                            }}\r\n                        >\r\n                            <Text style={{ color: 'white', fontSize: 20 }}>{level}</Text>\r\n                            <View\r\n                                style={{\r\n                                    marginLeft: 8,\r\n                                    backgroundColor: levelsColor[parseInt(level)],\r\n                                    height: 20,\r\n                                    width: 40\r\n                                }}\r\n                            />\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                    {Object.values(trainingHands).map((trainingHand) => (\r\n                        <Text\r\n                            key={trainingHand.name}\r\n                            style={{\r\n                                backgroundColor: levelsColor[trainingHand.level],\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                marginHorizontal: '1.5%',\r\n                                marginVertical: 4,\r\n                                textAlign: 'center',\r\n                                width: '30%'\r\n                            }}\r\n                        >\r\n                            {trainingHand.name}\r\n                        </Text>\r\n                    ))}\r\n                </View>\r\n\r\n                <View style={{ marginBottom: 16 }}>\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.blackjackPeek}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <DoublingPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        isDisabled={\r\n                            casinoRules[CasinoRulesKeys.doubling] === Doubling.none ||\r\n                            casinoRules[CasinoRulesKeys.splitsNumber] === SplitsNumber.none\r\n                        }\r\n                        ruleName={CasinoRulesKeys.doublingAfterSplit}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n\r\n                    <SplitsNumberPicker casinoRules={casinoRules} setCasinoRules={setCasinoRules} />\r\n\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        ruleName={CasinoRulesKeys.surrender}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                </View>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { DoublingPicker } from '../components/casino-rules/doubling-picker';\r\nimport { RuleSwitcher } from '../components/casino-rules/rule-switcher';\r\nimport { SplitsNumberPicker } from '../components/casino-rules/splits-number-picker';\r\nimport { HandDecisionsTable } from '../components/hand-decisions-table';\r\nimport { getHandDecisionSetLevel, handDecisionSetGetters } from '../logic/hand-decision-set';\r\nimport { AppRoute, CasinoRules, CasinoRulesKeys, RouteNames } from '../types';\r\n\r\ntype HandDecisionsProps = {\r\n    casinoRules: CasinoRules;\r\n    route: AppRoute<RouteNames.handDecisions>;\r\n};\r\n\r\nexport const HandDecisions: React.FC<HandDecisionsProps> = (props) => {\r\n    const [casinoRules, setCasinoRules] = useState(props.casinoRules);\r\n\r\n    const trainingHand = props.route.params['trainingHand'];\r\n    const handDecisionSet = handDecisionSetGetters[trainingHand.code](casinoRules);\r\n\r\n    return (\r\n        <ScrollView\r\n            style={{\r\n                flex: 1,\r\n                padding: 16,\r\n                width: '100%'\r\n            }}\r\n            contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n        >\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between',\r\n                    paddingBottom: 16,\r\n                    width: '100%'\r\n                }}\r\n            >\r\n                <Text style={{ color: 'white', fontSize: 24 }}>{trainingHand.name} decisions</Text>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 20,\r\n                        fontStyle: 'italic'\r\n                    }}\r\n                >\r\n                    Level {getHandDecisionSetLevel(handDecisionSet)}\r\n                </Text>\r\n            </View>\r\n\r\n            <HandDecisionsTable handDecisionSet={handDecisionSet} />\r\n\r\n            {trainingHand.dependencies.map((dependency) => {\r\n                return dependency === CasinoRulesKeys.doubling ? (\r\n                    <DoublingPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : dependency === CasinoRulesKeys.splitsNumber ? (\r\n                    <SplitsNumberPicker\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                ) : (\r\n                    <RuleSwitcher\r\n                        casinoRules={casinoRules}\r\n                        key={dependency}\r\n                        ruleName={dependency}\r\n                        setCasinoRules={setCasinoRules}\r\n                    />\r\n                );\r\n            })}\r\n        </ScrollView>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\nimport { Button } from '../components/button';\r\nimport { doubleColor, hitColor } from '../constants';\r\nimport { CardSuit } from '../types';\r\n\r\ninterface OnboardingProps {\r\n    skipOnboardingHandler: () => void;\r\n    startOnboardingHandler: () => void;\r\n}\r\n\r\nexport const Onboarding: React.FC<OnboardingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Welcome to\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 30,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    {CardSuit.clubs}\r\n                    {CardSuit.hearts} Blackjump {CardSuit.diamonds}\r\n                    {CardSuit.spades}\r\n                </Text>\r\n\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        paddingBottom: 32,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    The app that will help you master Blackjack basic strategy\r\n                </Text>\r\n\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={hitColor}\r\n                    isEnabled={true}\r\n                    onPress={props.startOnboardingHandler}\r\n                    text=\"Start onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={doubleColor}\r\n                    isEnabled={true}\r\n                    marginTop={16}\r\n                    onPress={props.skipOnboardingHandler}\r\n                    text=\"Skip onboarding\"\r\n                    width=\"75%\"\r\n                />\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { View } from 'react-native';\r\nimport { colors } from '../constants';\r\nimport { getRandomCard } from '../logic/card';\r\nimport { createDealerHand, createHand } from '../logic/hand';\r\nimport { onBoardingSteps } from '../logic/onboarding';\r\nimport { getRandomTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    BaseDecisions,\r\n    CardSuit,\r\n    CasinoRulesKeys,\r\n    Doubling,\r\n    GameConfig,\r\n    Hand,\r\n    Phases,\r\n    PlayerDecisions,\r\n    SimpleCardSymbol,\r\n    TrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { Button } from './button';\r\n\r\nexport interface ActionsProps {\r\n    gameConfig: GameConfig;\r\n    handlers: {\r\n        double: () => void;\r\n        hit: () => void;\r\n        split: () => void;\r\n        stand: () => void;\r\n        surrender: () => void;\r\n    };\r\n    isDoubleEnabled: boolean;\r\n    isHitEnabled: boolean;\r\n    isSplitEnabled: boolean;\r\n    isSurrenderEnabled: boolean;\r\n    phase: Phases;\r\n    onBoardingStep: number;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: TrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n}\r\n\r\nexport const Actions: React.FC<ActionsProps> = (props) => {\r\n    const isPlayerTurn = props.phase === Phases.player;\r\n\r\n    const isDoublingAvailable =\r\n        props.gameConfig.casinoRules[CasinoRulesKeys.doubling] > Doubling.none;\r\n    const isSurrenderAvailable = props.gameConfig.casinoRules[CasinoRulesKeys.surrender];\r\n\r\n    const activeOptionalButtons = 1 + Number(isDoublingAvailable) + Number(isSurrenderAvailable);\r\n    const optionalButtonsWidth = Math.floor((100 * 100) / activeOptionalButtons) / 100;\r\n\r\n    return props.phase === Phases.finished ? (\r\n        <Button\r\n            height={112}\r\n            backgroundColor={colors[BaseDecisions.hit]}\r\n            isEnabled={true}\r\n            onPress={() => {\r\n                let dealerHand: Hand;\r\n                let playerHand: Hand;\r\n\r\n                if (\r\n                    onBoardingSteps[props.onBoardingStep] &&\r\n                    onBoardingSteps[props.onBoardingStep].id === 1\r\n                ) {\r\n                    /* Prevent dealing a Blackjack as initial hand when onboarding is active */\r\n                    playerHand = createHand([\r\n                        {\r\n                            isBlueCard: false,\r\n                            isGoldCard: false,\r\n                            suit: CardSuit.clubs,\r\n                            symbol: SimpleCardSymbol.Seven\r\n                        },\r\n                        getRandomCard()\r\n                    ]);\r\n                    dealerHand = createDealerHand(\r\n                        props.gameConfig.casinoRules,\r\n                        SimpleCardSymbol.Six\r\n                    );\r\n                } else if (props.gameConfig.useGoldHands) {\r\n                    const trainingPair = getRandomTrainingPair(\r\n                        props.trainingHands,\r\n                        props.trainingProgress,\r\n                        props.gameConfig\r\n                    );\r\n                    playerHand = trainingPair.player;\r\n                    dealerHand = trainingPair.dealer;\r\n                } else {\r\n                    playerHand = createHand([getRandomCard(), getRandomCard()]);\r\n                    dealerHand = createDealerHand(props.gameConfig.casinoRules);\r\n                }\r\n\r\n                props.startTrainingRound(playerHand, dealerHand);\r\n            }}\r\n            text=\"Train\"\r\n            width=\"100%\"\r\n        />\r\n    ) : (\r\n        <React.Fragment>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.hit]}\r\n                    isEnabled={isPlayerTurn && props.isHitEnabled}\r\n                    onPress={props.handlers.hit}\r\n                    text={BaseDecisions.hit}\r\n                    width=\"50%\"\r\n                />\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[BaseDecisions.stand]}\r\n                    isEnabled={isPlayerTurn}\r\n                    onPress={props.handlers.stand}\r\n                    text={BaseDecisions.stand}\r\n                    width=\"50%\"\r\n                />\r\n            </View>\r\n            <View style={{ width: '100%', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                <Button\r\n                    height={56}\r\n                    backgroundColor={colors[PlayerDecisions.split]}\r\n                    isEnabled={isPlayerTurn && props.isSplitEnabled}\r\n                    onPress={props.handlers.split}\r\n                    text={PlayerDecisions.split}\r\n                    width={`${optionalButtonsWidth}%`}\r\n                />\r\n                {isDoublingAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.double]}\r\n                        isEnabled={isPlayerTurn && props.isDoubleEnabled}\r\n                        onPress={props.handlers.double}\r\n                        text={PlayerDecisions.double}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n                {isSurrenderAvailable && (\r\n                    <Button\r\n                        height={56}\r\n                        backgroundColor={colors[PlayerDecisions.surrender]}\r\n                        isEnabled={isPlayerTurn && props.isSurrenderEnabled}\r\n                        onPress={props.handlers.surrender}\r\n                        text={PlayerDecisions.surrender}\r\n                        width={`${optionalButtonsWidth}%`}\r\n                    />\r\n                )}\r\n            </View>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { StyleProp, Text, TextStyle, TouchableOpacity, View } from 'react-native';\r\nimport { dangerColor, splitColor } from '../constants';\r\nimport { DecisionEvaluation } from '../types';\r\n\r\ninterface DecisionEvaluationProps {\r\n    decisionEvaluation: DecisionEvaluation;\r\n    showDecisionsHandler?: () => void;\r\n}\r\n\r\nconst textProperties: StyleProp<TextStyle> = {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center'\r\n};\r\n\r\nexport const DecisionEvaluationComponent: React.FC<DecisionEvaluationProps> = (props) => (\r\n    <View\r\n        style={{\r\n            alignItems: 'center',\r\n            backgroundColor: props.decisionEvaluation.isHit ? splitColor : dangerColor,\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            width: '100%'\r\n        }}\r\n    >\r\n        {props.decisionEvaluation.isHit ? (\r\n            <Text style={textProperties}>Well done</Text>\r\n        ) : (\r\n            <View\r\n                style={{\r\n                    alignItems: 'center',\r\n                    flexDirection: 'row',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'center',\r\n                    paddingHorizontal: 8\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.handName}\r\n                </Text>\r\n                <Text style={textProperties}> must </Text>\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold'\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.dynamicDecision}\r\n                </Text>\r\n                <Text style={textProperties}> vs dealer's </Text>\r\n                <Text\r\n                    style={{\r\n                        ...textProperties,\r\n                        fontWeight: 'bold',\r\n                        marginRight: 8\r\n                    }}\r\n                >\r\n                    {props.decisionEvaluation.dealerSymbol}\r\n                </Text>\r\n                <TouchableOpacity onPress={props.showDecisionsHandler} style={{ marginTop: 8 }}>\r\n                    <Text\r\n                        style={{\r\n                            backgroundColor: 'white',\r\n                            borderRadius: 16,\r\n                            color: dangerColor,\r\n                            fontSize: 20,\r\n                            paddingHorizontal: 16,\r\n                            paddingVertical: 2,\r\n                            textAlign: 'center'\r\n                        }}\r\n                    >\r\n                        {props.decisionEvaluation.handName} decisions ➡️\r\n                    </Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )}\r\n    </View>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text, View } from 'react-native';\r\nimport { Actions, ActionsProps } from '../components/actions';\r\nimport { DecisionEvaluationComponent } from '../components/decision-evaluation';\r\nimport { Divider } from '../components/divider';\r\nimport { HandComponent } from '../components/hand-component';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport {\r\n    AppNavigation,\r\n    DecisionEvaluation,\r\n    GameConfig,\r\n    Hand,\r\n    OnBoardingSections,\r\n    Phases,\r\n    Player,\r\n    RouteNames,\r\n    TrainingHands\r\n} from '../types';\r\n\r\ntype TableProps = ActionsProps & {\r\n    dealerHand?: Hand;\r\n    decisionEvaluation?: DecisionEvaluation;\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    peeking: boolean;\r\n    phase: Phases;\r\n    player: Player;\r\n    trainingHands: TrainingHands;\r\n};\r\n\r\nexport const Table: React.FC<TableProps> = (props) => (\r\n    <React.Fragment>\r\n        <View\r\n            style={{\r\n                flex: 1,\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableDealerHand}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ minHeight: 128, justifyContent: 'center' }}\r\n            >\r\n                {props.dealerHand && (\r\n                    <HandComponent\r\n                        hand={props.dealerHand}\r\n                        handsNumber={1}\r\n                        isCurrentHand={props.phase === Phases.dealer}\r\n                        isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                        navigation={props.navigation}\r\n                        peeking={props.peeking}\r\n                    />\r\n                )}\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tableFeedback}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ height: 80, justifyContent: 'center', width: '100%' }}\r\n            >\r\n                <Divider />\r\n                {props.decisionEvaluation ? (\r\n                    <DecisionEvaluationComponent\r\n                        decisionEvaluation={props.decisionEvaluation}\r\n                        showDecisionsHandler={\r\n                            props.onBoardingStep > -1\r\n                                ? undefined\r\n                                : () => {\r\n                                      props.navigation.navigate(RouteNames.handDecisions, {\r\n                                          trainingHand:\r\n                                              props.trainingHands[props.player.lastActionHand!]\r\n                                      });\r\n                                  }\r\n                        }\r\n                    />\r\n                ) : (\r\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingHorizontal: 8,\r\n                                paddingTop: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            Dealer must draw to 16\r\n                        </Text>\r\n                        <Text\r\n                            style={{\r\n                                color: 'white',\r\n                                fontSize: 20,\r\n                                paddingBottom: 8,\r\n                                paddingHorizontal: 8,\r\n                                textAlign: 'center'\r\n                            }}\r\n                        >\r\n                            and stand on all 17s\r\n                        </Text>\r\n                    </View>\r\n                )}\r\n                <Divider />\r\n            </OnBoardingSection>\r\n\r\n            <OnBoardingSection\r\n                isHighlighted={OnBoardingSections.tablePlayerHands}\r\n                onBoardingStep={props.onBoardingStep}\r\n                style={{ flex: 1 }}\r\n            >\r\n                <ScrollView\r\n                    contentContainerStyle={{\r\n                        flexGrow: 1,\r\n                        justifyContent: 'space-evenly'\r\n                    }}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {props.player.hands.map((hand, index) => (\r\n                        <HandComponent\r\n                            hand={hand}\r\n                            handsNumber={props.player.hands.length}\r\n                            isCurrentHand={\r\n                                props.phase === Phases.player && index === props.player.handIndex\r\n                            }\r\n                            isSoundEnabled={props.gameConfig.isSoundEnabled}\r\n                            key={index}\r\n                            navigation={props.navigation}\r\n                        />\r\n                    ))}\r\n                </ScrollView>\r\n            </OnBoardingSection>\r\n        </View>\r\n\r\n        <OnBoardingSection\r\n            isHighlighted={OnBoardingSections.tableActions}\r\n            onBoardingStep={props.onBoardingStep}\r\n        >\r\n            <Actions\r\n                gameConfig={props.gameConfig}\r\n                handlers={props.handlers}\r\n                isDoubleEnabled={props.isDoubleEnabled}\r\n                isHitEnabled={props.isHitEnabled}\r\n                isSplitEnabled={props.isSplitEnabled}\r\n                isSurrenderEnabled={props.isSurrenderEnabled}\r\n                phase={props.phase}\r\n                onBoardingStep={props.onBoardingStep}\r\n                startTrainingRound={props.startTrainingRound}\r\n                trainingHands={props.trainingHands}\r\n                trainingProgress={props.trainingProgress}\r\n            />\r\n        </OnBoardingSection>\r\n    </React.Fragment>\r\n);\r\n","import React from 'react';\r\nimport { ScrollView, Text } from 'react-native';\r\n\r\nexport const TrainingCompleted: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <ScrollView\r\n                style={{\r\n                    margin: 16\r\n                }}\r\n                contentContainerStyle={{\r\n                    alignItems: 'center',\r\n                    flexGrow: 1,\r\n                    justifyContent: 'center'\r\n                }}\r\n            >\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingTop: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training completed\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 64, marginVertical: 32 }}>🎉🍾</Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 24, marginBottom: 32 }}>\r\n                    Congratulations! You have trained every possible hand. You can now test your\r\n                    skills in a real casino 💸💸\r\n                </Text>\r\n\r\n                <Text style={{ color: 'white', fontSize: 20 }}>\r\n                    Master the Basic Strategy: reset the training stats from the configuration menu\r\n                    and keep practicing until you make no errors at all\r\n                </Text>\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { ScrollView, Text, TouchableOpacity, View } from 'react-native';\r\nimport { Divider } from '../components/divider';\r\nimport { OnBoardingSection } from '../components/onboarding-section';\r\nimport { doubleColor } from '../constants';\r\nimport { getSpecificTrainingPair } from '../logic/training-pair';\r\nimport {\r\n    AppNavigation,\r\n    GameConfig,\r\n    Hand,\r\n    HandCode,\r\n    Phases,\r\n    RouteNames,\r\n    TrainingHands as ITrainingHands,\r\n    TrainingProgress\r\n} from '../types';\r\nimport { getObjectKeys } from '../utils';\r\n\r\ntype TrainingHandsProps = {\r\n    gameConfig: GameConfig;\r\n    navigation: AppNavigation;\r\n    onBoardingStep: number;\r\n    phase: Phases;\r\n    startTrainingRound: (playerHand: Hand, dealerHand: Hand) => void;\r\n    trainingHands: ITrainingHands;\r\n    trainingProgress: TrainingProgress;\r\n};\r\n\r\nexport const TrainingHands: React.FC<TrainingHandsProps> = (props) => {\r\n    const [unfoldedHand, setUnfoldedHand] = useState<HandCode | undefined>(HandCode.Hard5);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <OnBoardingSection onBoardingStep={props.onBoardingStep}>\r\n                <Text\r\n                    style={{\r\n                        color: 'white',\r\n                        fontSize: 24,\r\n                        fontWeight: 'bold',\r\n                        paddingVertical: 16,\r\n                        textAlign: 'center'\r\n                    }}\r\n                >\r\n                    Training hands\r\n                </Text>\r\n            </OnBoardingSection>\r\n            <ScrollView\r\n                style={{\r\n                    flex: 1\r\n                }}\r\n                contentContainerStyle={{ alignItems: 'center', justifyContent: 'center' }}\r\n            >\r\n                {getObjectKeys(props.trainingProgress).map((handCode) => {\r\n                    const trainingHandStatus = props.trainingProgress[handCode];\r\n                    const handName = props.trainingHands[handCode].name;\r\n\r\n                    return (\r\n                        <OnBoardingSection\r\n                            isHighlighted={unfoldedHand === handCode}\r\n                            key={handCode}\r\n                            onBoardingStep={props.onBoardingStep}\r\n                            style={{ paddingVertical: 8, paddingHorizontal: 16, width: '100%' }}\r\n                        >\r\n                            <TouchableOpacity\r\n                                onPress={() => {\r\n                                    setUnfoldedHand(\r\n                                        unfoldedHand !== handCode ? handCode : undefined\r\n                                    );\r\n                                }}\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                <Text\r\n                                    style={{\r\n                                        color: 'white',\r\n                                        fontSize: 20,\r\n                                        marginBottom: 16,\r\n                                        textAlign: 'center'\r\n                                    }}\r\n                                >\r\n                                    {handName}\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            {unfoldedHand && unfoldedHand === handCode && (\r\n                                <React.Fragment>\r\n                                    <View\r\n                                        style={{\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            justifyContent: 'space-around',\r\n                                            opacity:\r\n                                                props.phase === Phases.finished ? undefined : 0.3\r\n                                        }}\r\n                                    >\r\n                                        {getObjectKeys(trainingHandStatus).map((dealerSymbol) => {\r\n                                            const backgroundColor =\r\n                                                trainingHandStatus[dealerSymbol] === 0\r\n                                                    ? '#333'\r\n                                                    : trainingHandStatus[dealerSymbol] === 1\r\n                                                    ? 'lightgreen'\r\n                                                    : 'lightcoral';\r\n\r\n                                            return (\r\n                                                <TouchableOpacity\r\n                                                    key={dealerSymbol}\r\n                                                    onPress={\r\n                                                        props.onBoardingStep > -1 ||\r\n                                                        props.phase !== Phases.finished\r\n                                                            ? undefined\r\n                                                            : () => {\r\n                                                                  const trainingPair = getSpecificTrainingPair(\r\n                                                                      handCode,\r\n                                                                      dealerSymbol,\r\n                                                                      props.gameConfig.casinoRules\r\n                                                                  );\r\n                                                                  props.startTrainingRound(\r\n                                                                      trainingPair.player,\r\n                                                                      trainingPair.dealer\r\n                                                                  );\r\n                                                                  props.navigation.navigate(\r\n                                                                      RouteNames.table\r\n                                                                  );\r\n                                                              }\r\n                                                    }\r\n                                                    style={{\r\n                                                        alignItems: 'center',\r\n                                                        backgroundColor: backgroundColor,\r\n                                                        borderRadius: 8,\r\n                                                        marginBottom: 8,\r\n                                                        paddingVertical: 4,\r\n                                                        width: '18%'\r\n                                                    }}\r\n                                                >\r\n                                                    <Text\r\n                                                        style={{\r\n                                                            color: 'white',\r\n                                                            fontSize: 20,\r\n                                                            fontWeight: 'bold'\r\n                                                        }}\r\n                                                    >\r\n                                                        {dealerSymbol}\r\n                                                    </Text>\r\n                                                </TouchableOpacity>\r\n                                            );\r\n                                        })}\r\n                                    </View>\r\n                                    <TouchableOpacity\r\n                                        onPress={\r\n                                            props.onBoardingStep > -1\r\n                                                ? undefined\r\n                                                : () => {\r\n                                                      props.navigation.navigate(\r\n                                                          RouteNames.handDecisions,\r\n                                                          {\r\n                                                              trainingHand:\r\n                                                                  props.trainingHands[handCode]\r\n                                                          }\r\n                                                      );\r\n                                                  }\r\n                                        }\r\n                                    >\r\n                                        <Text\r\n                                            style={{\r\n                                                backgroundColor: doubleColor,\r\n                                                borderRadius: 16,\r\n                                                color: 'white',\r\n                                                fontSize: 20,\r\n                                                marginVertical: 16,\r\n                                                marginHorizontal: 24,\r\n                                                paddingVertical: 4,\r\n                                                textAlign: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {handName} decisions ➡️\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                </React.Fragment>\r\n                            )}\r\n                            <Divider />\r\n                        </OnBoardingSection>\r\n                    );\r\n                })}\r\n            </ScrollView>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { Audio } from 'expo-av';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport failureSoundMp3 from './assets/failure.mp3';\r\nimport successSoundMp3 from './assets/success.mp3';\r\nimport {\r\n    getGameConfig,\r\n    getHasCompletedOnboarding,\r\n    getPlayerEarnings,\r\n    getTrainingProgress,\r\n    updateHasCompletedOnboarding,\r\n    updateTrainingProgress\r\n} from './src/async-storage';\r\nimport { NavBar } from './src/components/nav-bar';\r\nimport { OnboardingBar } from './src/components/onboarding-bar';\r\nimport { tableColor } from './src/constants';\r\nimport { getNextTrainingStatus, handleDealerTurn } from './src/logic/app-state';\r\nimport { evaluateDecision } from './src/logic/basic-strategy';\r\nimport { getRandomCard, symbolToSimpleSymbol } from './src/logic/card';\r\nimport { getDefaultGameConfig } from './src/logic/game-config';\r\nimport {\r\n    canBeDealerBlackjack,\r\n    canDouble,\r\n    canHit,\r\n    canSplit,\r\n    canSurrender,\r\n    isDealerBlackjack,\r\n    isFinished,\r\n    revealDealerHoleCard\r\n} from './src/logic/hand';\r\nimport { handToHandCode } from './src/logic/hand';\r\nimport { onBoardingSteps } from './src/logic/onboarding';\r\nimport {\r\n    createPlayer,\r\n    doubleCurrentHand,\r\n    getCurrentHand,\r\n    hitCurrentHand,\r\n    initializeHands,\r\n    isLastHand,\r\n    splitCurrentHand,\r\n    standCurrentHand,\r\n    startNextHand,\r\n    surrenderCurrentHand\r\n} from './src/logic/player';\r\nimport { getDefaultTrainingHands, getTrainingHands } from './src/logic/training-hand';\r\nimport { allTrainingPairsNumber } from './src/logic/training-pair';\r\nimport {\r\n    getAreGoldHandsBlockingProgress,\r\n    getDefaultTrainingStatus,\r\n    retrieveTrainingStatus\r\n} from './src/logic/training-status';\r\nimport {\r\n    AppNavigation,\r\n    BaseDecisions,\r\n    CasinoRulesKeys,\r\n    DecisionEvaluation,\r\n    Hand,\r\n    HandCode,\r\n    initialRouteName,\r\n    Phases,\r\n    Player,\r\n    PlayerDecision,\r\n    PlayerDecisions,\r\n    RouteNames,\r\n    RouteParams,\r\n    TrainingStatus\r\n} from './src/types';\r\nimport { playSound } from './src/utils';\r\nimport { BasicStrategyTable } from './src/views/basic-strategy-table';\r\nimport { BlueCardsInfo } from './src/views/blue-cards-info';\r\nimport { ConfigMenu } from './src/views/config-menu';\r\nimport { FailedHands } from './src/views/failed-hands';\r\nimport { GoldHandsInfo } from './src/views/gold-hands-info';\r\nimport { GoldHandsLevelsInfo } from './src/views/gold-hands-levels-info';\r\nimport { HandDecisions } from './src/views/hand-decisions';\r\nimport { Onboarding } from './src/views/onboarding';\r\nimport { Table } from './src/views/table';\r\nimport { TrainingCompleted } from './src/views/training-completed';\r\nimport { TrainingHands } from './src/views/training-hands';\r\n\r\nconst Stack = createStackNavigator<RouteParams>();\r\nlet navigationListener: Function | undefined;\r\n\r\nconst initializeSounds = () =>\r\n    Promise.all([\r\n        Audio.Sound.createAsync(failureSoundMp3),\r\n        Audio.Sound.createAsync(successSoundMp3)\r\n    ])\r\n        .then((results) => ({\r\n            failure: results[0].sound,\r\n            success: results[1].sound\r\n        }))\r\n        .catch((errors) => {\r\n            console.log(errors);\r\n            /* Failing to load audio is not a critical issue */\r\n            return undefined;\r\n        });\r\n\r\nexport default function App() {\r\n    const [areGoldHandsBlockingProgress, setAreGoldHandsBlockingProgress] = useState(false);\r\n    const [currentRoute, setCurrentRoute] = useState<string>(initialRouteName);\r\n    const [dealerHand, setDealerHand] = useState<Hand>();\r\n    const [decisionEvaluation, setDecisionEvaluation] = useState<DecisionEvaluation>();\r\n    const [decisionEvaluationTimeout, setDecisionEvaluationTimeout] = useState(0);\r\n    const [gameConfig, setGameConfig] = useState(getDefaultGameConfig());\r\n    const [onBoardingStep, setOnBoardingStep] = useState(-1);\r\n    const [peeking, setPeeking] = useState(false);\r\n    const [phase, setPhase] = useState<Phases>(Phases.finished);\r\n    const [player, setPlayer] = useState<Player>(createPlayer());\r\n    const [trainingHands, setTrainingHands] = useState(getDefaultTrainingHands());\r\n    const [sounds, setSounds] = useState<{ failure: Audio.Sound; success: Audio.Sound }>();\r\n    const [trainingStatus, setTrainingStatus] = useState(getDefaultTrainingStatus());\r\n\r\n    const navigationRef = useRef<NavigationContainerRef>(null);\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            getGameConfig(gameConfig),\r\n            getHasCompletedOnboarding(),\r\n            getPlayerEarnings(),\r\n            getTrainingProgress(),\r\n            initializeSounds()\r\n        ]).then((results) => {\r\n            setGameConfig(results[0]);\r\n            const nextTrainingHands = getTrainingHands(results[0].casinoRules);\r\n            setTrainingHands(nextTrainingHands);\r\n\r\n            if (!results[1]) {\r\n                ((navigationRef.current as unknown) as AppNavigation).navigate(\r\n                    RouteNames.onboarding\r\n                );\r\n            }\r\n\r\n            if (results[2]) {\r\n                setPlayer({ ...player, cash: results[2] });\r\n            }\r\n\r\n            if (results[3]) {\r\n                const nextTrainingStatus = retrieveTrainingStatus(results[3]);\r\n\r\n                setTrainingStatus(nextTrainingStatus);\r\n                setAreGoldHandsBlockingProgress(\r\n                    getAreGoldHandsBlockingProgress(\r\n                        results[0],\r\n                        nextTrainingHands,\r\n                        results[3],\r\n                        getProgress(nextTrainingStatus)\r\n                    )\r\n                );\r\n            }\r\n\r\n            setSounds(results[4]);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (navigationRef.current && !navigationListener) {\r\n            navigationListener = navigationRef.current.addListener('state', (event) => {\r\n                setCurrentRoute(event.data.state!.routes[event.data.state!.index!].name);\r\n            });\r\n        }\r\n    }, [navigationRef.current]);\r\n\r\n    const currentHand = getCurrentHand(player);\r\n    const isDoubleEnabled =\r\n        currentHand !== undefined && canDouble(currentHand, player.hands, gameConfig.casinoRules);\r\n    const isHitEnabled = currentHand !== undefined && canHit(player.hands, gameConfig.casinoRules);\r\n    const isSplitEnabled =\r\n        currentHand !== undefined &&\r\n        canSplit(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const isSurrenderEnabled =\r\n        currentHand !== undefined &&\r\n        canSurrender(currentHand, player.hands.length, gameConfig.casinoRules);\r\n    const currentDealerSymbol = dealerHand && symbolToSimpleSymbol(dealerHand.cards[0].symbol);\r\n\r\n    const updateOnBoardingStep = (direction: 1 | -1) => {\r\n        const nextStep = onBoardingStep + direction;\r\n        onBoardingSteps[nextStep]?.load((navigationRef.current as unknown) as AppNavigation);\r\n        setOnBoardingStep(nextStep);\r\n    };\r\n\r\n    const exitOnboarding = () => {\r\n        setOnBoardingStep(-1);\r\n        updateHasCompletedOnboarding(true);\r\n        ((navigationRef.current as unknown) as AppNavigation).navigate(RouteNames.table);\r\n    };\r\n\r\n    const getProgress = (_trainingStatus: TrainingStatus) =>\r\n        Math.floor((_trainingStatus.attemptedTrainingPairs * 1000) / allTrainingPairsNumber) / 10;\r\n    const progress = getProgress(trainingStatus);\r\n\r\n    useEffect(() => {\r\n        if (decisionEvaluationTimeout) {\r\n            clearTimeout(decisionEvaluationTimeout);\r\n        }\r\n        if (decisionEvaluation && decisionEvaluation.isHit) {\r\n            const nextTimeout = setTimeout(() => {\r\n                setDecisionEvaluation(undefined);\r\n            }, 1000);\r\n            setDecisionEvaluationTimeout(nextTimeout);\r\n        }\r\n    }, [decisionEvaluation]);\r\n\r\n    useEffect(() => {\r\n        if (phase === 'dealer') {\r\n            handleDealerTurn(dealerHand!, gameConfig, player, setDealerHand, setPhase, setPlayer);\r\n        }\r\n    }, [phase, dealerHand]);\r\n\r\n    const startTrainingRound = (playerHand: Hand, dealerHand: Hand) => {\r\n        const nextPlayer = { ...player };\r\n        initializeHands(nextPlayer, playerHand);\r\n\r\n        if (\r\n            gameConfig.casinoRules[CasinoRulesKeys.holeCard] &&\r\n            gameConfig.casinoRules[CasinoRulesKeys.blackjackPeek] &&\r\n            canBeDealerBlackjack(dealerHand)\r\n        ) {\r\n            setPeeking(true);\r\n            setTimeout(() => {\r\n                setPeeking(false);\r\n                if (isDealerBlackjack(dealerHand)) {\r\n                    revealDealerHoleCard(dealerHand);\r\n                    setPhase(Phases.dealer);\r\n                } else {\r\n                    setPhase(Phases.player);\r\n                }\r\n            }, 1500);\r\n        } else {\r\n            setPhase(\r\n                isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)\r\n                    ? Phases.dealer\r\n                    : Phases.player\r\n            );\r\n        }\r\n\r\n        setDealerHand(dealerHand);\r\n        setPlayer(nextPlayer);\r\n        setDecisionEvaluation(undefined);\r\n\r\n        if (onBoardingSteps[onBoardingStep] && onBoardingSteps[onBoardingStep].id === 1) {\r\n            updateOnBoardingStep(1);\r\n        }\r\n    };\r\n\r\n    const finishCurrentHand = (player: Player) => {\r\n        if (isLastHand(player)) {\r\n            setPhase(Phases.dealer);\r\n            // By setting the phase to dealer, the corresponding useEffect hook will be executed\r\n        } else {\r\n            const nextPlayer = { ...player };\r\n            startNextHand(\r\n                nextPlayer,\r\n                gameConfig.useBlueCards,\r\n                currentDealerSymbol!,\r\n                trainingHands,\r\n                trainingStatus.trainingProgress\r\n            );\r\n            setPlayer(nextPlayer);\r\n            if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n                finishCurrentHand(nextPlayer);\r\n            }\r\n        }\r\n    };\r\n\r\n    const evaluatePlayerDecision = (playerDecision: PlayerDecision, hand: Hand) => {\r\n        const nextDecisionEvaluation = evaluateDecision(\r\n            hand,\r\n            dealerHand!,\r\n            trainingHands,\r\n            {\r\n                canDouble: isDoubleEnabled,\r\n                canSplit: isSplitEnabled,\r\n                canSurrender: isSurrenderEnabled\r\n            },\r\n            playerDecision\r\n        );\r\n\r\n        if (gameConfig.isSoundEnabled && sounds) {\r\n            playSound(nextDecisionEvaluation.isHit ? sounds.success : sounds.failure);\r\n        }\r\n\r\n        setDecisionEvaluation(nextDecisionEvaluation);\r\n\r\n        const handCode = handToHandCode(currentHand);\r\n        let nextTrainingStatus = getNextTrainingStatus(\r\n            trainingStatus,\r\n            nextDecisionEvaluation.isHit,\r\n            handCode,\r\n            currentDealerSymbol!\r\n        );\r\n\r\n        if (handCode === HandCode.Split5s) {\r\n            // A 5,5 must also set the corresponding state for Hard 10\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard10,\r\n                currentDealerSymbol!\r\n            );\r\n        } else if (handCode === HandCode.Split10s) {\r\n            // A 10,10 must also set the corresponding state for Hard 20\r\n            nextTrainingStatus = getNextTrainingStatus(\r\n                nextTrainingStatus,\r\n                nextDecisionEvaluation.isHit,\r\n                HandCode.Hard20,\r\n                currentDealerSymbol!\r\n            );\r\n        }\r\n\r\n        setTrainingStatus(nextTrainingStatus);\r\n        updateTrainingProgress(nextTrainingStatus.trainingProgress);\r\n\r\n        if (onBoardingSteps[onBoardingStep] && onBoardingSteps[onBoardingStep].id === 4) {\r\n            updateOnBoardingStep(1);\r\n        }\r\n\r\n        if (nextTrainingStatus.isCompleted && !trainingStatus.isCompleted) {\r\n            navigationRef.current?.navigate(RouteNames.trainingCompleted);\r\n        }\r\n\r\n        setAreGoldHandsBlockingProgress(\r\n            getAreGoldHandsBlockingProgress(\r\n                gameConfig,\r\n                trainingHands,\r\n                nextTrainingStatus.trainingProgress,\r\n                getProgress(nextTrainingStatus)\r\n            )\r\n        );\r\n    };\r\n\r\n    const doubleHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.double, currentHand);\r\n        doubleCurrentHand(nextPlayer, getRandomCard());\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const hitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.hit, currentHand);\r\n        hitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.useBlueCards,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(currentHand, nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const standHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(BaseDecisions.stand, currentHand);\r\n        standCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    const splitHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.split, currentHand);\r\n        splitCurrentHand(\r\n            nextPlayer,\r\n            gameConfig.useBlueCards,\r\n            currentDealerSymbol!,\r\n            trainingHands,\r\n            trainingStatus.trainingProgress\r\n        );\r\n\r\n        setPlayer(nextPlayer);\r\n        if (isFinished(getCurrentHand(nextPlayer), nextPlayer.hands, gameConfig.casinoRules)) {\r\n            finishCurrentHand(nextPlayer);\r\n        }\r\n    };\r\n\r\n    const surrenderHandler = () => {\r\n        const nextPlayer = { ...player };\r\n        evaluatePlayerDecision(PlayerDecisions.surrender, currentHand);\r\n        surrenderCurrentHand(nextPlayer);\r\n        setPlayer(nextPlayer);\r\n        finishCurrentHand(nextPlayer);\r\n    };\r\n\r\n    return (\r\n        <NavigationContainer ref={navigationRef}>\r\n            <StatusBar hidden={true} />\r\n            <NavBar\r\n                areGoldHandsBlockingProgress={areGoldHandsBlockingProgress}\r\n                attemptedTrainingPairs={trainingStatus.attemptedTrainingPairs}\r\n                navigation={(navigationRef.current as unknown) as AppNavigation}\r\n                onBoardingStep={onBoardingStep}\r\n                passedTrainingPairs={trainingStatus.passedTrainingPairs}\r\n                player={player}\r\n                progress={progress}\r\n                routeName={currentRoute}\r\n            />\r\n            <Stack.Navigator\r\n                initialRouteName={initialRouteName}\r\n                screenOptions={{\r\n                    headerShown: false,\r\n                    cardStyle: {\r\n                        backgroundColor: tableColor\r\n                    }\r\n                }}\r\n            >\r\n                <Stack.Screen name={RouteNames.basicStrategyTable}>\r\n                    {() => <BasicStrategyTable casinoRules={gameConfig.casinoRules} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.blueCardsInfo} component={BlueCardsInfo} />\r\n                <Stack.Screen name={RouteNames.configMenu}>\r\n                    {(props) => (\r\n                        <ConfigMenu\r\n                            areGoldHandsBlockingProgress={areGoldHandsBlockingProgress}\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            progress={progress}\r\n                            setGameConfig={(_gameConfig) => {\r\n                                const nextTrainingHands = getTrainingHands(_gameConfig.casinoRules);\r\n                                setAreGoldHandsBlockingProgress(\r\n                                    getAreGoldHandsBlockingProgress(\r\n                                        _gameConfig,\r\n                                        nextTrainingHands,\r\n                                        trainingStatus.trainingProgress,\r\n                                        progress\r\n                                    )\r\n                                );\r\n                                setGameConfig(_gameConfig);\r\n                                setTrainingHands(nextTrainingHands);\r\n                            }}\r\n                            setTrainingStatus={(_trainingStatus) => {\r\n                                setTrainingStatus(_trainingStatus);\r\n                                setAreGoldHandsBlockingProgress(\r\n                                    getAreGoldHandsBlockingProgress(\r\n                                        gameConfig,\r\n                                        trainingHands,\r\n                                        _trainingStatus.trainingProgress,\r\n                                        getProgress(_trainingStatus)\r\n                                    )\r\n                                );\r\n                                setPlayer({ ...player, cash: 0 });\r\n                            }}\r\n                            trainingHands={trainingHands}\r\n                            trainingStatus={trainingStatus}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.failedHands}>\r\n                    {(props) => (\r\n                        <FailedHands\r\n                            failedTrainingPairs={trainingStatus.failedTrainingPairs}\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.goldHandsInfo} component={GoldHandsInfo} />\r\n                <Stack.Screen name={RouteNames.goldHandsLevelsInfo}>\r\n                    {() => <GoldHandsLevelsInfo gameConfig={gameConfig} />}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.handDecisions}>\r\n                    {(props) => (\r\n                        <HandDecisions casinoRules={gameConfig.casinoRules} route={props.route} />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.onboarding}>\r\n                    {() => (\r\n                        <Onboarding\r\n                            skipOnboardingHandler={exitOnboarding}\r\n                            startOnboardingHandler={() => updateOnBoardingStep(1)}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.table}>\r\n                    {(props) => (\r\n                        <Table\r\n                            dealerHand={dealerHand}\r\n                            decisionEvaluation={decisionEvaluation}\r\n                            gameConfig={gameConfig}\r\n                            handlers={{\r\n                                double: doubleHandler,\r\n                                hit: hitHandler,\r\n                                split: splitHandler,\r\n                                stand: standHandler,\r\n                                surrender: surrenderHandler\r\n                            }}\r\n                            isDoubleEnabled={isDoubleEnabled}\r\n                            isHitEnabled={isHitEnabled}\r\n                            isSplitEnabled={isSplitEnabled}\r\n                            isSurrenderEnabled={isSurrenderEnabled}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            peeking={peeking}\r\n                            phase={phase}\r\n                            player={player}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n                <Stack.Screen name={RouteNames.trainingCompleted} component={TrainingCompleted} />\r\n                <Stack.Screen name={RouteNames.trainingHands}>\r\n                    {(props) => (\r\n                        <TrainingHands\r\n                            gameConfig={gameConfig}\r\n                            navigation={props.navigation}\r\n                            onBoardingStep={onBoardingStep}\r\n                            phase={phase}\r\n                            startTrainingRound={startTrainingRound}\r\n                            trainingHands={trainingHands}\r\n                            trainingProgress={trainingStatus.trainingProgress}\r\n                        />\r\n                    )}\r\n                </Stack.Screen>\r\n            </Stack.Navigator>\r\n\r\n            {onBoardingStep > -1 && (\r\n                <OnboardingBar\r\n                    exitOnboarding={exitOnboarding}\r\n                    nextStepHandler={() => updateOnBoardingStep(1)}\r\n                    onBoardingStep={onBoardingStep}\r\n                    previousStepHandler={() => updateOnBoardingStep(-1)}\r\n                />\r\n            )}\r\n        </NavigationContainer>\r\n    );\r\n}\r\n","import { GameConfig } from '../types';\r\nimport { getDefaultCasinoRules } from './casino-rules';\r\n\r\nexport const getDefaultGameConfig = (): GameConfig => ({\r\n    casinoRules: getDefaultCasinoRules(),\r\n    goldHandsLevels: {\r\n        1: true,\r\n        2: true,\r\n        3: true,\r\n        4: true\r\n    },\r\n    isDealerAnimationEnabled: true,\r\n    isSoundEnabled: true,\r\n    useBlueCards: false,\r\n    useGoldHands: false\r\n});\r\n"],"sourceRoot":""}